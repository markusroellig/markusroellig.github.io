(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    604697,      13216]
NotebookOptionsPosition[    587054,      12725]
NotebookOutlinePosition[    587531,      12743]
CellTagsIndexPosition[    587488,      12740]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a Tool for Astronomy and Physics"
}], "Title",
 CellChangeTimes->{{3.4631492689871325`*^9, 3.4631492808119326`*^9}}],

Cell["\<\
Lecture 7
Wintersemester 2009/10

Markus R\[ODoubleDot]llig\
\>", "Subtitle",
 CellChangeTimes->{{3.4631492844155326`*^9, 3.463149301715933*^9}, {
   3.463149446339533*^9, 3.4631494500679326`*^9}, {3.463150895378133*^9, 
   3.4631508957369328`*^9}, {3.4631509331145325`*^9, 
   3.4631509348461323`*^9}, {3.4633918330178003`*^9, 3.4633918441094*^9}, {
   3.4633924180713997`*^9, 3.4633924208326*^9}, 3.4633925658190002`*^9, 
   3.464937683525*^9, 3.4654667940002003`*^9, 3.4661610144728003`*^9, 
   3.466824617671341*^9, 3.46772120193779*^9}],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Plotting - continuation",
 FontColor->GrayLevel[1]]], "Section",
 CellChangeTimes->{{3.4639983082662*^9, 3.4639983091382*^9}, {
  3.46772123042344*^9, 3.467721238301454*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Required Reading\n\n",
 ButtonBox["Basic Plotting",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/BasicPlotting"],
 "\n",
 ButtonBox["Graphics and Sound",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/GraphicsAndSoundOverview"],
 "\n",
 ButtonBox["Data Visualization\n",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/DataVisualization"],
 ButtonBox["Function Visualization",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/FunctionVisualization"]
}], "Text",
 CellChangeTimes->{{3.4639983436082*^9, 3.4639983981762*^9}, {
  3.4639988022516003`*^9, 3.4639988554756002`*^9}}],

Cell[CellGroupData[{

Cell["Combining Plots", "Subsection",
 CellChangeTimes->{{3.4642824554168*^9, 3.4642824580064*^9}}],

Cell[TextData[{
 "Required Reading\n\n",
 ButtonBox["Redrawing and Combining Plots",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/RedrawingAndCombiningPlots"],
 "\n",
 ButtonBox["Combining Graphics",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/CombiningGraphics"],
 "\n",
 ButtonBox["Grids, Rows, and Columns\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/GridsRowsAndColumnsOverview"],
 ButtonBox["Insetting Objects in Graphics",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/InsettingObjectsInGraphics"],
 "\n\n"
}], "Text",
 CellChangeTimes->{{3.4642824725924*^9, 3.4642824789728003`*^9}, {
  3.4642826484564*^9, 3.4642827151619997`*^9}, {3.464283036678*^9, 
  3.4642830520284*^9}}],

Cell[TextData[{
 "You can use the Show to either show a plot with an alternative set of \
options:\n",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Show",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Show"], "[", 
   RowBox[{
    StyleBox["graphics", "TI"], ",", 
    StyleBox["options", "TI"]}], "]"}]], "InlineFormula"],
 " or you can combine several plots in one.\n",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Show",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Show"], "[", 
   RowBox[{
    SubscriptBox[
     StyleBox["g", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["g", "TI"], 
     StyleBox["2", "TR"]], ",", 
    StyleBox["\[Ellipsis]", "TR"]}], "]"}]], "InlineFormula"],
 " shows several graphics combined."
}], "Text",
 CellChangeTimes->{{3.4642824834532003`*^9, 3.4642824886968*^9}, {
  3.4642825672116003`*^9, 3.4642826241204*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"x", "^", "2"}], "]"}], "/", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input"],

Cell["Now we change the options a little:", "Text",
 CellChangeTimes->{{3.466939027068632*^9, 3.4669390324350414`*^9}}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%", ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"8", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", ".3"}], ",", ".3"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"8.0", ",", "0"}], "}"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DensityPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], 
      RowBox[{"Sin", "[", "y", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], 
      RowBox[{"Sin", "[", "y", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", "None"}]}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.464282526168*^9, 3.4642825581012*^9}}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"%", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", 
   RowBox[{"%", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4642825317060003`*^9, 3.4642825437648*^9}}],

Cell[TextData[{
 "When combining two plots, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " again produces a Graphics object with the already known structure:"
}], "Text",
 CellChangeTimes->{{3.4669381916315517`*^9, 3.4669382537820606`*^9}}],

Cell["\<\
i1 = ParametricPlot[
Evaluate[{+2, +3} + (-1 +0.5 Sqrt[Abs[\[CurlyPhi]]]) {Cos[\[CurlyPhi]], Sin[\
\[CurlyPhi]]}],
                        {\[CurlyPhi], -4Pi, 4Pi}]

i2 = ParametricPlot[
Evaluate[{-5, -5} + (-1 - 3 Log@Sqrt[Abs[\[CurlyPhi]]]) {Cos[\[CurlyPhi]], \
Sin[\[CurlyPhi]]}],
                        {\[CurlyPhi], -3Pi, 3Pi}, PlotPoints -> 500]\
\>", "Input",
 CellChangeTimes->{{3.4669382616600747`*^9, 3.466938436207593*^9}}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"i1", ",", " ", "i2", ",", " ", 
   RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.466938459794834*^9, 3.466938462618439*^9}}],

Cell[TextData[{
 "The resulting ",
 StyleBox["Graphics", "MR"],
 "\[Hyphen]object consists of two separate lines along with the values of the \
options. The two lines are also contained in ",
 StyleBox["List", "MR"],
 ", which is necessary to pass on any graphics directives, such as thickness \
and color. "
}], "Text",
 CellChangeTimes->{3.4669384907764883`*^9}],

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"%", " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Line", "[", "_", "]"}], " ", "\[Rule]", "\"\<longLine\>\""}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.466938502554509*^9, 3.4669385056277146`*^9}}],

Cell[TextData[{
 "When you combine multiple plots using Show without any further options, \
then ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " uses the PlotRange from the first plot! This might cut off interesting \
parts of the remaining plots. The order is important here."
}], "Text",
 CellChangeTimes->{{3.46709265167869*^9, 3.467092739319644*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"0.2", 
         RowBox[{"Sin", "[", "x", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "Pi"}], "}"}]}], "]"}], ",", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"Cos", "[", "x", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "Pi"}], "}"}]}], "]"}]}], "}"}], "]"}], 
   ",", 
   RowBox[{"Show", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"Cos", "[", "x", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "Pi"}], "}"}]}], "]"}], ",", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"0.2", 
         RowBox[{"Sin", "[", "x", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "Pi"}], "}"}]}], "]"}]}], "}"}], "]"}]}],
   "}"}]], "Input",
 CellChangeTimes->{{3.4670927424084496`*^9, 3.4670927956669436`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwd2HlcTO37B/A2mh56ilKSqEkhnhASLZ9p2rQohUjRQotEZclSStqVtEuW
0EIikqSQSmkOoUeh5YkkhCQtM+fMlH739/fXeb1fZ173ueZc133d1+toeAU6
eUuIiYlJiouJ/f/18V8vP60MNvH90xUWkGBrovWt2nBOugPO37qwMZy7EMLb
S3a2p7njeLjsMUvuanxW9KPvpQUiX/Ssez7XGh2W0XUFaRF4b9PULMt1wRv3
tPkX0k6jTzm59o3pLjgFqHRkp+XiosXaXFnTI0gdcivLSruFg02XLRnjBBg2
2PzF3V+DRw+Hmo8iB0FH7T3LgnhIbz96RCwwD3vueydLaDajzk/W9WViEVr7
rGWuerUi+c29hbdYt3FyCV/snksb1s2hl0ZLliF4ES+zpuA/NBU/ni+z8B6E
O3aXdO3txtTSa1yp+ZXweuS8PsWnB1IaC6Xd2x5gx+/Wmpr4Xvzz1Xzd1oJq
JC2tCCyM/YISN8tlBak1kKipWBV9tA9zbtWn+VTVYpqO7csP2d8xpBmUZvyt
DmtzuXmDaf1Ytv9LW/ngEyj/arKMqBiA69Dyh5Z0PXIaq8Qldw1iZXp2aO6n
BhipmU6o7/wNSxv7heuLnmJRt3zvsQNDEMRlhMv7NsL+q3pdyOEhPDDLN8vb
1YiggaWXAsOGYK+07syKgEbcHVvv5hk9hEYZ3jen4EYYqaS2mmcM4Z/dQv3w
0EbYOU1rmHJ3CGpizg6nTzcioH5a4dnhIax9VLMz514jbl6b7le+bxg7z2W3
2orxEP3msankoWHoqpoZ3pbgwU1ij6pj6DAmb1f/PH0SD3+5Nb7sjxrGgpN1
4i0yPPjIha2clzkM8xltLiYKPKiHfJZIrxjGnHRL91otHjLM7l8IGhtGtHlj
5iFrHsLeb2tZFDuCpX5ZzecSeRixMr7gfXIE5rZ7CmNP8RBQOts3N3kEuRGt
DYGneXCN7hROPzMC8RPPu43SeVij48IWXh3B8PxrUXU5PDAHNwbzqBGI1vW4
hxbxECJrK+ctO4qlZe+SrzTwMBCi035x2igumQw6OzeSeLtl8tpmjCK+MWUn
i+LBuYynbzdnFJvfDDr4NvGw0sVy+/Ilo7B70LtDvoXEl296U9xxFJn9j33k
unkINjKwvZgxiqqf1XI1NA9iezMiTmePIiZWrJMt5CE5d7Ds+PlRdDFK7GgR
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
4mq+GMsMi2xFGjIc5fKSY//7PvB/Dx0kDQ==
        "]]}}, {{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

        "]]}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->
     NCache[{{0, Pi}, {0., 0.19999999415365852`}}, {{0, 3.141592653589793}, {
       0., 0.19999999415365852`}}],
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], 
      Scaled[0.02]}], ",", 
   GraphicsBox[{{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

        "]]}}, {{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwd2HlcTO37B/A2mh56ilKSqEkhnhASLZ9p2rQohUjRQotEZclSStqVtEuW
0EIikqSQSmkOoUeh5YkkhCQtM+fMlH739/fXeb1fZ173ueZc133d1+toeAU6
eUuIiYlJiouJ/f/18V8vP60MNvH90xUWkGBrovWt2nBOugPO37qwMZy7EMLb
S3a2p7njeLjsMUvuanxW9KPvpQUiX/Ssez7XGh2W0XUFaRF4b9PULMt1wRv3
tPkX0k6jTzm59o3pLjgFqHRkp+XiosXaXFnTI0gdcivLSruFg02XLRnjBBg2
2PzF3V+DRw+Hmo8iB0FH7T3LgnhIbz96RCwwD3vueydLaDajzk/W9WViEVr7
rGWuerUi+c29hbdYt3FyCV/snksb1s2hl0ZLliF4ES+zpuA/NBU/ni+z8B6E
O3aXdO3txtTSa1yp+ZXweuS8PsWnB1IaC6Xd2x5gx+/Wmpr4Xvzz1Xzd1oJq
JC2tCCyM/YISN8tlBak1kKipWBV9tA9zbtWn+VTVYpqO7csP2d8xpBmUZvyt
DmtzuXmDaf1Ytv9LW/ngEyj/arKMqBiA69Dyh5Z0PXIaq8Qldw1iZXp2aO6n
BhipmU6o7/wNSxv7heuLnmJRt3zvsQNDEMRlhMv7NsL+q3pdyOEhPDDLN8vb
1YiggaWXAsOGYK+07syKgEbcHVvv5hk9hEYZ3jen4EYYqaS2mmcM4Z/dQv3w
0EbYOU1rmHJ3CGpizg6nTzcioH5a4dnhIax9VLMz514jbl6b7le+bxg7z2W3
2orxEP3msankoWHoqpoZ3pbgwU1ij6pj6DAmb1f/PH0SD3+5Nb7sjxrGgpN1
4i0yPPjIha2clzkM8xltLiYKPKiHfJZIrxjGnHRL91otHjLM7l8IGhtGtHlj
5iFrHsLeb2tZFDuCpX5ZzecSeRixMr7gfXIE5rZ7CmNP8RBQOts3N3kEuRGt
DYGneXCN7hROPzMC8RPPu43SeVij48IWXh3B8PxrUXU5PDAHNwbzqBGI1vW4
hxbxECJrK+ctO4qlZe+SrzTwMBCi035x2igumQw6OzeSeLtl8tpmjCK+MWUn
i+LBuYynbzdnFJvfDDr4NvGw0sVy+/Ilo7B70LtDvoXEl296U9xxFJn9j33k
unkINjKwvZgxiqqf1XI1NA9iezMiTmePIiZWrJMt5CE5d7Ds+PlRdDFK7GgR
D9climbvyB9FfnWAJvcPDz08lYH5d0fRKbtrsFiSwsZNopTSllFsynS7rP83
Bf291W/rp/OxiN/w73w2hfrcWVPuKfHR9ur9LxdNCk7/huDqLD6+jdvGnZxH
Ye+KJdcS2Hy4HW7X+KpN4aow94i9Hh/9f2okkxdRmBkXObvNkY8uofzutBUU
hLnmXj9S+Ig+I+Nw0IKCicA4bVkmH4J4nSlJlhQi7VfVHTrLh6FmEnPJigJr
fCFb6gofN3zqAhqsKczYKtczu4wPq4H26/Q6CksVOzzt3/BR7K58kOVMYf/u
ltSMdj6q463sJDZTuFfXVNvRxceei4kbhcTGwY81fL/wMfiJRfe6ULB5mf8x
QsAH22MwPn8bBe/4QM9SFQFu/5f3pGknhWsf/FIFagKEq8vlF3lT6Nf3qjVm
C7Drwom70T4U9n3eqPFMR4BnnWbeK/0oHOeu+dhjKEB+e6RU5G4KOWNSnorb
BeiV7l9cG0yhOSjH49AVAdZvsarvDaOgkyIvOlAowLcEnaawYxSibsVm7rsu
wLyZc0wUwkk+BvY923NHAKsReQ/DCAoXdtuu2FlH7r/VOnc4koK/z5i0Y48A
g2EeXwpjSL5i9l2x/0LuF6slasVSUCvoM7L7LsB7B8+zV4ibP7UGWw0JMJV2
GzoTR2GV581OYwkasQudMgMTKEi5bb+lw6bxlvs9+3UShe2hrdYLtGmkF1x6
veoUhYocm14tHRrPPgYcPEfs366voqFHY9ZKXf62ZAr/OstFKXNpDI/e+PTq
NPl/ITFqMyxpKLL9vRekUIjOFFVMt6HR7Pz3+ghig9av/bJONJ468d0XpFK4
6FjjLOVFo3J32S7fNAp0kP5vcR8aYRLKemXETik3Eid20XistXrHOPGkV9k1
wmAak8sLJ5LSKQTYBev8jqShTxern82g8HT31/qBGBrmZvG6bcRzE7e59yfQ
UB0RK5iRSeE1ZZ3xNZXG2k33nycSr7Zi/+m6TJ5v1jGxM4vCirxn8Y0FNJYZ
a7tkEetO7FMoLaLRX/9c5ykxu+LJguhSGoPaM1dpnKEwWyGgbE85jaunK4Pt
iJUCFU02V5L484rmhRBPme+9QaeWxvj33cP1xJOjZN8rNNAI9Fst951Y7EO5
3ziPRso8uzzZbAojWZPDm5tpyA0YrFhPPDBUwqpqJfkQk1sWSNxnvzk9r43G
NDd2YRJx1+Rr10K6STwMQ9cRt3mtX+7RS6N9rOptJ/HravqRdR+NJurO4mHi
plmX1y7vp3Fe9EHIOkveV4h1y+xBGgnmpqZqxDWvf2+bPELDdO+biSXEVbo5
fb8ENP5zOadvSnz3JHd/u4jGp4nUz+uJb335Pl43QcMq6P5Ud+Lr3PT4G5IM
/F7L3thNnH/RUCFLmoGyd+qTEOKLwk8XIqYwSAznbjhOnO2ctGCXHIPAJHXX
eOK0OyvKnBQYvFFY1JlMnPR3l7GRMgOzUs+WdOJY/xieliqDwpn1ZmeII5/+
s0FuLgO3GU6LzxKHsd920WwGS05OOfU/h4SH+/VoM9gcPOidTRzUoT38XIfB
4f/EKjKJ/fVfHSvXZVAwYnQ8lXhn2iFWrh5ZT5hfm0i8fWBuerw+gySL1aHR
xFtseGr71jBIthDeCCXeUBh0zdWEwYLIPudgYnsJleUWXAYpWVJHvInXbq99
pGvJwMfQQWELMbdq19qZNgweGFFa1sRGStNbxO0ZsCL23zYg1t9Xte2HIwOD
P/Zl2sRLX3r1tW5ikPvCTVeBWCu2bPzqNhLPXMVTX0k+1Xtc41M9Gbw3rgl6
RTzLREoh1JvBxKe8pnLiv/kbF9jvYfBLbObPY8Qsp/E7q4IZDLwsLnUnligp
MNY4yECt5dgAiAXefKeRMAbyur3NIlKfQ7UXu7qOM9h5JizkHXG/mpVfYzSD
qW6uGaXE3W/OHMtJYqA0Z9TAk5iyWH2Nc56BsOy9VgnZL4cbw3UjLpF8Dbu4
HSFeYF1/91E+gxr6awOXONbOoXbNTQbDzbZ6zWQ/mm/w7lhRzWCHaWHQG7J/
R1qve+yvYxDjqMNJI85zHvxS+pTB9T2fuOuIJbaGDuu+YuCxidXziPSDGo/U
qQu7GbykbsQlkH4R1PM2zbeXgbuJ3+9VxHN3zlYp7GOQrx6V3Ev6T7jvVS3N
3wwmNQ54GRAb7X1koiYhhPkH64PPSD+rCP0WNG2eEAalnRbZpD/6jOsKHBYI
cX88o28hsVLEgWPJi4WIp2Y9rkykcODERMKUleT3qcXSrScp6CXMyJtkKcTz
1qfSw/EUSrJM3zC+QkhLhTzviCb1NTPO1SBAiB06v0sciGVzmj6GBAmx0ezp
07oo0t8ubB4YPiwkdVKYnneC9Nf8PdIDCUJ8b3HJczhOoaD07OqeYiHcPPvy
HENJPYtcddpuCbF3m7lS+VFSPxZzVF+WCcHa/5NWIn7YdmWs8oEQLfXr5N4e
ptAyUfw49bkQgxvcIk1DKIjbV1uY/hBiz3hx1IsgCtu+9zhe0hFhoGlwXRU5
H9krCrhZuiLc7zj9/scO0o+O+S5P0hPh+YGP3arEB6b1Kx5eI8JWz1drDnlS
SDQYfedgI0KOiGOhup1CZaz09oldIlAG7JqZ5HyeobnYf3uRCAGBire/kfM/
JS3RueimCNor1FmtZD74S+IHd6RUBFfaO/khmR/EPhapnqwSwX7moFa8GanH
i/NflD8XQbhmTZQMyHk4S3Op7IAIl1QGWeUrSTzTZ/Ef6I0h3F6u45YGhV+R
R3omrxqDUXoX20OdvK/fbS8dDccw7nf9/N9zKXg0n7n61WwMasqXNX1mU7BL
nuGisGkMW0buRE4oUdD8a9pD/0NjuJ3nktE5hfRXcdYJlYdjYFqnPFs9Qua/
m2e3r68ZQwb1I6tiiAeZrYsM4+rHkOxffm35bx44d+xHRprGcOBQ8DntAR5K
vDJ9mrvGUPI+pkbwlYfEJ2zbuIkx0DfWaVh18mAeY6w4yh1Hz4j8pHM1PJSz
9hc2U+Nou+MjUIvl4UtY5M/qF+M4eLlog0M0DzN/n15x899xuEerrYw4Qebf
9ht1Ce3jcLBhxXeEk/Wuf3nP/TaOF00TQRGHeHhtu1W5nPUHQRbBfif8eBhM
No0/a/UHjcofKveQ+XnxDHl/r4Y/GN3in9k9mYdfyXzF5W8nsEQq0b/UqxGa
cXFLAv3FOG2P2x0PlD5Fz9bODu5XMY5UE93T97MBaz+3MOV7xTnxj+kXCyUa
cHift5/ST3FOfv2ZJ0L5etjfO2ejFCLBcct50RcyWoeBMf8wSb4E53wue3xm
ey0uv4u8u3e/JMfcYKrGxO0aCP2MPY6IJDnlf3wkQx9UQ2081TX4qBSnla45
0M5+iC9Wic9YUpM4P3Cf3re8Ek+0mzAncRJHis5457vyHvxZhVIaMpM5vZrf
dhzYWIaKS/OMn6RO5iiGfTe0V7+Nl4ZGDU7TpDn5wsyan5rXQfuf2+CRLM25
HaKy8enUfPDW526SVWJxZs2u9NhfkQOv1UZXr2YQa+9PXWaShF0/X4z+l8Xi
ZLwfLPZ+kYigy+7m08+yOPLf5l0745aICJmoj2EXWBypZdP8Ro+exPl2StWp
kMWxExbzsyvi8fbI5pSxChYnxnCoNW5pDGyq9h1x7CTrPfl4NpIbBse9UrzY
LhYnaenP01EeodjCzlJ6+IHF2VIhDIwKPwrfk5Vl2r0sTvenMb1jVYcRvVVs
QNTP4lQ9e164Ve8gqoWnvAr/sDhX3n0pyTYLQEPJ3NJOMRmO8PAJMf8IfzR5
lU7IS8pwMl5Yrlv9wA+dz1rPh0rLcE68UPF6recNOkf13Xp5GU7SVfPQXjM3
TNjf1IqdLsOx0zi0de+DLZgsiQMPFGU4PGvuZr7eJiju9pqmrSLD2VSZflTS
3A6qc0fcXVVlOL3Odz2mLLcAuyWmJEVNhvPqfLGTprkRdOKUxxvmynDWpi87
4mq+GMsMi2xFGjIc5fKSY//7PvB/Dx0kDQ==
        "]]}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->
     NCache[{{0, Pi}, {-0.9999999999999979, 0.9999999999999979}}, {{
       0, 3.141592653589793}, {-0.9999999999999979, 0.9999999999999979}}],
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], 
      Scaled[0.02]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.467092772204502*^9, 3.467092796134944*^9}}]
}, Open  ]],

Cell[TextData[{
 "You can also ",
 ButtonBox["Inset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Inset"],
 " one graphic object into another"
}], "Text",
 CellChangeTimes->{{3.464282804394*^9, 3.4642828342056*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"in", "=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{"-", "3"}], " ", "Pi"}], ",", 
       RowBox[{"3", "Pi"}]}], "}"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "100"}], ",", 
     RowBox[{"Frame", "->", "True"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], " ", "/", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"-", "3"}], " ", "Pi"}], ",", 
     RowBox[{"3", "Pi"}]}], "}"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"Inset", "[", 
     RowBox[{"in", ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "0.6"}], "}"}]}], "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.464282839104*^9, 3.4642830058212*^9}}],

Cell["You can arrange multiple plots in Grids, Rows and Columns", "Text",
 CellChangeTimes->{{3.4642831409639997`*^9, 3.4642831632096*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["GraphicsRow",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/GraphicsRow"], "[", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox[
      StyleBox["g", "TI"], 
      StyleBox["1", "TR"]], ",", 
     SubscriptBox[
      StyleBox["g", "TI"], 
      StyleBox["2", "TR"]], ",", 
     StyleBox["\[Ellipsis]", "TR"]}], "}"}], "]"}]], "InlineFormula"],
 " ",
 "generates a graphic in which the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["g", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 " are laid out in a row."
}], "Text",
 CellChangeTimes->{{3.4670925204512596`*^9, 3.4670925244760666`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["GraphicsColumn",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/GraphicsColumn"], "[", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox[
      StyleBox["g", "TI"], 
      StyleBox["1", "TR"]], ",", 
     SubscriptBox[
      StyleBox["g", "TI"], 
      StyleBox["2", "TR"]], ",", 
     StyleBox["\[Ellipsis]", "TR"]}], "}"}], "]"}]], "InlineFormula"],
 "generates a graphic in which the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["g", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 " are laid out in a column, with ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["g", "TI"], 
   StyleBox["1", "TR"]]], "InlineFormula"],
 " above ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["g", "TI"], 
   StyleBox["2", "TR"]]], "InlineFormula"],
 ", etc. "
}], "Text",
 CellChangeTimes->{{3.4670925418856974`*^9, 3.467092546269305*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["GraphicsGrid",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/GraphicsGrid"], "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox[
        StyleBox["g", "TI"], 
        StyleBox["11", "TR"]], ",", 
       SubscriptBox[
        StyleBox["g", "TI"], 
        StyleBox["12", "TR"]], ",", 
       StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
     StyleBox["\[Ellipsis]", "TR"]}], "}"}], "]"}]], "InlineFormula"],
 "generates a graphic in which the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["g", "TI"], 
   StyleBox["ij", "TI"]]], "InlineFormula"],
 " are laid out in a two-dimensional grid."
}], "Text",
 CellChangeTimes->{{3.467092558764927*^9, 3.467092562883334*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$TrigFunctions", "=", 
   RowBox[{"{", 
    RowBox[{"Sin", ",", "Cos", ",", "Sec", ",", "Csc"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Plot3D", "[", 
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{"f", "[", 
        RowBox[{"x", "+", 
         RowBox[{"I", " ", "y"}]}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", 
        RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
      RowBox[{"MeshFunctions", "\[Rule]", 
       RowBox[{"Function", "@@@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
            RowBox[{"Re", "[", 
             RowBox[{"f", "[", 
              RowBox[{"x", "+", 
               RowBox[{"I", " ", "y"}]}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
            RowBox[{"Im", "[", 
             RowBox[{"f", "[", 
              RowBox[{"x", "+", 
               RowBox[{"I", " ", "y"}]}], "]"}], "]"}]}], "}"}]}], "}"}]}]}], 
      ",", 
      RowBox[{"MeshStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Orange", ",", "Green"}], "}"}]}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", "f"}], ",", 
      RowBox[{"Ticks", "\[Rule]", "None"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"f", ",", "$TrigFunctions"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"GraphicsRow", "[", "%", "]"}], "\[IndentingNewLine]", 
 RowBox[{"GraphicsColumn", "[", "%%", "]"}], "\[IndentingNewLine]", 
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"%%%", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
    RowBox[{"%%%", "[", 
     RowBox[{"[", 
      RowBox[{"3", ";;", "4"}], "]"}], "]"}]}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{
  3.4642829736384*^9, {3.4642831369547997`*^9, 3.4642832075916*^9}, {
   3.4642832526443996`*^9, 3.4642833217836*^9}}],

Cell[CellGroupData[{

Cell["Excercise", "Subsubsection",
 CellChangeTimes->{{3.466504388170369*^9, 3.4665043896055713`*^9}}],

Cell[TextData[StyleBox["Create a 3x2 array of plots. Adapt the ImageSize so \
that all plots fit on your screen.",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.466504399807989*^9, 3.466504455968088*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[StyleBox["What happens when you use Show to combine the two \
plots:\nPlot[x,{x,0,5}] and Plot[x,{x,-5,0}]. pay attention to the resulting \
x- and y-range.",
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]], "Text",
 CellChangeTimes->{{3.466504488603345*^9, 3.4665045622822742`*^9}}],

Cell["\<\
Use GraphicsRow to plot the two plots from the excercise before in a row and \
draw frames around each plot.\
\>", "Text",
 CellChangeTimes->{{3.46650460538515*^9, 3.4665046346976013`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["Instead of GraphicsRow use Row. What are the differences?", "Text",
 CellChangeTimes->{{3.466504640547612*^9, 3.46650465085923*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Plot a function of your choice and write the function in a corner of the plot.\
\>", "Text",
 CellChangeTimes->{{3.466504640547612*^9, 3.46650465085923*^9}, {
  3.4667887148614793`*^9, 3.466788754251549*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Logarithmic Plots", "Subsection",
 CellChangeTimes->{{3.4642833620472*^9, 3.4642833660875998`*^9}}],

Cell[TextData[{
 "Plot uses a decimal axis scale. You can use logarithmic scales using the \
following commands:\n",
 ButtonBox["LogPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LogPlot"],
 ", ",
 ButtonBox["LogLinearPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LogLinearPlot"],
 ", ",
 ButtonBox["LogLogPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LogLogPlot"]
}], "Text",
 CellChangeTimes->{{3.46428337824*^9, 3.4642834462716*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", "x"}], "]"}], "+", 
   RowBox[{"4", " ", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "2"}], "x"}], "]"}]}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "6"}], "}"}]}], "]"}], ",", 
   RowBox[{"LogPlot", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "6"}], "}"}]}], "]"}], ",", 
   RowBox[{"LogLinearPlot", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "6"}], "}"}]}], "]"}], ",", 
   RowBox[{"LogLogPlot", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "6"}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.464283488454*^9, 3.4642834973304*^9}}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["LogPlot",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/LogPlot"]], "InlineFormula"],
 " effectively generates a curve based on ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Log",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Log"], "[", 
   StyleBox["f", "TI"], "]"}]], "InlineFormula"],
 ", but with tick marks indicating the values of the underlying function ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{3.4642835440212*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"LogPlot", "[", 
    RowBox[{
     RowBox[{"x", "^", 
      RowBox[{"Sin", "[", "x", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Log", "[", 
      RowBox[{"x", "^", 
       RowBox[{"Sin", "[", "x", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"-", "1.5"}]}], "}"}]}]}], "]"}]}], "}"}]], "Input"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " uses a special set of rules to determine which ticks to draw in \
logarithmic plots. The result may not be what you might want for publication \
ready plots. Sometimes you will need to use custom ticks to produce the \
desired results. Sometimes it is just the tick mark labels that are not what \
you might want."
}], "Text",
 CellChangeTimes->{{3.466504760137422*^9, 3.4665048530355854`*^9}, {
  3.4665048983068647`*^9, 3.466504920536904*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogLogPlot", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0.001", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.466504856077591*^9, 3.4665048787600307`*^9}, {
  3.4669474991058583`*^9, 3.4669475026158648`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
u8Z/O3okUVhYXv71j1dbozPqUPs/d6rYKA==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0.001, -3.9154935499896473`},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& )},
  Frame->False,
  FrameTicks->{{{{-4.605170185988092, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.01\"", 0.01, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {-3.912023005428146, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.02\"", 0.02, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {-2.995732273553991, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {-2.302585092994046, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {-1.6094379124341003`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.20\"", 0.2, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.50\"", 0.5, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {0., 
       FormBox[
        TagBox[
         InterpretationBox["\"1.00\"", 1., AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"2.00\"", 2., AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {1.6094379124341003`, 
       FormBox[
        TagBox[
         InterpretationBox["\"5.00\"", 5., AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
        TraditionalForm]}, {-3.506557897319982, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-3.2188758248682006`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.8134107167600364`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.6592600369327783`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.5257286443082556`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.4079456086518722`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-1.2039728043259361`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.916290731874155, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.5108256237659907, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.35667494393873245`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.2231435513142097, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.10536051565782628`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {1.0986122886681098`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {1.3862943611198906`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}}, {{-4.605170185988092, 
       FormBox["\"\"", TraditionalForm]}, {-3.912023005428146, 
       FormBox["\"\"", TraditionalForm]}, {-2.995732273553991, 
       FormBox["\"\"", TraditionalForm]}, {-2.302585092994046, 
       FormBox["\"\"", TraditionalForm]}, {-1.6094379124341003`, 
       FormBox["\"\"", TraditionalForm]}, {-0.6931471805599453, 
       FormBox["\"\"", TraditionalForm]}, {0., 
       FormBox["\"\"", TraditionalForm]}, {0.6931471805599453, 
       FormBox["\"\"", TraditionalForm]}, {1.6094379124341003`, 
       FormBox["\"\"", TraditionalForm]}, {-3.506557897319982, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-3.2188758248682006`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.8134107167600364`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.6592600369327783`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.5257286443082556`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-2.4079456086518722`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-1.2039728043259361`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.916290731874155, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.5108256237659907, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.35667494393873245`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.2231435513142097, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {-0.10536051565782628`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {1.0986122886681098`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {1.3862943611198906`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}}}, {Automatic, Automatic}},
  GridLines->{None, None},
  Method->{},
  PlotRange->{{0.001, 1}, {-3.9154935499896473`, 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, {{-4.605170185988092, 
      FormBox[
       TagBox[
        InterpretationBox["\"0.01\"", 0.01, AutoDelete -> True], 
        NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {-3.912023005428146, 
      FormBox[
       TagBox[
        InterpretationBox["\"0.02\"", 0.02, AutoDelete -> True], 
        NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {-2.995732273553991, 
      FormBox[
       TagBox[
        InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
        NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {-2.302585092994046, 
      FormBox[
       TagBox[
        InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {-1.6094379124341003`, 
      FormBox[
       TagBox[
        InterpretationBox["\"0.20\"", 0.2, AutoDelete -> True], NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {-0.6931471805599453, 
      FormBox[
       TagBox[
        InterpretationBox["\"0.50\"", 0.5, AutoDelete -> True], NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {0., 
      FormBox[
       TagBox[
        InterpretationBox["\"1.00\"", 1., AutoDelete -> True], NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {0.6931471805599453, 
      FormBox[
       TagBox[
        InterpretationBox["\"2.00\"", 2., AutoDelete -> True], NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {1.6094379124341003`, 
      FormBox[
       TagBox[
        InterpretationBox["\"5.00\"", 5., AutoDelete -> True], NumberForm[#, {
          DirectedInfinity[1], 2}, NumberPadding -> {"", "0"}]& ], 
       TraditionalForm]}, {-3.506557897319982, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-3.2188758248682006`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-2.8134107167600364`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-2.6592600369327783`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-2.5257286443082556`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-2.4079456086518722`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-1.2039728043259361`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-0.916290731874155, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-0.5108256237659907, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-0.35667494393873245`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-0.2231435513142097, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {-0.10536051565782628`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {1.0986122886681098`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {1.3862943611198906`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}}}]], "Output",
 CellChangeTimes->{{3.466947485877035*^9, 3.46694749994826*^9}}]
}, Open  ]],

Cell["\<\
For ranges of more than 6 dex the ticks and labels are placed very \
unconveniently:\
\>", "Text",
 CellChangeTimes->{{3.466504971938994*^9, 3.466505034432704*^9}}],

Cell[BoxData[
 RowBox[{"LogLogPlot", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", 
     SuperscriptBox["10", "7"]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.466504856077591*^9, 3.4665048787600307`*^9}, {
  3.4665050353687057`*^9, 3.466505047755127*^9}}],

Cell[BoxData[
 RowBox[{"LogLogPlot", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", 
     SuperscriptBox["10", "6"]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.466504856077591*^9, 3.4665048787600307`*^9}, {
  3.4665050353687057`*^9, 3.4665050598607483`*^9}}],

Cell["\<\
Take a look at the 'true' coordinates of a log-plot.\
\>", "Text",
 CellChangeTimes->{{3.4669473479043827`*^9, 3.4669473694324207`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogPlot", "[", 
  RowBox[{
   SuperscriptBox["x", "20"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4669475161254883`*^9, 3.4669475167806892`*^9}, {
  3.466947621285273*^9, 3.4669476227048755`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVjnsw1AkAx7ctWyy1Zcljw/qNZ6e8ok38vsv6bTuh7uKuh8ajc8LEGTRN
p8uzROwSkaQHpeTkdbr0IKVcVEI7KEud9qhWayWKcnt/fOc7n5nvd75fbmjM
D2F0Go3mq9b/3jfh60CjKcmJirzpxq4nHg+WXsv2YyrJczxreuSGKrJ+Nett
ib6SfFe/RuZuf4vMCeu+wLNTkoEOMwO7OZ2kV/+P7LidSrJ5X2Urb+oFWd0S
NP2mQUlad9eR9Zffkeni2NsdERPkZtn+r/N6s6SjXYGosEdFXmXIfXwWa4Eb
ElbLHJkiDweFTzPYhrgpXrQirWWGLPjYqnoTx0W5DsOpNGeW1PNSBjg2W8A8
TVJWcOob+VjKMG78YINLX+KPbPqLhouVTSMHEu2Qvlb+2tmTjl0Kiyxasj20
j2eYqu4vhG7s6X66gSPGwvK219pp4PvIdr3jB5zAuhXMG2pgQBB8rMh90BnZ
4pP6y8yXQKtNpnTUc0Fd5teeZRma6As5VFuyzhVcug3vsDYT6ew/Axx2r4f8
081i5X5tFJ8vo+8N5WEqXLe8a14HAW3P3AUxG1BFK8lOTl6GaF5vr2WkGwKZ
D3jF8SzkQs8nS7QRGf7naFddl+Ph6SUuvg7uCAqsbrulWI4PtUf8smge2HWh
VKZRvwL3sizNGH0eWJ1YEX49XheNor3/GJeRuMgeGY+wYWODInGo/TvA+x39
0TYFGzyXnYbWxwFJUkCZR7keXu1d3mn0Gqi+0vI+9yd9fLq3R1DhxIeKtTST
Y7QSWf9uSRUe4+OVi9ji8tOVGIpISKyW8jFVrGJH5RtggLY1n27ticG86PiT
AYaQ6Eddi0zwRIzIpLtV0wjTKc8qJDc9YeVRk2r52Ai2yW1Xjmh4IXMiwSkr
1RiEs/NwzSYvtKz337bdhQMjgd/ZwQwvcO6wHwbOcCB2OSNu6vQCQdfkhf6x
ClMjCTf2awmwJW3oW2msCRiGTxObNwtg2TbW+tLaFMyg0HvuRwXoOqU9nfLS
FI7ysFx+iwBbpRlkzRYz3J7bk143J8BS8mLK2UozyBvPuPY7eUP2oC7GVocL
2FUF+0Z7o6ioM39sHxeFhV43oi5547KIxrNp50L06zjzWr83HhlaHF1ka465
zvlBLouC5997/IPTzVHddbVXyadQ3lq9Qykzx/t22+d9sRQMXrxdwgGBYONo
3d5yCq+74dpeTODGigOHk3oolFpv1t9dQmByZe+sXy+FHb8HTE2cIdDw7Fj4
qucUumwi643PE2g20dFpklK4k3RibUwFAcrkjkTVT+H0GrmVfgMBodj0UPAw
Bf/MLIOfHxMYOLhvbq2CAmu4YHrmCYHxj5YRc2ruWHdOmt1FIPJRTlv7uPr/
q4b86z0EzFVxviFKCvbrZSzmAAGn2ZencicpaMvtNevkBHzNoq0+fKbQ7uY2
So2q86kCSdMXCqm53g9fjBFIK1ONps9S+LJxZ7qGQr0XNBzB+Uph9ETqgh2T
BIwOiio30YQoH8seVnwk8EuSRZ7uAiGCyKLmlE8EQpoUETI1S99WHar6rO7P
+IzFLRQiD9cD+bME7uqOSTwWCeF38q6bdI7A/ZzfrDU1hNB632EU9Y1A4SSj
pkfNbXzp5/l5Au4d2ValDCH+A7BzKcE=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{1, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& )},
  Frame->False,
  FrameTicks->{{{{0, 
       FormBox["1", TraditionalForm]}, {9.210340371976184, 
       FormBox[
        TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm]}, {18.420680743952367`, 
       FormBox[
        TemplateBox[{"10", "8"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm]}, {27.631021115928547`, 
       FormBox[
        TemplateBox[{"10", "12"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], TraditionalForm]}, {36.841361487904734`, 
       FormBox[
        TemplateBox[{"10", "16"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], TraditionalForm]}, {46.051701859880914`, 
       FormBox[
        TemplateBox[{"10", "20"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], TraditionalForm]}, {7.013915474810528, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {7.706612913964197, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.111928063310739, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.399535147948004, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.622633703874234, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.80492526261806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.959054514715692, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {9.092569836241674, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.22425584678671, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.91695328594038, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.322268435286922`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.609875519924188`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.832974075850416`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.015265634594243`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.169394886691876`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.302910208217856`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {25.434596218762895`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.127293657916564`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.532608807263106`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.82021589190037, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.0433144478266, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.225606006570427`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.37973525866806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.51325058019404, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {34.64493659073908, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.33763402989275, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.74294917923929, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.030556263876555`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.25365481980278, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.43594637854661, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.59007563064424, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.72359095217022, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {43.85527696271526, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.54797440186893, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.95328955121547, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.240896635852735`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.46399519177896, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.64628675052279, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.80041600262042, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.93393132414641, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}}, {{0, 
       FormBox["\"\"", TraditionalForm]}, {9.210340371976184, 
       FormBox["\"\"", TraditionalForm]}, {18.420680743952367`, 
       FormBox["\"\"", TraditionalForm]}, {27.631021115928547`, 
       FormBox["\"\"", TraditionalForm]}, {36.841361487904734`, 
       FormBox["\"\"", TraditionalForm]}, {46.051701859880914`, 
       FormBox["\"\"", TraditionalForm]}, {7.013915474810528, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {7.706612913964197, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.111928063310739, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.399535147948004, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.622633703874234, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.80492526261806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.959054514715692, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {9.092569836241674, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.22425584678671, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.91695328594038, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.322268435286922`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.609875519924188`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.832974075850416`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.015265634594243`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.169394886691876`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.302910208217856`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {25.434596218762895`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.127293657916564`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.532608807263106`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.82021589190037, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.0433144478266, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.225606006570427`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.37973525866806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.51325058019404, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {34.64493659073908, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.33763402989275, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.74294917923929, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.030556263876555`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.25365481980278, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.43594637854661, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.59007563064424, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.72359095217022, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {43.85527696271526, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.54797440186893, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.95328955121547, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.240896635852735`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.46399519177896, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.64628675052279, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.80041600262042, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.93393132414641, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}}}, {Automatic, Automatic}},
  GridLines->{None, None},
  Method->{},
  PlotRange->{{1, 10}, {0., 46.05170149253397}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, {{0, 
      FormBox["1", TraditionalForm]}, {9.210340371976184, 
      FormBox[
       TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox], 
       TraditionalForm]}, {18.420680743952367`, 
      FormBox[
       TemplateBox[{"10", "8"}, "Superscript", SyntaxForm -> SuperscriptBox], 
       TraditionalForm]}, {27.631021115928547`, 
      FormBox[
       TemplateBox[{"10", "12"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TraditionalForm]}, {36.841361487904734`, 
      FormBox[
       TemplateBox[{"10", "16"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TraditionalForm]}, {46.051701859880914`, 
      FormBox[
       TemplateBox[{"10", "20"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TraditionalForm]}, {7.013915474810528, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {7.706612913964197, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.111928063310739, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.399535147948004, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.622633703874234, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.80492526261806, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.959054514715692, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {9.092569836241674, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {16.22425584678671, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {16.91695328594038, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {17.322268435286922`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {17.609875519924188`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {17.832974075850416`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {18.015265634594243`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {18.169394886691876`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {18.302910208217856`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {25.434596218762895`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {26.127293657916564`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {26.532608807263106`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {26.82021589190037, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.0433144478266, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.225606006570427`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.37973525866806, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.51325058019404, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {34.64493659073908, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {35.33763402989275, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {35.74294917923929, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.030556263876555`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.25365481980278, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.43594637854661, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.59007563064424, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.72359095217022, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {43.85527696271526, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {44.54797440186893, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {44.95328955121547, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.240896635852735`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.46399519177896, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.64628675052279, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.80041600262042, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.93393132414641, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}}}]], "Output",
 CellChangeTimes->{{3.466947512287882*^9, 3.4669475180442915`*^9}, 
   3.466947623469277*^9}]
}, Open  ]],

Cell[TextData[{
 "The y-value ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"20", " "}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "is drawn at the plot y-value of ",
 "46.051701859880914. "
}], "Text",
 CellChangeTimes->{{3.4669480266519847`*^9, 3.4669480269795856`*^9}, {
  3.4669480578676395`*^9, 3.46694808622849*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"InputForm", "[", 
   RowBox[{"Options", "[", 
    RowBox[{"LogPlot", "[", 
     RowBox[{
      SuperscriptBox["x", "20"], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}], "]"}], "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "10"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.466947372677226*^9, 3.4669473966544685`*^9}, {
  3.4669474659558*^9, 3.4669474701678076`*^9}, {3.4669475049558687`*^9, 
  3.466947522490299*^9}, {3.466947602924041*^9, 3.4669476042032433`*^9}, {
  3.466947694090601*^9, 3.466947702670616*^9}, {3.4669477394398804`*^9, 
  3.4669477753667436`*^9}, {3.4669480318155937`*^9, 3.4669480490380244`*^9}}],

Cell[BoxData[
 TagBox[
  FrameBox["\<\"{Ticks -> {Automatic, {{0, 1}, {9.210340371976184, \
Superscript[10, 4]}, {18.420680743952367, Superscript[10, 8]}, \
{27.631021115928547, Superscript[10, 12]}, {36.841361487904734, \
Superscript[10, 16]}, {46.051701859880914, Superscript[10, 20]}, \
{7.013915474810528, \\\"\\\", {0.00375, 0.}, {Thickness[0.001]}}, {<<4>>}, \
<<34>>, {45.46399519177896, \\\"\\\", {0.00375, 0.}, {Thickness[0.001]}}, \
{45.64628675052279, \\\"\\\", {0.00375, 0.}, {Thickness[0.001]}}, \
{45.80041600262042, \\\"\\\", {0.00375, 0.}, {Thickness[0.001]}}, \
{45.93393132414641, \\\"\\\", {0.00375, 0.}, {Thickness[0.001]}}}}, <<14>>}\"\
\>",
   BoxFrame->False,
   FrameMargins->{{False, False}, {False, False}}],
  Short[#, 10]& ]], "Output",
 CellChangeTimes->{
  3.466947399322073*^9, 3.466947471072609*^9, {3.4669475059698706`*^9, 
   3.4669475231611004`*^9}, 3.4669476049676447`*^9, 3.4669477042462187`*^9, {
   3.4669477448530903`*^9, 3.4669477759907446`*^9}, {3.4669480332507963`*^9, 
   3.4669480497556257`*^9}}]
}, Open  ]],

Cell[TextData[{
 "This is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"ln", "(", 
    SuperscriptBox["10", "20"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.4669480924997005`*^9, 3.466948101906517*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Log", "[", 
   SuperscriptBox["10", "20"], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.4669479120073833`*^9, 3.4669479226310024`*^9}}],

Cell[BoxData["46.051701859880914`"], "Output",
 CellChangeTimes->{{3.466947919822997*^9, 3.4669479231302032`*^9}}]
}, Open  ]],

Cell["\<\
Imagine you want to write some text in the plot. You can use Epilog to do \
this, but beware the coordinates:\
\>", "Text",
 CellChangeTimes->{{3.4669481267573605`*^9, 3.4669481554458113`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogPlot", "[", 
  RowBox[{
   SuperscriptBox["x", "20"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"Text", "[", 
     RowBox[{
     "\"\<\!\(\*SuperscriptBox[\(10\), \(15\)]\)\[TildeTilde]35\>\"", ",", 
      " ", 
      RowBox[{"{", 
       RowBox[{"8", ",", "35"}], "}"}]}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.466948163682626*^9, 3.4669481687058344`*^9}, {
  3.4669482005922904`*^9, 3.466948397343042*^9}, {3.466955034002612*^9, 
  3.466955212778926*^9}, {3.466955255460601*^9, 3.4669552888602595`*^9}, {
  3.4669569324635468`*^9, 3.466956938765958*^9}, {3.46695698558164*^9, 
  3.466957012273287*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVjnsw1AkAx7ctWyy1Zcljw/qNZ6e8ok38vsv6bTuh7uKuh8ajc8LEGTRN
p8uzROwSkaQHpeTkdbr0IKVcVEI7KEud9qhWayWKcnt/fOc7n5nvd75fbmjM
D2F0Go3mq9b/3jfh60CjKcmJirzpxq4nHg+WXsv2YyrJczxreuSGKrJ+Nett
ib6SfFe/RuZuf4vMCeu+wLNTkoEOMwO7OZ2kV/+P7LidSrJ5X2Urb+oFWd0S
NP2mQUlad9eR9Zffkeni2NsdERPkZtn+r/N6s6SjXYGosEdFXmXIfXwWa4Eb
ElbLHJkiDweFTzPYhrgpXrQirWWGLPjYqnoTx0W5DsOpNGeW1PNSBjg2W8A8
TVJWcOob+VjKMG78YINLX+KPbPqLhouVTSMHEu2Qvlb+2tmTjl0Kiyxasj20
j2eYqu4vhG7s6X66gSPGwvK219pp4PvIdr3jB5zAuhXMG2pgQBB8rMh90BnZ
4pP6y8yXQKtNpnTUc0Fd5teeZRma6As5VFuyzhVcug3vsDYT6ew/Axx2r4f8
081i5X5tFJ8vo+8N5WEqXLe8a14HAW3P3AUxG1BFK8lOTl6GaF5vr2WkGwKZ
D3jF8SzkQs8nS7QRGf7naFddl+Ph6SUuvg7uCAqsbrulWI4PtUf8smge2HWh
VKZRvwL3sizNGH0eWJ1YEX49XheNor3/GJeRuMgeGY+wYWODInGo/TvA+x39
0TYFGzyXnYbWxwFJUkCZR7keXu1d3mn0Gqi+0vI+9yd9fLq3R1DhxIeKtTST
Y7QSWf9uSRUe4+OVi9ji8tOVGIpISKyW8jFVrGJH5RtggLY1n27ticG86PiT
AYaQ6Eddi0zwRIzIpLtV0wjTKc8qJDc9YeVRk2r52Ai2yW1Xjmh4IXMiwSkr
1RiEs/NwzSYvtKz337bdhQMjgd/ZwQwvcO6wHwbOcCB2OSNu6vQCQdfkhf6x
ClMjCTf2awmwJW3oW2msCRiGTxObNwtg2TbW+tLaFMyg0HvuRwXoOqU9nfLS
FI7ysFx+iwBbpRlkzRYz3J7bk143J8BS8mLK2UozyBvPuPY7eUP2oC7GVocL
2FUF+0Z7o6ioM39sHxeFhV43oi5547KIxrNp50L06zjzWr83HhlaHF1ka465
zvlBLouC5997/IPTzVHddbVXyadQ3lq9Qykzx/t22+d9sRQMXrxdwgGBYONo
3d5yCq+74dpeTODGigOHk3oolFpv1t9dQmByZe+sXy+FHb8HTE2cIdDw7Fj4
qucUumwi643PE2g20dFpklK4k3RibUwFAcrkjkTVT+H0GrmVfgMBodj0UPAw
Bf/MLIOfHxMYOLhvbq2CAmu4YHrmCYHxj5YRc2ruWHdOmt1FIPJRTlv7uPr/
q4b86z0EzFVxviFKCvbrZSzmAAGn2ZencicpaMvtNevkBHzNoq0+fKbQ7uY2
So2q86kCSdMXCqm53g9fjBFIK1ONps9S+LJxZ7qGQr0XNBzB+Uph9ETqgh2T
BIwOiio30YQoH8seVnwk8EuSRZ7uAiGCyKLmlE8EQpoUETI1S99WHar6rO7P
+IzFLRQiD9cD+bME7uqOSTwWCeF38q6bdI7A/ZzfrDU1hNB632EU9Y1A4SSj
pkfNbXzp5/l5Au4d2ValDCH+A7BzKcE=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{1, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& )},
  Epilog->InsetBox[
    FormBox[
    "\"\\!\\(\\*SuperscriptBox[\\(10\\), \\(15\\)]\\)\[TildeTilde]35\"", 
     TraditionalForm], {8, 35}],
  Frame->False,
  FrameTicks->{{{{0, 
       FormBox["1", TraditionalForm]}, {9.210340371976184, 
       FormBox[
        TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm]}, {18.420680743952367`, 
       FormBox[
        TemplateBox[{"10", "8"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm]}, {27.631021115928547`, 
       FormBox[
        TemplateBox[{"10", "12"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], TraditionalForm]}, {36.841361487904734`, 
       FormBox[
        TemplateBox[{"10", "16"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], TraditionalForm]}, {46.051701859880914`, 
       FormBox[
        TemplateBox[{"10", "20"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], TraditionalForm]}, {7.013915474810528, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {7.706612913964197, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.111928063310739, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.399535147948004, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.622633703874234, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.80492526261806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.959054514715692, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {9.092569836241674, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.22425584678671, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.91695328594038, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.322268435286922`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.609875519924188`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.832974075850416`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.015265634594243`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.169394886691876`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.302910208217856`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {25.434596218762895`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.127293657916564`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.532608807263106`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.82021589190037, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.0433144478266, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.225606006570427`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.37973525866806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.51325058019404, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {34.64493659073908, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.33763402989275, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.74294917923929, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.030556263876555`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.25365481980278, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.43594637854661, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.59007563064424, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.72359095217022, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {43.85527696271526, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.54797440186893, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.95328955121547, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.240896635852735`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.46399519177896, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.64628675052279, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.80041600262042, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.93393132414641, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}}, {{0, 
       FormBox["\"\"", TraditionalForm]}, {9.210340371976184, 
       FormBox["\"\"", TraditionalForm]}, {18.420680743952367`, 
       FormBox["\"\"", TraditionalForm]}, {27.631021115928547`, 
       FormBox["\"\"", TraditionalForm]}, {36.841361487904734`, 
       FormBox["\"\"", TraditionalForm]}, {46.051701859880914`, 
       FormBox["\"\"", TraditionalForm]}, {7.013915474810528, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {7.706612913964197, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.111928063310739, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.399535147948004, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.622633703874234, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.80492526261806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {8.959054514715692, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {9.092569836241674, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.22425584678671, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {16.91695328594038, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.322268435286922`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.609875519924188`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {17.832974075850416`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.015265634594243`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.169394886691876`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {18.302910208217856`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {25.434596218762895`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.127293657916564`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.532608807263106`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {26.82021589190037, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.0433144478266, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.225606006570427`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.37973525866806, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {27.51325058019404, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {34.64493659073908, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.33763402989275, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {35.74294917923929, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.030556263876555`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.25365481980278, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.43594637854661, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.59007563064424, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {36.72359095217022, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {43.85527696271526, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.54797440186893, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {44.95328955121547, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.240896635852735`, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.46399519177896, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.64628675052279, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.80041600262042, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}, {45.93393132414641, 
       FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
        Thickness[0.001]}}}}, {Automatic, Automatic}},
  GridLines->{None, None},
  Method->{},
  PlotRange->{{1, 10}, {0., 46.05170149253397}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, {{0, 
      FormBox["1", TraditionalForm]}, {9.210340371976184, 
      FormBox[
       TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox], 
       TraditionalForm]}, {18.420680743952367`, 
      FormBox[
       TemplateBox[{"10", "8"}, "Superscript", SyntaxForm -> SuperscriptBox], 
       TraditionalForm]}, {27.631021115928547`, 
      FormBox[
       TemplateBox[{"10", "12"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TraditionalForm]}, {36.841361487904734`, 
      FormBox[
       TemplateBox[{"10", "16"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TraditionalForm]}, {46.051701859880914`, 
      FormBox[
       TemplateBox[{"10", "20"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TraditionalForm]}, {7.013915474810528, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {7.706612913964197, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.111928063310739, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.399535147948004, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.622633703874234, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.80492526261806, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {8.959054514715692, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {9.092569836241674, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {16.22425584678671, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {16.91695328594038, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {17.322268435286922`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {17.609875519924188`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {17.832974075850416`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {18.015265634594243`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {18.169394886691876`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {18.302910208217856`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {25.434596218762895`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {26.127293657916564`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {26.532608807263106`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {26.82021589190037, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.0433144478266, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.225606006570427`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.37973525866806, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {27.51325058019404, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {34.64493659073908, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {35.33763402989275, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {35.74294917923929, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.030556263876555`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.25365481980278, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.43594637854661, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.59007563064424, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {36.72359095217022, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {43.85527696271526, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {44.54797440186893, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {44.95328955121547, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.240896635852735`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.46399519177896, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.64628675052279, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.80041600262042, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}, {45.93393132414641, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       Thickness[0.001]}}}}]], "Output",
 CellChangeTimes->{
  3.466955213231327*^9, {3.466955260000209*^9, 3.466955289453061*^9}, {
   3.4669569998712645`*^9, 3.4669570126476874`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Excercises", "Subsubsection",
 CellChangeTimes->{{3.4670928438086276`*^9, 3.46709284524383*^9}}],

Cell["\<\
Plot the following list of Points logarithmically: Table[Power10,i],{i,1,10}]\
\>", "Text",
 CellChangeTimes->{{3.467092855945449*^9, 3.467092888767907*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["Plot f(x)= sin(x)exp(x) from x=[0,100]", "Text",
 CellChangeTimes->{{3.4670929118559475`*^9, 3.4670929496236134`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["Use Show to combine two log-log Plots.", "Text",
 CellChangeTimes->{{3.467092958546829*^9, 3.4670929986856995`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Plotting a function of two variables", "Subsection",
 CellChangeTimes->{{3.4642849618254004`*^9, 3.4642849699997997`*^9}}],

Cell[TextData[{
 "Required Reading\n\n",
 ButtonBox["Density and Contour Plots",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DensityAndContourPlots"],
 "\n",
 ButtonBox["Parametric Plots",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/ParametricPlots"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.4642851956998*^9, 3.4642852102546*^9}, {
  3.4642853643982*^9, 3.4642853743666*^9}}],

Cell[TextData[{
 "An explicit function of two independent variables can be displayed using ",
 ButtonBox["Plot3D",
  BaseStyle->"RefGuideLink"],
 ".  The basic syntax is ",
 StyleBox["Plot3D[f,{x,xmin,xmax},{y,ymin,ymax}]", "InlineInput",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{3.4642849841638002`*^9, 3.4642850981373997`*^9}],

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Im", "[", 
    RowBox[{"ArcSin", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "+", 
        RowBox[{"I", " ", "y"}]}], ")"}], "^", "4"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "50"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Directive", "[", 
     RowBox[{"Pink", ",", 
      RowBox[{"Specularity", "[", 
       RowBox[{"White", ",", "50"}], "]"}], ",", 
      RowBox[{"Opacity", "[", "0.8", "]"}]}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.464285007907*^9, 3.4642850487946*^9}, {
  3.4642851312406*^9, 3.4642851314746*^9}}],

Cell["\<\
Contour or density plots often prove very useful in locating extrema, ridges, \
or other important features of functions of two or more dimensions.  These \
plots can also help in finding starting points for numerical solution of \
equations.\
\>", "Text",
 CellChangeTimes->{3.4642851731577997`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["DensityPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/DensityPlot"], "[", 
   StyleBox["f", "TI"], ",", "{", 
   StyleBox["x", "TI"], ",", 
   SubscriptBox[
    StyleBox["x", "TI"], 
    StyleBox["min", "TI"]], ",", 
   SubscriptBox[
    StyleBox["x", "TI"], 
    StyleBox["max", "TI"]], "}", ",", "{", 
   StyleBox["y", "TI"], ",", 
   SubscriptBox[
    StyleBox["y", "TI"], 
    StyleBox["min", "TI"]], ",", 
   SubscriptBox[
    StyleBox["y", "TI"], 
    StyleBox["max", "TI"]], "}", "]"}]]],
 " ",
 Cell[BoxData[Cell[TextData[{
   "make a density plot of ",
   Cell[BoxData[
    StyleBox["f", "TI"]], "InlineFormula"]
  }], "TableText"]]],
 "\n",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ContourPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ContourPlot"], "[", 
   RowBox[{
    StyleBox["f", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["x", "TI"], ",", 
      SubscriptBox[
       StyleBox["x", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["x", "TI"], 
       StyleBox["max", "TI"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["y", "TI"], ",", 
      SubscriptBox[
       StyleBox["y", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["y", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]]],
 " ",
 Cell[BoxData[Cell[TextData[{
   "make a contour plot of ",
   Cell[BoxData[
    StyleBox["f", "TI"]], "InlineFormula"],
   " as a function of ",
   Cell[BoxData[
    StyleBox["x", "TI"]], "InlineFormula"],
   " and ",
   Cell[BoxData[
    StyleBox["y", "TI"]], "InlineFormula"]
  }], "TableText"]]]
}], "Text",
 CellChangeTimes->{{3.4642852188190002`*^9, 3.4642852408306*^9}}],

Cell[BoxData[
 RowBox[{"DensityPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], " ", 
    RowBox[{"Sin", "[", "y", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"ColorData", "[", "\"\<SolarColors\>\"", "]"}]}]}], 
  "]"}]], "Input"],

Cell["\<\
Move with the mouse over the contours in the following contour plot. The \
default style is to add a tooltip to indicate the contour level.\
\>", "Text",
 CellChangeTimes->{{3.4642852772722*^9, 3.4642853035425997`*^9}}],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], " ", 
    RowBox[{"Sin", "[", "y", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], 
    RowBox[{"Sin", "[", "y", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"ContourLabels", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4642853348361998`*^9, 3.464285337769*^9}}],

Cell["\<\
A speciality is the ability ofg contour plot to plot implicit plots, \
\>", "Text",
 CellChangeTimes->{{3.464285476453*^9, 3.4642854879189997`*^9}}],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "2"}], "+", 
     RowBox[{"y", "^", "2"}]}], "\[Equal]", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], " ", 
     RowBox[{"Sin", "[", "y", "]"}]}], "\[Equal]", "0.2"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.464285548759*^9, 3.4642855744054003`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["ParametricPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ParametricPlot"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["x", "TI"]], ",", 
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["y", "TI"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["u", "TI"], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"],
 " ",
 "generates a parametric plot of a curve with ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 " coordinates ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["f", "TI"], 
   StyleBox["x", "TI"]]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["f", "TI"], 
   StyleBox["y", "TI"]]], "InlineFormula"],
 " as a function of ",
 Cell[BoxData[
  StyleBox["u", "TI"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.4642854034762*^9, 3.464285408281*^9}}],

Cell[CellGroupData[{

Cell["Excercises", "Subsubsection",
 CellChangeTimes->{{3.464285454535*^9, 3.4642854574678*^9}}],

Cell[TextData[{
 "Plot the curve described by the parametric equations ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "=", 
      RowBox[{"r", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"sin", "(", "t", ")"}]}], ")"}]}]}], ",", " ", 
     RowBox[{"y", "=", 
      RowBox[{"r", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"cos", "(", "t", ")"}]}], ")"}]}]}]}], "}"}], 
   TraditionalForm]]],
 " for the interval {t,-2\[Pi],2\[Pi]}."
}], "Text",
 CellChangeTimes->{3.4642854594802*^9},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Use ",
 StyleBox["Plot3D", "InlineInput"],
 " to draw the surface ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    RowBox[{"f", 
     RowBox[{"(", 
      RowBox[{"x", ",", "y"}], ")"}]}], "=", 
    RowBox[{
     RowBox[{"Exp", 
      RowBox[{"(", 
       RowBox[{"-", 
        SuperscriptBox["y", "2"]}], ")"}], "sin", 
      RowBox[{"(", "x", ")"}]}], "-", "1"}]}], "InlineInput"]]],
 " in the box region ",
 StyleBox["-2\[LessEqual]x\[LessEqual]2, -2\[LessEqual]y\[LessEqual]2.", 
  "InlineInput"],
 "Then use ",
 StyleBox["ContourPlot", "InlineInput"],
 " to display the surface contours. Use ",
 StyleBox["ContourPlot", "InlineInput"],
 " to you visualize the solution ",
 StyleBox["f(x,y)=-0.9", "InlineInput"],
 "?"
}], "Text",
 CellChangeTimes->{3.4668236051187506`*^9},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Special Plots", "Subsection",
 CellChangeTimes->{{3.4642835902752*^9, 3.4642835926308002`*^9}}],

Cell[TextData[{
 "Required Reading\n\n",
 ButtonBox["Some Special Plots",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/SomeSpecialPlots"]
}], "Text",
 CellChangeTimes->{{3.4642835943936*^9, 3.4642836103056*^9}}],

Cell[TextData[{
 "The Plot command is used to plot functions in the form y=f[x]. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " also understands parametrized formulation of functions. ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ParametricPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ParametricPlot"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["x", "TI"]], ",", 
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["y", "TI"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["u", "TI"], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"],
 " generates a parametric plot of a curve with ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 " coordinates ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["f", "TI"], 
   StyleBox["x", "TI"]]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["f", "TI"], 
   StyleBox["y", "TI"]]], "InlineFormula"],
 " as a function of ",
 Cell[BoxData[
  StyleBox["u", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.46694545901066*^9, 3.466945512877555*^9}}],

Cell["This is the parameter form of a circle:", "Text",
 CellChangeTimes->{{3.466945558492035*^9, 3.4669455643888454`*^9}}],

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "t", "]"}], ",", 
     RowBox[{"Sin", "[", "t", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4669455418780055`*^9, 3.4669455549664288`*^9}}],

Cell["Another plot with a more random appearance", "Text",
 CellChangeTimes->{{3.4669627948530335`*^9, 3.4669628068962545`*^9}}],

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"Evaluate", " ", "@", " ", "\n", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"i", " ", "+", " ", "j"}], "]"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"i", " ", "t"}], " ", "+", " ", 
           RowBox[{"Pi", " ", 
            RowBox[{"Sin", "[", "i", "]"}]}]}], "]"}]}], ",", " ", "\n", 
        "          ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "17"}], "}"}]}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"j", ",", " ", "1", ",", " ", "2"}], "}"}]}], "]"}]}], ",", 
   " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", 
     RowBox[{"2", " ", "Pi"}]}], "}"}], ",", " ", "\n", "   ", 
   RowBox[{"PlotRange", " ", "->", " ", "All"}], ",", " ", 
   RowBox[{"Frame", " ", "->", " ", "True"}], ",", " ", 
   RowBox[{"PlotPoints", " ", "->", " ", "5000"}], ",", "\n", "   ", 
   RowBox[{"Axes", " ", "->", " ", "False"}], ",", " ", 
   RowBox[{"AspectRatio", " ", "->", " ", "Automatic"}]}], "]"}]], "Input"],

Cell["Plot multiple functions", "Text",
 CellChangeTimes->{{3.4669456524198*^9, 3.4669456592058115`*^9}}],

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Sin", "[", "u", "]"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "u"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], 
        RowBox[{"Cos", "[", "u", "]"}]}], ",", 
       RowBox[{
        RowBox[{"1", "/", "2"}], 
        RowBox[{"Sin", "[", "u", "]"}]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.46694562986216*^9, 3.4669456477241917`*^9}}],

Cell[TextData[{
 "An interesting feature is the capability to plot parametric regions: ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ParametricPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ParametricPlot"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["x", "TI"]], ",", 
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["y", "TI"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["u", "TI"], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["max", "TI"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["v", "TI"], ",", 
      SubscriptBox[
       StyleBox["v", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["v", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"]
}], "Text",
 CellChangeTimes->{{3.466945603685314*^9, 3.466945618037339*^9}}],

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r", " ", 
      RowBox[{"Cos", "[", "t", "]"}]}], ",", 
     RowBox[{"r", " ", 
      RowBox[{"Sin", "[", "t", "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "0.5", ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.466945669065029*^9, 3.4669456950078745`*^9}}],

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", "\n", "     ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{"Cos", "[", "\[Sigma]", "]"}], "]"}], " ", "-", " ", 
       RowBox[{"2", 
        RowBox[{"Cos", "[", 
         RowBox[{"4", " ", "\[Sigma]"}], "]"}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"\[Sigma]", "/", "12"}], "]"}], "^", "5"}]}], ")"}], " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "\[Sigma]", "]"}], ",", " ", 
       RowBox[{"Sin", "[", "\[Sigma]", "]"}]}], "}"}]}], "]"}], ",", "\n", 
   "     ", 
   RowBox[{"{", 
    RowBox[{"\[Sigma]", ",", " ", "0", ",", " ", 
     RowBox[{"2", "Pi"}]}], "}"}], ",", " ", 
   RowBox[{"AspectRatio", " ", "->", " ", "Automatic"}], ",", " ", 
   RowBox[{"Axes", " ", "->", " ", "None"}]}], "]"}]], "Input",
 CellChangeTimes->{3.4670907355036983`*^9}],

Cell["\<\
Remember our function to replace points with scaled and rotated rectangles? \
ParametricPlot also produces a list of points to be connected with lines, \
hence:\
\>", "Text",
 CellChangeTimes->{{3.466945758952387*^9, 3.4669458099956765`*^9}}],

Cell[BoxData[
 RowBox[{"convertToRectangles", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.4669451973514004`*^9, 3.4669452002062054`*^9}, 
   3.4670907387173033`*^9}],

Cell[TextData[{
 "The 3-dim counterpart is of course ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ParametricPlot3D",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ParametricPlot3D"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["x", "TI"]], ",", 
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["y", "TI"]], ",", 
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["z", "TI"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["u", "TI"], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["u", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.466945943594311*^9, 3.4669459666355515`*^9}}],

Cell[BoxData[
 RowBox[{"pl", "=", 
  RowBox[{"ParametricPlot3D", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"2", "+", 
         RowBox[{"Cos", "[", 
          RowBox[{"8", "u"}], "]"}]}], ")"}], 
       RowBox[{"Cos", "[", "u", "]"}]}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"2", "+", 
         RowBox[{"Cos", "[", 
          RowBox[{"8", "u"}], "]"}]}], ")"}], 
       RowBox[{"Sin", "[", "u", "]"}]}], ",", 
      RowBox[{"Sin", "[", 
       RowBox[{"8", "u"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"u", ",", "0", ",", 
      RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.466945906263446*^9, 3.4669459331110926`*^9}, 
   3.466947121550785*^9}],

Cell["convertToRectangles ??", "Text",
 CellChangeTimes->{{3.4669459783511724`*^9, 3.466946007008423*^9}}],

Cell["\<\
In 3-dim a rectangle becomes a cuboid. The upgrade of our playground routine \
is more or less straight forward. We omitted the rotation part and used \
oppacity to make the inner 2 cuboids visible. However, this makes the \
rendering quite slow.\
\>", "Text",
 CellChangeTimes->{{3.466946016228039*^9, 3.466946047428094*^9}, {
  3.466947079087511*^9, 3.4669471098039646`*^9}, {3.466947192044509*^9, 
  3.466947199236122*^9}}],

Cell[BoxData[{
 RowBox[{"Remove", "[", "convertToCuboids", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"convertToCuboids", "[", "plot_", "]"}], ":=", 
  RowBox[{"Graphics3D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Opacity", "[", 
            RowBox[{"1", "/", "j"}], "]"}], ",", 
           RowBox[{"Hue", "[", 
            RowBox[{
             FractionBox["i", 
              RowBox[{" ", 
               RowBox[{"Length", "@", "#"}]}]], "j"}], "]"}], ",", 
           RowBox[{"Scale", "[", 
            RowBox[{
             RowBox[{"Cuboid", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "j"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "3", ",", "1", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "@", "#"}]}], "}"}]}], "]"}], "&"}], "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"plot", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "3", ",", "2", ",", "1"}], "]"}], "]"}], 
      ",", "2", ",", "1"}], "]"}], "]"}], "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{"convertToCuboids", "[", "pl", "]"}]], "Input"],

Cell[TextData[{
 "Another example from the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Guide Books:"
}], "Text",
 CellChangeTimes->{{3.4670093653385873`*^9, 3.467009374901404*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", " ", "=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2", " ", "+", " ", 
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"u", "/", "2"}], "]"}], " ", 
       RowBox[{"Sin", "[", "t", "]"}]}], " ", "-", " ", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"u", "/", "2"}], "]"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "t"}], "]"}]}]}], ")"}], " ", 
    RowBox[{"Cos", "[", "u", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"g", " ", "=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2", " ", "+", " ", 
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"u", "/", "2"}], "]"}], " ", 
       RowBox[{"Sin", "[", "t", "]"}]}], " ", "-", " ", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"u", "/", "2"}], "]"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "t"}], "]"}]}]}], ")"}], " ", 
    RowBox[{"Sin", "[", "u", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"h", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"u", "/", "2"}], "]"}], " ", 
      RowBox[{"Sin", "[", "t", "]"}]}], " ", "+", " ", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"u", "/", "2"}], "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2", "t"}], "]"}]}]}]}], ";"}], "\n"}], "\n", 
 RowBox[{"ParametricPlot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"f", ",", " ", "g", ",", " ", "h"}], "}"}], ",", "\n", 
   "                 ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", 
     RowBox[{"2", "Pi"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"u", ",", " ", "0", ",", " ", 
     RowBox[{"2", "Pi"}]}], "}"}], ",", 
   RowBox[{"ColorFunction", "->", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y", ",", "z", ",", "u", ",", "t"}], "}"}], ",", 
      RowBox[{"Hue", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"t", " ", "+", " ", "u"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"4", "Pi"}], ")"}]}], "]"}]}], "]"}]}], ",", 
   RowBox[{"Boxed", " ", "->", " ", "False"}], ",", 
   RowBox[{"Axes", " ", "->", " ", "None"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Remove", "[", 
  RowBox[{"f", ",", "g", ",", "h", ",", "pl"}], "]"}]}], "Input",
 CellChangeTimes->{{3.467009286137248*^9, 3.4670093459789534`*^9}, {
  3.4670093886294284`*^9, 3.467009392326635*^9}, {3.467090757062936*^9, 
  3.4670907574061365`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["PolarPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/PolarPlot"], "[", 
   RowBox[{
    StyleBox["r", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["\[Theta]", "TR"], ",", 
      SubscriptBox[
       StyleBox["\[Theta]", "TR"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["\[Theta]", "TR"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"],
 "  ",
 "generates a polar plot of a curve with radius ",
 Cell[BoxData[
  StyleBox["r", "TI"]], "InlineFormula"],
 " as a function of angle ",
 Cell[BoxData[
  StyleBox["\[Theta]", "TR"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.4642838776584*^9, 3.4642838854116*^9}}],

Cell[BoxData[
 RowBox[{"PolarPlot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"Pi", " ", 
     SuperscriptBox["t", "2"]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "Pi"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4642838945688*^9, 3.4642839447852*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["ListPolarPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ListPolarPlot"], "[", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox[
      StyleBox["r", "TI"], 
      StyleBox["1", "TR"]], ",", 
     SubscriptBox[
      StyleBox["r", "TI"], 
      StyleBox["2", "TR"]], ",", 
     StyleBox["\[Ellipsis]", "TR"]}], "}"}], "]"}]], "InlineFormula"],
 " ",
 "plots points equally spaced in angle at radii ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["r", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.4673640068701057`*^9, 3.4673640082273083`*^9}, {
  3.467364041377366*^9, 3.4673640501289816`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"butterfly", "[", "\[Lambda]_", "]"}], "[", 
   RowBox[{"p_", ",", "o___"}], "]"}], ":=", 
  RowBox[{"ListPolarPlot", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Exp", "[", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}], "]"}], "-", 
           RowBox[{"2", 
            RowBox[{"Cos", "[", 
             RowBox[{"4", "\[Theta]"}], "]"}]}]}], ")"}], 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"\[Lambda]", " ", "\[Theta]"}], "]"}], "^", "4"}]}]}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", 
        RowBox[{"2", "Pi"}], ",", "p"}], "}"}]}], "]"}], ",", "o", ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"PointSize", "[", "Tiny", "]"}]}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"butterfly", "[", "99999999", "]"}], "[", "0.00055", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"butterfly", "[", "99999999", "]"}], "[", "0.0005", "]"}]], "Input"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["SphericalPlot3D",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/SphericalPlot3D"], "[", 
   RowBox[{
    StyleBox["r", "TI"], ",", 
    StyleBox["\[Theta]", "TR"], ",", 
    StyleBox["\[Phi]", "TR"]}], "]"}]], "InlineFormula"],
 "generates a 3D plot with a spherical radius ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]], "InlineMath"],
 " as a function of spherical coordinates ",
 Cell[BoxData[
  FormBox["\[Theta]", TraditionalForm]], "InlineMath"],
 " and ",
 Cell[BoxData[
  FormBox["\[Phi]", TraditionalForm]], "InlineMath"],
 ".  "
}], "Text",
 CellChangeTimes->{{3.4642842216071997`*^9, 3.4642842338375998`*^9}}],

Cell[BoxData[
 RowBox[{"SphericalPlot3D", "[", 
  RowBox[{
   RowBox[{"\[Phi]", "+", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"7", "\[Theta]"}], "]"}]}], ",", "\[Theta]", ",", "\[Phi]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4642842717455997`*^9, 3.4642843259868*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["SphericalPlot3D",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/SphericalPlot3D"], "[", 
   RowBox[{
    StyleBox["r", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["\[Theta]", "TR"], ",", 
      SubscriptBox[
       StyleBox["\[Theta]", "TR"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["\[Theta]", "TR"], 
       StyleBox["max", "TI"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["\[Phi]", "TR"], ",", 
      SubscriptBox[
       StyleBox["\[Phi]", "TR"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["\[Phi]", "TR"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]]],
 " ",
 "generates a 3D spherical plot over the specifed ranges of spherical \
coordinates."
}], "Text",
 CellChangeTimes->{{3.4642843537860003`*^9, 3.4642843608996*^9}}],

Cell[BoxData[
 RowBox[{"SphericalPlot3D", "[", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "Pi"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", "0", ",", 
     RowBox[{
      RowBox[{"3", "/", "2"}], "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4642843908048*^9, 3.4642844070132*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["RevolutionPlot3D",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/RevolutionPlot3D"], "[", 
   RowBox[{
    SubscriptBox[
     StyleBox["f", "TI"], 
     StyleBox["z", "TI"]], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["t", "TI"], ",", 
      SubscriptBox[
       StyleBox["t", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["t", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"],
 "  generates a plot of the surface of revolution with height ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["f", "TI"], 
   StyleBox["z", "TI"]]], "InlineFormula"],
 " at radius ",
 Cell[BoxData[
  StyleBox["t", "TI"]], "InlineFormula"],
 ". ",
 "Revolve a function curve around the ",
 Cell[BoxData[
  FormBox["z", TraditionalForm]], "InlineMath"],
 " axis: "
}], "Text",
 CellChangeTimes->{{3.4642844591015997`*^9, 3.4642844711136*^9}}],

Cell[BoxData[
 RowBox[{"RevolutionPlot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"t", "^", "3"}], "-", 
    RowBox[{"t", "^", "2"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.4642844782427998`*^9}],

Cell["Here is a nice example of what can be done with it:", "Text",
 CellChangeTimes->{{3.4642845351984*^9, 3.4642845473508*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"RevolutionPlot3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Sin", "[", "t", "]"}], "+", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"5", "t"}], "]"}], "/", "10"}]}], ",", 
       RowBox[{
        RowBox[{"Cos", "[", "t", "]"}], "+", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"5", "t"}], "]"}], "/", "10"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "Pi"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"RevolutionPlot3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Sin", "[", "t", "]"}], "+", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"5", "t"}], "]"}], "/", "10"}]}], ",", 
       RowBox[{
        RowBox[{"Cos", "[", "t", "]"}], "+", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"5", "t"}], "]"}], "/", "10"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "Pi"}], "}"}], ",", 
     RowBox[{"RegionFunction", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "t", ",", "\[Theta]", ",", "r"}], 
         "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"8", "t"}], "]"}], 
          RowBox[{"Sin", "[", 
           RowBox[{"8", "\[Theta]"}], "]"}]}], ">", "0.1"}]}], "]"}]}], ",", 
     RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"FaceForm", "[", 
       RowBox[{"Red", ",", "Cyan"}], "]"}]}], ",", 
     RowBox[{"PlotPoints", "\[Rule]", "35"}], ",", 
     RowBox[{"BoundaryStyle", "\[Rule]", "Black"}]}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.4642845500184*^9, 3.4642845704076*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["DateListPlot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/DateListPlot"], "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox[
        StyleBox["date", "TI"], 
        StyleBox["1", "TR"]], ",", 
       SubscriptBox[
        StyleBox["v", "TI"], 
        StyleBox["1", "TR"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox[
        StyleBox["date", "TI"], 
        StyleBox["2", "TR"]], ",", 
       SubscriptBox[
        StyleBox["v", "TI"], 
        StyleBox["2", "TR"]]}], "}"}], ",", 
     StyleBox["\[Ellipsis]", "TR"]}], "}"}], "]"}]]],
 "plots points with values ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["v", "i"], TraditionalForm]], "InlineMath"],
 " at a sequence of dates."
}], "Text",
 CellChangeTimes->{{3.4670930743302326`*^9, 3.4670930891190586`*^9}}],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2006", ",", "10", ",", "1"}], "}"}], ",", "10"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2006", ",", "10", ",", "15"}], "}"}], ",", "12"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2006", ",", "10", ",", "30"}], "}"}], ",", "15"}], "}"}], ",",
     " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2006", ",", "11", ",", "20"}], "}"}], ",", "20"}], "}"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{3.4670931011934795`*^9}],

Cell["Example :Retrieve and plot a historical stock price:", "Text",
 CellChangeTimes->{{3.4670931126282997`*^9, 3.4670931187279105`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"FinancialData", "[", 
   RowBox[{"\"\<DAX\>\"", ",", "\"\<Jan. 1, 2004\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.467093147431961*^9, 3.4670931585391808`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
9Tnz3yiBFW+fc/6GCKyu+YLj3Suwrs8Lfv93XmC54QXjC9dVr14wX8eBf7WX
1AfXDb2sOAz8F7xkvAYLrHnxkv1BvMB62yLrfhL4dy9if4nPS+cVsV5Hg7+2
iOujIoGNlV7Rv88FlnR9xX7gDfjPfoXxd6seL/jvfsX31RBYe+YV/dhCYKXq
NfvV/gJrPF9zvThIYH3ca+aPMQKbHr5m/yQTWD3tDedniMC67W/YDzoJbDz9
hv33PoElBW+4vvASWP7vW+4P6gQ2bH3LfidIYHPUW/aDqwWW3X3LfH0Y/Eu9
o95h4N/qHdcXzgJLT71jvHkKrLj1jvkP/NSS9/RjVfBv/p56dAJ/p/fMZ8/g
hxvv6den8MPv99bva+GHpma+vz34jzazHp4C/w1m5sPKCULfH2b2O3YCmxp/
oP7NBZaO+kC9pgusWPeB820rsDrkA/NxbYElDT/y+6KGAsuHf+T6spnAqtUf
2b/hulb3kfPlIrAh6yPX7wMEVg4pZn+wQWDNimLG0xbwP1LM/Zut4J9ZzPx5
BPw/FjMeQwTWqT+x3gcJbAz4xPVXBPinf2K/8xz8339ifXoM/rU/M7++E9js
95l61T0j9E3h9XKh4P/mM+f3FfjX+ML+zQ/8FV+YvyZB34tf+H5X6Fv0xfr9
H/hX/cr1uCP49/zK+jsH/Bd8pd6noO/zr/TbI+gr/cbxkH+3b9SnHPjP/cbx
lRVY6c37Z/6AvhW/83olcV3a5TvzVU2BFbO+c/+opcBqL1636y6wLuE7+5lx
Ass7/mA81xJYNeMH1wMlBdbu/EE/1RHYEPsD/ZRcJbD5wQ/m6zECa6b+ZH7Z
IbB+20/mTzeBTfqfrE+7wf/+T67PvMG/9C/qpxDYuOUX/bZCYEnUL/qzGvjf
+UW/VQT/kr/Z79aHfjd/M39BL83f38y3C8HP8Q/nNxr8xv5hPr8K/a7/YTxf
hH6//rAfTQY/h7+Mv/vgN/ov+6dY8Fv/l/lqHfRqJCnC+jIE8z3SgsV+gxJ8
11qwyId+4Btsvf8x9GpQogj59j30GmbBIh/9At9VFiz88hx8j1qvh4HvFQsW
47WDXoNLAtsgvrTLLRj7UfDr4ZL8fDX4NaMk+Nkif8g+8PODkF/0LqWK0I+c
QL3wJ3ZrjXyQVgr8u91APn5nwSLehiLeav1ThPg6jHjys2CRf9cjH1yyYNGP
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
DH/PzWe/+hb+9s7n8+En49l88rFPUPwPh046FA==
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  AxesOrigin->NCache[{3281990400, 4000.}, {3.2819904*^9, 4000.}],
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {{{
       NCache[3281904000, 3.281904*^9], 
       FormBox["\"2004\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3313526400, 3.3135264*^9], 
       FormBox["\"2005\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3345062400, 3.3450624*^9], 
       FormBox["\"2006\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3376598400, 3.3765984*^9], 
       FormBox["\"2007\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3408134400, 3.4081344*^9], 
       FormBox["\"2008\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3439756800, 3.4397568*^9], 
       FormBox["\"2009\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3289766400, 3.2897664*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3297628800, 3.2976288*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3305577600, 3.3055776*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3321302400, 3.3213024*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3329164800, 3.3291648*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3337113600, 3.3371136*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3352838400, 3.3528384*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3360700800, 3.3607008*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3368649600, 3.3686496*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3384374400, 3.3843744*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3392236800, 3.3922368*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3400185600, 3.4001856*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3415996800, 3.4159968*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3423859200, 3.4238592*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3431808000, 3.431808*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3447532800, 3.4475328*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3455395200, 3.4553952*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3463344000, 3.463344*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}}, {{
       NCache[3281904000, 3.281904*^9], 
       FormBox["\"\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3313526400, 3.3135264*^9], 
       FormBox["\"\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3345062400, 3.3450624*^9], 
       FormBox["\"\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3376598400, 3.3765984*^9], 
       FormBox["\"\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3408134400, 3.4081344*^9], 
       FormBox["\"\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3439756800, 3.4397568*^9], 
       FormBox["\"\"", TraditionalForm], {0.020601132958329826`, 0}}, {
       NCache[3289766400, 3.2897664*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3297628800, 3.2976288*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3305577600, 3.3055776*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3321302400, 3.3213024*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3329164800, 3.3291648*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3337113600, 3.3371136*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3352838400, 3.3528384*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3360700800, 3.3607008*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3368649600, 3.3686496*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3384374400, 3.3843744*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3392236800, 3.3922368*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3400185600, 3.4001856*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3415996800, 3.4159968*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3423859200, 3.4238592*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3431808000, 3.431808*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3447532800, 3.4475328*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3455395200, 3.4553952*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}, {
       NCache[3463344000, 3.463344*^9], 
       FormBox["\"\"", TraditionalForm], {0.012360679774997897`, 0}}}}},
  GridLines->NCache[{{{3281904000, 
       GrayLevel[0.8]}, {3313526400, 
       GrayLevel[0.8]}, {3345062400, 
       GrayLevel[0.8]}, {3376598400, 
       GrayLevel[0.8]}, {3408134400, 
       GrayLevel[0.8]}, {3439756800, 
       GrayLevel[0.8]}}, None}, {{{3.281904*^9, 
       GrayLevel[0.8]}, {3.3135264*^9, 
       GrayLevel[0.8]}, {3.3450624*^9, 
       GrayLevel[0.8]}, {3.3765984*^9, 
       GrayLevel[0.8]}, {3.4081344*^9, 
       GrayLevel[0.8]}, {3.4397568*^9, 
       GrayLevel[0.8]}}, None}],
  PlotRange->{{3.2819904*^9, 3.4669728*^9}, {3646.99, 8105.69}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->None]], "Output",
 CellChangeTimes->{{3.467093141581951*^9, 3.4670931605515842`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Excercises", "Subsubsection",
 CellChangeTimes->{{3.4642839920532*^9, 3.4642839935976*^9}}],

Cell[TextData[{
 "Plot a Logarithmic spirals of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{"a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"b", " ", "\[Theta]"}]]}]}], TraditionalForm]], "InlineMath"]
}], "Text",
 CellChangeTimes->{{3.4642839973416*^9, 3.4642840029264*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Plot a ",
 "four-leaved rose, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox["cos", "2"], "\[Theta]"}], "-", 
     RowBox[{
      SuperscriptBox["sin", "2"], "\[Theta]"}]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.4642840161864*^9, 3.4642840207728*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Plot a cardoid ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", " ", "=", " ", 
    RowBox[{"1", " ", "+", " ", 
     RowBox[{"sin", "\[VeryThinSpace]", "\[Theta]"}]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.4642840273403997`*^9, 3.4642840405067997`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Plot a ",
 "lima\[CCedilla]on, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     FractionBox["1", "2"], "+", " ", "cos\[Theta]"}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.464284049274*^9, 3.4642840541724*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Labeling your plots", "Subsection",
 CellChangeTimes->{{3.4673632035402803`*^9, 3.4673632058178844`*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{
     RowBox[{"Annotating", " ", "&"}], " ", "Combining", " ", "Graphics"}],
    BaseStyle->"Link",
    ButtonData->"paclet:guide/AnnotatingAndCombiningGraphics"], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.4673636498570642`*^9, 3.4673636781243143`*^9}}],

Cell[TextData[{
 "Especially when plotting multiple functions or datasets in a single graph \
it is important to clearly label each function or data set. One way to do so \
is to use text labels in the plot. We can use the ",
 ButtonBox["Epilog",
  BaseStyle->"Link",
  ButtonData->"paclet:ref7Epilog"],
 " option to do so:"
}], "Text",
 CellChangeTimes->{{3.467363211901895*^9, 3.467363292023636*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"20", 
      RowBox[{"Exp", "[", 
       RowBox[{".01", " ", "t"}], "]"}]}], ",", " ", 
     RowBox[{"12", 
      RowBox[{"Exp", "[", 
       RowBox[{".03", " ", "t"}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "40"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Text", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Factory A\>\"", ",", " ", 
          RowBox[{"FontSize", "\[Rule]", "18"}]}], "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{"now", " ", "the", " ", "coordinates"}], " ", "*)"}], 
        RowBox[{"{", 
         RowBox[{"5", ",", "25"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<Factory B\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "10"}], "}"}]}], "]"}]}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.4673632959236426`*^9, 3.4673634038914323`*^9}}],

Cell[TextData[{
 "Alternatively you can use the function ",
 ButtonBox["Tooltip",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tooltip"],
 " to provide \"mouseover\" labels. These are labels that will appear only \
when the mouse is moved over a certain feature. Example:"
}], "Text",
 CellChangeTimes->{{3.467363418009457*^9, 3.4673634878507795`*^9}}],

Cell[BoxData[
 RowBox[{"Tooltip", "[", 
  RowBox[{
   RowBox[{"x", "+", "y"}], ",", "\"\<label\>\""}], "]"}]], "Input"],

Cell["Our plot may be labels accordingly:", "Text",
 CellChangeTimes->{{3.4673634944339914`*^9, 3.467363507288414*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Tooltip", "[", 
       RowBox[{
        RowBox[{"20", 
         RowBox[{"Exp", "[", 
          RowBox[{".01", " ", "t"}], "]"}]}], ",", "\"\<Factory A\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Tooltip", "[", 
       RowBox[{
        RowBox[{"12", 
         RowBox[{"Exp", "[", 
          RowBox[{".03", " ", "t"}], "]"}]}], ",", "\"\<Factory B\>\""}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "40"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AxesOrigin", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "move", " ", "the", " ", "mouse", " ", "over", " ", "the", " ", "curves"}],
    " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.467363519955636*^9, 3.4673636028853817`*^9}}],

Cell[TextData[{
 "This is especially nice for ",
 ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"],
 ". You can use it to distinguish between datasets:"
}], "Text",
 CellChangeTimes->{{3.467363700307553*^9, 3.467363710525571*^9}, {
  3.467363823360569*^9, 3.4673638478370123`*^9}, {3.467363885433078*^9, 
  3.467363885433078*^9}}],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Tooltip", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"3", "/", "2"}], ")"}], "^", 
        RowBox[{"Range", "[", "15", "]"}]}], ",", 
       RowBox[{"TraditionalForm", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"3", "/", "2"}], ")"}], "^", "k"}], "]"}]}], "]"}], ",", 
     RowBox[{"Tooltip", "[", 
      RowBox[{
       RowBox[{"Fibonacci", "[", 
        RowBox[{"Range", "[", "15", "]"}], "]"}], ",", 
       RowBox[{"TraditionalForm", "[", 
        RowBox[{"Fibonacci", "[", "k", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", "Medium", "]"}]}]}], "]"}]], "Input"],

Cell[TextData[{
 "Or you can use ",
 Cell[BoxData[
  FormBox[
   ButtonBox["Tooltip",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Tooltip"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ButtonBox[" ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"],
 "to indicate the value of individual datapoints:"
}], "Text",
 CellChangeTimes->{{3.4673638556526256`*^9, 3.467363920991955*^9}}],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Tooltip", "[", 
     RowBox[{"Prime", "[", "i", "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "10"}], "}"}]}], "]"}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell["Excercise", "Subsubsection",
 CellChangeTimes->{{3.4680001378641653`*^9, 3.4680001393461676`*^9}}],

Cell["\<\
Plot a random list of 10 integers between 1 and 100 and use tooltip to give \
the binary form of the numbers when moving the mouse over the data points \
\>", "Text",
 CellChangeTimes->{{3.468000240481145*^9, 3.468000289246831*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Plots with Legend", "Subsection",
 CellChangeTimes->{{3.4642856406118*^9, 3.464285644855*^9}, {
  3.4673631719034247`*^9, 3.467363199265873*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input"],

Cell[TextData[{
 "Required Reading\n\n",
 ButtonBox["Plot Legends Package",
  BaseStyle->"Link",
  ButtonData->"paclet:PlotLegends/guide/PlotLegendsPackage"],
 "\n\n"
}], "Text",
 CellChangeTimes->{{3.4642856838862*^9, 3.4642857033238*^9}}],

Cell[TextData[{
 "To include plot legends, you need to load an additional package. But even \
then, the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s legend capabilities are lacking."
}], "Text",
 CellChangeTimes->{{3.4642858255966*^9, 3.4642858724746*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", 
     RowBox[{"Cos", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "\[Pi]"}], ",", 
     RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sine\>\"", ",", "\"\<Cosine\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4642859342974*^9, 3.4642859593822002`*^9}}],

Cell["\<\
We can change thy style somewhat:
\
\>", "Text",
 CellChangeTimes->{{3.4642859011162*^9, 3.4642859178082*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", 
     RowBox[{"Cos", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "\[Pi]"}], ",", 
     RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sine\>\"", ",", "\"\<Cosine\>\""}], "}"}]}], ",", 
   RowBox[{"LegendShadow", "->", "None"}], ",", " ", 
   RowBox[{"LegendSize", "\[Rule]", "0.5"}], ",", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.2", ",", "0"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4642859342974*^9, 3.4642860156046*^9}, {
  3.4642860635902*^9, 3.4642860670066*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", 
     RowBox[{"Cos", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "\[Pi]"}], ",", 
     RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Directive", "[", 
       RowBox[{"Purple", ",", "Thick"}], "]"}], ",", 
      RowBox[{"Directive", "[", 
       RowBox[{"Thick", ",", "Orange", ",", 
        RowBox[{"Dashing", "[", 
         RowBox[{"{", ".03", "}"}], "]"}]}], "]"}]}], "}"}]}], ",", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<sin\>\"", ",", "\"\<cos\>\""}], "}"}]}], ",", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{".5", ",", 
      RowBox[{"-", ".8"}]}], "}"}]}], ",", 
   RowBox[{"LegendTextSpace", "\[Rule]", "0.5"}], ",", 
   RowBox[{"LegendLabel", "\[Rule]", 
    RowBox[{"Style", "[", 
     RowBox[{"\"\<Trig Funcs\>\"", ",", "14"}], "]"}]}], ",", 
   RowBox[{"LegendLabelSpace", "\[Rule]", ".5"}], ",", 
   RowBox[{"LegendOrientation", "\[Rule]", "Vertical"}], ",", 
   RowBox[{"LegendBackground", "\[Rule]", "LightPurple"}], ",", 
   RowBox[{"LegendShadow", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{".02", ",", 
      RowBox[{"-", ".02"}]}], "}"}]}], ",", 
   RowBox[{"Background", "\[Rule]", "LightOrange"}], ",", 
   RowBox[{"LegendSize", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.5", ",", "0.5"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4642859342974*^9, 3.4642860156046*^9}, {
  3.4642860635902*^9, 3.4642860906717997`*^9}, {3.4642861245394*^9, 
  3.4642861560982*^9}}],

Cell[TextData[{
 "The second way of placing a legend in a graphic is to use ",
 Cell[BoxData[
  ButtonBox["ShowLegend",
   BaseStyle->"Link",
   ButtonData->"paclet:PlotLegends/ref/ShowLegend"]], "InlineFormula"],
 ". With ",
 Cell[BoxData[
  ButtonBox["ShowLegend",
   BaseStyle->"Link",
   ButtonData->"paclet:PlotLegends/ref/ShowLegend"]], "InlineFormula"],
 " you specify the graphic and legend as arguments. "
}], "Text",
 CellChangeTimes->{{3.464286236329*^9, 3.4642862503534*^9}, {
  3.464286297325*^9, 3.4642862994466*^9}}],

Cell[BoxData[
 RowBox[{"ShowLegend", "[", 
  RowBox[{
   RowBox[{"DensityPlot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"x", " ", "y"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "\[Pi]"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"ColorData", "[", "\"\<LakeColors\>\"", "]"}], "[", 
       RowBox[{"1", "-", "#1"}], "]"}], "&"}], ",", "10", ",", "\"\< 1\>\"", 
     ",", "\"\<-1\>\"", ",", 
     RowBox[{"LegendPosition", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1.1", ",", 
        RowBox[{"-", "0.4"}]}], "}"}]}]}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"ShowLegend", "[", 
  RowBox[{
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"x", " ", "y"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
     RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], "[", 
       RowBox[{"1", "-", "#1"}], "]"}], "&"}], ",", "10", ",", "\"\< 1\>\"", 
     ",", "\"\<-1\>\"", ",", 
     RowBox[{"LegendPosition", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1.1", ",", 
        RowBox[{"-", "0.4"}]}], "}"}]}]}], "}"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell["Custom Legend 1", "Subsubsection",
 CellChangeTimes->{{3.4649713009966*^9, 3.4649713033054*^9}}],

Cell["It is also possible to construct your own legends:", "Text",
 CellChangeTimes->{{3.4642863429082003`*^9, 3.4642863540934*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", "legendPlot", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"legendPlot", "[", 
   RowBox[{"xl_List", ",", "d_", ",", "args___"}], "]"}], ":=", 
  RowBox[{"Plot", "[", 
   RowBox[{"xl", ",", "d", ",", 
    RowBox[{"Epilog", "\[Rule]", 
     RowBox[{"Inset", "[", 
      RowBox[{
       RowBox[{"Panel", "[", 
        RowBox[{"Grid", "[", 
         RowBox[{"MapIndexed", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Graphics", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ColorData", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"First", "@", "#2"}]}], "]"}], ",", "Thick", ",", 
                  RowBox[{"Line", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}], 
                ",", 
                RowBox[{"AspectRatio", "\[Rule]", ".1"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "20"}]}], "]"}], ",", "#1"}], 
             "}"}], "&"}], ",", "xl"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"Offset", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", 
           RowBox[{"-", "2"}]}], "}"}], ",", 
         RowBox[{"Scaled", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"Right", ",", "Top"}], "}"}]}], "]"}]}], ",", "args"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.4649713272826*^9, 3.4649713340998*^9}}],

Cell[BoxData[
 RowBox[{"legendPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", 
     RowBox[{"Cos", "[", "x", "]"}], ",", 
     RowBox[{"Sinc", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Custom Legend 2", "Subsubsection",
 CellChangeTimes->{{3.4649713080165997`*^9, 3.4649713110118*^9}}],

Cell["Another way to create custom legends is here", "Text",
 CellChangeTimes->{{3.464971275553*^9, 3.464971286005*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "legend", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"legend", "[", 
    RowBox[{"list_", ",", "pos_"}], "]"}], ":=", 
   RowBox[{"Inset", "[", 
    RowBox[{
     RowBox[{"Panel", "[", 
      RowBox[{"Grid", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Graphics", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ColorData", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"First", "@", "#2"}]}], "]"}], ",", "Thick", ",", 
                RowBox[{"Line", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}], 
              ",", 
              RowBox[{"AspectRatio", "\[Rule]", ".1"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "20"}]}], "]"}], ",", "#1"}], 
           "}"}], "&"}], ",", "list"}], "]"}], "]"}], "]"}], ",", "pos", ",", 
     RowBox[{"{", 
      RowBox[{"Left", ",", "Top"}], "}"}]}], "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{"PrimeZetaP", "[", "t", "]"}], "]"}], ",", 
     RowBox[{"Im", "[", 
      RowBox[{"PrimeZetaP", "[", "t", "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0.01", ",", "1"}], "}"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"legend", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Re", "[", 
          RowBox[{"PrimeZetaP", "[", "t", "]"}], "]"}], ",", 
         RowBox[{"Im", "[", 
          RowBox[{"PrimeZetaP", "[", "t", "]"}], "]"}]}], "}"}], ",", 
       RowBox[{"Scaled", "[", 
        RowBox[{"{", 
         RowBox[{"0.1", ",", "0.9"}], "}"}], "]"}]}], "]"}], "}"}]}]}], 
  "]"}]], "Input"],

Cell["", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Saving and Printing Graphics", "Subsection",
 CellChangeTimes->{{3.4673643752844334`*^9, 3.467364379699241*^9}}],

Cell["\<\
When you want to save a graphic or print it you can use varios approaches. \
Take an example plot:\
\>", "Text",
 CellChangeTimes->{{3.4673643987312746`*^9, 3.4673644398841467`*^9}}],

Cell[BoxData[
 RowBox[{"ListPolarPlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Sqrt", "[", "n", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "100"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.467364443128953*^9, 3.4673644474033604`*^9}}],

Cell[TextData[{
 "If you click on the graph a reddish selection border appears. The use ",
 StyleBox["File \[RightTriangle] Print Selection ...",
  FontWeight->"Bold"],
 " to print the graph or use ",
 StyleBox[" File \[RightTriangle] Save Selection As ...",
  FontWeight->"Bold"],
 " to export your image as EPS, JPG or any other available data format. You \
can also click on the right output brackets to select the output cell and \
either use the right mouse click to save/print or use the menu items as above."
}], "Text",
 CellChangeTimes->{{3.4673644531129704`*^9, 3.467364513859477*^9}, {
  3.4673645758383856`*^9, 3.4673646944258037`*^9}}],

Cell[TextData[{
 "To be honest, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s printing and exporting capabilities is still somewhat lacking. Sometimes \
it might be necessary to save your graphics as PDF and then print it from \
acrobat viewer to get a nice printout. Wolfram aknowledges this deficit and \
promised improvements in the next releases."
}], "Text",
 CellChangeTimes->{{3.4673647461242943`*^9, 3.4673648997845645`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Excercises", "Subsection",
 CellChangeTimes->{{3.4642864511098003`*^9, 3.4642864526854*^9}}],

Cell[CellGroupData[{

Cell["Customize your Plots", "Subsubsection",
 CellChangeTimes->{{3.4649377070966*^9, 3.4649377129622*^9}}],

Cell[TextData[{
 StyleBox["Reproduce the following graph from",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 "  ",
 ButtonBox["Cool Infographics",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://coolinfographics.blogspot.com/2009/10/information-vs-\
confusion-chart.html"], None},
  ButtonNote->
   "http://coolinfographics.blogspot.com/2009/10/information-vs-confusion-\
chart.html"]
}], "Text",
 CellChangeTimes->{{3.4649377151306*^9, 3.4649377654406*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQeYHcWVKOy3/r3GYJMM2Ma7631vw/ufN9h+uw4kpZlRJBobk3OOxsbG
XttkRE5CEsoIIYFEkACBQDnnHEbSRGmCRiNpFCbdeztVvVPnVFVXpzv3ztxR
YKnvfDV1q6urTp1c1dU9//PG+35+45e/9KUv/fZ/fOlLl//Vl74kyj0nz/3p
+E/6T19+yZwNVy0r7zFl7llvzTp7ypwL52746eRZP5o446z35g2cu77frDUX
L936q407e85d3XPhuqKlm/qt3jZwXfmgjZUDN1cN2FRZvG77eas2n7tyU9Gm
8gurG35eu3dQRV2fTeU9N2/rXVoG+dnrNp29bkOvLVv7llf2r6z+0dLl523c
PGjHjl80Nv68oWFgdXXv0tJzNm7oWbatX93OPtUV5zfuAoAC/OxRvg3gnG1b
elWW9a+vKampPnd7KVy6tGnvoLKqX1TVXVHbeHnNbihcWll7eV3jNY37L9he
BTBwe2X/reX9Sssgh5YXlVddUlF9ZU39NfW7Ib+yfvf1e/dfu6fp8rqGX9bt
vmRH3QWVtRdW1V1QXTeosgbyi+p296+q6b+z7sK63QADynf03FDaY/Wm3utK
e63eVLSudMDWqkuqd/2yfu+ltY0DK3b22bz9/PLqi6pqLhZd7RxUueP8qp2D
dtQAXFhbT3BBTd2FO2ov2ln387qGnzc09qnYedHeAxfvO9i7cufZpWV9qmpK
6hp676gtqt1VXNdQ3NBYsnsP5H3qG3rW1ffaUdtze3XR9h0l23cUb68sLi3v
s3lrn02be2/cdEFFVe/1G89bs6Fky/a+pVXnrt78sxUbe63dVrR8c58lG3st
2dBr2cZeKzcXrdxSsmRz3/kbek1fdvbbc856c3af95YMmrnh/IWl/RZsLpm3
+d9en3XeOyuLPlh71luLL5yzref7K3q+v6z/jPX/Omr6RXO3XjBr20VzygbM
KO3x7qp+07f9bPzif3/u/UvfW3f5R1uK31jUb+LSi6au6z9lZe8Ji4omLvnx
8Bk/evmDs0Z8VjxuQY8Rs3784gf/9uy7P3j5g3PfmF88ZXmft5cWTV7W//3V
vd9a8p8jP/3hsOn/97VPLpmxpdekxVCG+oHT1g74aH2vj1ef+8Hy7w//6IKp
63723PR+L88+68HJFzw184LBsy94bt6AIfP7DJt71qi5P5kw/+ypy3t+trbH
J6t7zlj1j6OnnfPRspJZ6378zryB8zf2+mT5D97+7D/em1syf91lW2qv3N5w
wfrK89dV/KJ81/mbqgdt3nFJaf2l2xouWrejeOHmHtDJp2vO+WjVwIVlJZ9t
7v3x+pLZpX3nbB0wv2LQ4sreCzb2X7V90NpyoOrPZi89e+7y4uUbL9hQ3m/V
FigULdvQa/Hac+au6rFgbcnyUmh53py1g1ZV/Hxjbf/l23vOWQdQtGhzyZLS
Xos29Vqyuc+y0uKV20vWVgzYuGPglprzt9YAy0o2VfRZs7VkfVnx2m09lm/s
s7r0vGUbzlq0BtjXd31Zvw3lRcDWtdv6l1ZfWFF/WU1j343bz1m29rwV63us
3AB5/83lV9Tv67eprGTDtj5rt4CgQg4/z98G7WuLt4H8VPfZVtWrtKLnlnLI
4WffihqoGVBd36+yduCOXcVlO6DQY3PZ2etLf7Z604DKOmj541Ubiip2Dqhp
6LmtEgDKvcuqz91Sdvambb23VvavqutfUVu0tWpQ9a6L6/ZeWNPYr7wG4IKd
uy+p2XN+ZX3/bTsGltVcsrOx57qtPdeUXlBeB9MEW3HRjsYLdjYOrKoHxHpu
Kuu9pQLKP9/VVLSlDBSwz/qt/bZU/HTBioGbK/qsXN97zcaLqhv6lFb22VjW
b2s19HD28g3nLFkHJLq0rP6i0p0DN1T0XbOteFUp5APWl8NdwiZU151fVttv
886iDTXFG2uLNtX22VR1af2egZWV56xbccHO7Zc2VBZvW9u3bGPJ1o09lq4s
WrEebgezdvH2+vPL6gZtrzm/ogYNAmhx7cX19RfXN56/s75fuZjvJfX7frXv
4C/3HrigtmFATf2FDXsubtx3fv3ui3ftKSmvBg0dWLYDrASwoGjNlotLqy/d
VPHL9eWXb6q6emvNFVsqL9tYdvW2HbfV7r1z1/4bKutvqKy7c1cTABQA7qlv
erDu4BWLN/ymuvH+2r23lddcuHT13Q177m7ce2tt7d0Nux9o2vfnQ4ceaWkd
3Joa3NL2xKGWPzbtuX9X7W8a6v50sOnPrc2/a9p7z646gDvqa2+t2XFLzY7b
6mpu21V7e0PdvU37Hjp06IU9jSP3NI7Zf2DMoUNjDraOOtjy2sFWgL+Ulo1q
SY080PzszppR+w68nbHebG2Z0HzgnUMHph46ML3t0OxM65x069y2g0szretZ
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
46df6HR4Rum+lKh1h6t9jv0UKuWL/+Hvv1D4HB565p6OLJ2jLXPyg51FrIu3
x87MfHSFSfoycoW0y+i4qda2A00H9hxsb63dt7e8rrZ+f1MKPzpDX3Tpkh88
ClIsbTvke3diVOBUcIQPDwWOLSJHU772pLsROMzDFXzcrvdfKHyOQgtwBOmc
1L7gYtDFfnLEE5P0ZY5jWXa7+PAyfkOeDkTpLTXxz48cAfTV6MDDWTnk4dmK
KkyKpW12vncnOoVPBVfbo9AOHIWp+wzCf89xu95/ofD5fNCzUOMmtU+6vdPz
6uL0c8QTk7mm0+eEbVf8yy2rJdVO/8mF/qeGS1/aV+9iB5D8XPvBYy51UX4O
Q4efy9Rpff9i3G7qv1D4fD7oWahxk9ok3d7peXVx+knjJp3PF/8nyLU1+K9d
08kK/e+c/B3Rw8ej7kixaB+jc4lNBWfNEeT1McSXTut7Ycft7uGSxi04Al3v
v1D4HBE+HjaeFmrQpNs73X8X555Mzng/GDpLrMvinRD8T6D07xLokAxLjgeO
lRSLdr5zOZrnXnDWHCleH1syVih70sVxu3u4pHELjkCyHct13ELhc0T4eNjY
2nU6x/bT9f67OPHkEeL9oI3/JIzhsR+/qXhH0gq5SP2vxAjBY8dEBVIsbfMi
eBcZ1N2p4Ogdkfl2qHdHW+pQrw/PuN09XNK4BUcg2Y7lOm6h8DkifDxsgtR1
Osf20/X+uzjr5BGS1oMyefhPomVT4QilHxQHZOR/ETX7/2/qBzuUhyOejnL0
up7y0qYO78qr27xGLOzsjlT7YzcVal7HBH1y4XuOlaEOcxT77hOqXOQ5n/48
+VXG4I6oRjkIcd9rNb9+E/mMWCxWIQzNq4XSx0L1033p8zqvI5WSKJOdSh22
zKXbvEYs7OyOVPtjNxVqXscKfTrke46VZm+5y3z3SVQu8pxPf3n5QS6/jdll
PwgrS/97O+ojPPwLP5jbXUfzvI5USqJMdip12DKXbvMasbCzO1Ltj91UqHkd
Q/TJzvd828cKSZLMdLdGdO5qXAp/l9LsJ94Pxn0HNS+ck2iVD9rHfPpvOOVu
TUmWPLsOdtgyl27zGrGwsztS7Y/dVKh5fT7oEzuF3OUkWp+9fcE1onNX41Lo
A7MdfQGmy34wVKacPsKTD9rHfPp86NHRk5IseXYd7LBlLt3mNWJhZ3ek2h+7
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
7syUNR5YX127eHPFnNWVs9fsXLC+fjG031K7cNOO+etqFmyEZk2rKvau2L53
Rdn+tZVwqWHZZuihfNbyjR8uKJu5rGFZ6b7V2zdPX1Q1d9WeldsPrq+EZtCm
et7aspkrKmau3DB1Xun0xdVz1pR9unzjtPnLJ33y2fC3qmavhktQs33GMgBo
AJfWvTdn/oh3Nr47q+KjJevfmjHn1UnTnx0155WJq17/YPmYaRsmzSh9b96G
tz9dN+nT0vfmVHy8rHbmytpPVy0f8/6yke+XT1uwdcrcGc+NmT54FLRfOuK9
Ra9NXjnmg82TZ26aNHPpqHcXDp28ZOR7VR8vWzpmKsCOGSvqZq1ZO3HGmjc/
gX5WvP7hitenzRs2afaQCcvHTV31xoeQr5348fq3Pqv+ZDm0LP9wMYy+5d25
gMn0p0dP/OPz7z069LMXxkOfq17/CCrnvfrWjOfHzx7x3vqpC8s/W7ll2sJF
o9+f9eqkNW99UjZ9wWdDx0996bUxDz/xg+/8zWl/9Vc/+of/NXns6G0rVm/8
dNGSSR8vfvOjVe/MBHoum/zx+mlzNn44b817M1dN+XjZpA+WvDkV8o3vz9w8
beaayR+vfXc2tNw2Y3lm+26+sxnIuGDc1BVvfbx9xpK1785c985n2z9eUPrh
3KVvvD9nxMSFY6csmfDBsokfrZo8Y807n0GDDVPnbPlowbZPFs8YOuH950a+
9+yIuaOnlE5fuHPeGshXTpq+4e2Zpe/MrZi6aNt782e/OGHmi28sGjZl2eip
a8d/XDZ1YeW0xUtHvQ+UXD/xU6hZOHwKkGX3gk1VM1bWzVnXuHDz8vEfffri
+IUjJq9542OgOdDn3UdeeftPz097fOjCYW+tn/jJpikzt0+bvxKaPT8WOlk9
/sO3/vTijGdHA6c+e37stMeGf/Dk8PcfGTr+d4Pf+P0z7z06BBi04LW3pw0e
MeGPz4x/8Jl3HxsC8gAcn/bEa1MeemnSf70w+S8vQvmjp0ZMfXw41Ex9fOj0
p0fCoACzXho/55UJ7z/26qT/eu7NPzwDOcDEPz4LQIUJDz4Nt0ADuBfyD54c
Af3MeG7c3CFvQg30ALhh4xew/fPQfvxvnxr/wJOv/2bw6799wixDPu43j4+7
/0momfC7Z9588Ok3Hnia2tBVynV7aKmvQnns/Y+Nue/xMb9+VHQSB6PvewQA
GkBL+Ak53TLqnkdH3/vY6Hsfx1wA1Iy692FqgPCIygXAvTDiG78bPOH3T735
wOA3fvPEuPseHXPPwwBj730EyuPvfxwqAU8CaAY5dUX3Qg5oCOQfeJL6AYAC
XRI0MUBMFuc78p6H4C5o9vafnp3yl+ff+q9nXv/tYyPv+fPo+6D+YQ3wk2D8
AzAWjAgEkWMJhB98eizM/bePAox74LHXf/f4+N8/8caDT074w2D6CQAFAKiH
MjSGEeFeoLDmDvBFYPubwZC/+9CQD54YBvL2/qNDoAxDjLrvsVFA5/ufAAkE
jr/z8MsfDh4JsjrinkfG/fYJkAQQmCkPvUI5XB3z2yfffujF958YPuWRl9/6
y0uTHxb1IC2Qv/H7p4inMNbkP78w67nXl49+b8XYqR8/N/LN/3p29G8eee3e
hwBAqKY9MQykGmwXmBQQ+9G/fnzcbwfDWPATxO/NPz4FMPG/nn7rz8++/Zfn
Jj/0PACgBze+/sCTb/1JiOXbf34BhgOY9IfnJz74HEigkDTkCEJEru5/kiDE
rxDjoCDI9cDTZg3gJu797WBx6ffPCDl/4Ckhw78RHQLpxv76CcipDRBNAyr1
U6CJMKkxIL0gVL95PAjQA4wCgz4DU5jwu2dxaDH6/f9x/p97/Orxkmsf7n3l
X8771UM9Lv/LOZc9+OOLH+t11SM9rgB4tOeVD593+Z/P/uUjva58uv+NcPWh
s3752HlXDu59zRM9r4byn3/6i0fO+dWzJTc+1efap4uuf77fTZBDzaPnXvFk
0XWP9r76T+f+6g9nXfbn8y4fXHLT8+ff9tzA25/uf9OTxTc+1ueaJ4pueKrf
jU8V3/R472ue7HPDs/1vfvDHlzzc84pnBtw8uO/1f4Fxz73soR5X/NfZv3ii
+LonSwCuf7zoGujz0d5XQc3TfWHQ62Cg5/re9OqFdz3f72ZE4GZE5rrBva99
stc1AFAAAJwfOefyp3pc/cQ5lz/+s189de6VL/W58cU+1z99zlVPn3vli71v
eKnohud6XDv47MsHn3Plc72ufbb3dYPPueLps654uff1w0tuHdb3ltf63jZi
wO1QhpphxbeMHHjHyP53vNLnhlf73DRq0J2jB941pOgm6OG5Xtc93/v6F4tu
fKXvLUP63fpyyc0v9Ln+hT43vFxy09PnXfXk2Ze/WHTDK31vhp8jLrgL2kD7
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
2qdOnnzy8cef8o2v9yvqk061cfEsDE8IyI/pmRuySR9nIFPWseh1pEPZ0pHy
g+T+aBtaV7qum9Q+6aF8QuNkOenqFyYUxDrTODuQLbHOjpvTZ0koupDuT0Pc
O2voATEPbVVpSUjeJy9MSuRv5/xgPiTNXa46g39efEzG54j5wWTpig8a8/SD
5hG7AD6H1w9q4nSObtlrzG6T+sk3dWJqOd6oG5qPlelxoSv+RYd4gHXuuWd/
9atfOeOM0z7++CPLSgvvhp+b1q8iotWxPSszbcqUb37jG3935nd/8C//amcs
2rHBBtHnFbFCpUP6nKKwfP2U+dz8iPhBcn+m48viBA2Ec7VXifKTSzCRCySs
FkMjdJySOk8at0NbZFgkojQz5Cnrg07ykvGSkK8fTNK45NAlFvLnVxaqhnjn
qYnlcxgyZ8w79ON5OGWm/EvMzHKzk523q3nuk7Ck5aN5hoekLasfzBfbuKsm
umYzJVrxcphfSho9CeF8+88+bj74xz8RTjpioaSUHlnLJR4e7c80H2r6wb9/
/4zTT/nRD/912dKFttWO78i7/peipR90PcuePHHSicef8K1vnnb2T35K/1ol
1ZZGOXHp62ShMxvKJYbkIebUExEhkT7Z9zHin7Hn8dw8Wa+zDB13xILIjqts
M8+7/3zaE+0KAomDh6S0Q4vNw22T4hC9yMsFwoOoUofmPUnjEuUtXwJlr4/n
V0f7vwHIg4kd8ygXIQjNqGvylg0fg49+yqpfMfV56VEy3/NPYT/oGd+1UO/Q
haUuyc53aP8jht1P6iRt/EB5zypyVwI+2frv9Lgd0kGnbEeaDZ8Y9oOMSz+o
vyLInfq6HWd+5/TTvnlSzx5nb9m8Ht8XzIh/L8nk12lMP/jh+1NPPfGk75x+
xne/9e29jXtgTSn02XHV15ZcdeJdAw9FR558Uys/7uRuMKSXz/P8WE42IbsH
1Afh0PHJL4ti565j5dd/p/xg7juLWUD/p0cTGA/qVw5W2KwwX9tMHje34+sK
n9CgSY4zIPZxGpcobx3SP8f6eBKJplk/GBqFPJjYgd/JArnIYf7ylis+AcOX
02uYpG74bfB8TASZ0NxCr+xrOiSIjLjws13iZAXDkxOqTj57IpsQqgl80JWs
kCGoHi5ItKB68r+TenTK0V934Dtx9LKnq/5brSnkdJWw0VfNfSoai5qZbcKv
kaoe9KWO9ShoOvSNGmEqO+JfwEb/42cgmZeoQ/Mus3OqMbvVlY5jyY+hORZt
h4o5ITEPHtr3j//0vdPPOLn/gKLyilLbaefyaYtxFEp9NXrJ4oV/893vnHbq
N7/21eMqyyuQg1x8PQy/qgG542VoP4o+4+Zybst/DGHTm3QkCf5CySh4rv7P
xGE5D322Wleii3HDQmX0Sd1Cs6h7Ciyc/X+cHOgnEIXSTx9n9U/ePAuCB3y7
JPEbzuagNJfAEEb/evQYNEJl9ZPhB+i0nuvvaDF6/zFoBcyT+SosoTiD0zk3
4BTVOJ48+abfi1RIInjqfz/rr80bbTQCNKL5M4qM2TJUiLahGsMsc72dRR/S
ojKIOR7vsrGNS8IDtLKttJCZoOCFuRD7M3ZJYnAt3IDkObhFoHtGfklwpdbY
oSee+E+/M+KfQImCHX2fIgujY+UkPKnQRGIXX9G7sr73gfGzE+IXS6Kkppsh
+TFf/Db9XUI/UT0125PGUb1QPfpAh0FJeqWalEhPQdPcdq0kDP1huXZ7pFCc
vgmpT2JIpWb4Dje9S0VY4f3iX7sCYuozmNpDoSH3n2TRKWhX/LNzUfb/V6by
AqbNN8vaS2qHop/gaNdpJtO/hHxZyHuaKeqSPOOzWryjpDEMudqkcQlP06ua
l6LIY31gs5QeDiI9vZraqtPPOOW000/6+aUX1u/a4bEMuELLSdlumvhFjcmb
bNq4/j//40dnnHb6iV//xpzZM4F9ViblOmnxFW48pi65g4ogvuyHt3m+wfJ8
Z6QclvZlUA8dxvqpDo2SqTj6/22Lhaqo5PiT67KYEBhKG7GzA8401sTRZ0J1
58qQOjG5aGPL3K8x7GScC9adx1uqKFZxQCrmmQ5X6aCveqoHs2zezlWUYhZ8
xmnbErP0MkRLOWUTKx0C6X2MqExGMadyzC6HtEK4WWFqCURjaVvymv5RAiBj
pUxq6zCDm/7OtMm4hA/LYUf0j21mio3ZzBVil7btjHoHH4M08R6TyB2H3mny
6I0PHbiaFOgYk7h50c/Af0LJoRMzkgxwIShgJp5UqduoXSmZxxAtVqRdj7yD
aID7MFKjKWoTAY8r2yi3oj/qSz2AdfJM6hmjS7MW5Isph/76C8OncD+yIG+i
dRzaZFufu8CCQ+fqxbco1almCpIpfpYhdIQaiu++MZfygP//Dqw0Ar4GHvjo
AZ72V2s98kHaF2ivR74j6oZwBerYtm16FtOpWZalF1mmezIbB/1OwHMRAtCD
xkEv7vRPc1lqDk3jUm+AIZ7P9AVahx8YgXgZ26JXHuiSrgeSWna7Bdz0HB2T
CDmxrLKybWecASu8E4uL+2wp3UAvFXrqA1/q60ASq927d1955ZUnnvj1r3zl
y4899oiQJQxOBJfF52dckkwZhHD1/5T1xqbxoSo9L26s3PVPukrEoVnrpHkE
LTOZDFw1iRZcjMsnyBQjwI3QPPbgSpTp0RDI7B8xtBAThzqgnMRN19AevhmD
6c5pjoaQBwqxCOh5hTBUOhJwrPFWztRfRm2FbTF3wOQ2uFEQBsmVQXJoFNOw
mHt9Ei39VaukXTha6uHuur9thb406x4jOQ694jYWR9KIOeK7Z26aO+3cauYM
orU2rTsmhUNspXrzDVAdbeqfSSnEJhgLhDMqZrI32h11hcN1LPQyLhLWsPBG
mWvKhElqVAa+q4+TzSUI10IVWx/dPVM/4vdUIS6mZyUmiBq18WnmegjSa8/Y
KFPDcbSTSTj7P0OLmqipDxneEOnMfWAMxkWQrLVAHAhkATkhtMF40tMiNyOY
KHy00kRaZbjy43u29IOOcHlQKfeOcDcJFhG21Z5Jt4PLBm9LC0PtlA3k6TU3
cn/y+yf4chAOhPZcWxuT7yYd9CVd6RrJC64BPWMpF/JrIcaZdixktbS5joqi
acf0vVFtIg8YmpcegqLw6EfmtfTpShGL2Ga8oefI6NuXpaXbTj311OOPP/68
887bsmWLcI7AL1RCV8VY8vgoZ+3t6aeeeur/sfcd4HEdx8F/EluFJHpjU7ds
ybZkxc7nuEaKbbkXOX9ix479J46d2E5sy44TN1VLosTeQJDovRcSBEgCJAj2
BvYCgiAIEiAJEr1ee/39szvv7e3dvXe4Aw4k5Wi/4XKxt293dnZ2ZrbPnTs3
Jibq+9//J2xx0LBG5txdhZCe9G/FmHowXqvHkT0lEv3V1OCGONRU7oI4WykY
0P98+yLjaOs0CICYKGmSbJRld2EEPnaPCfAqOozhi8OfRImOL1VrfOyQD6xp
WAtN3q9UNG9lL3KovxjGnORkFiyf0lh5sCQWosovF/qxtLnGJ2iKG9QPaWaf
nyFzML3BcPAZ9fJamt+FqFI+Ub1/sjRGSaCEYdCkeXA60e++GhALLveYJE3o
qnti5MZQ32VNGqe1Iq0JEisUjkJW5GOQGYIzIX7IJ+Oz4ptVlq2XpDXFN8wT
QQmKNEtmtogfesjPjEX9eMyPpVkkprcgjs3MMUtHBuuSakx50gy5O37pOU9V
kzQvboH4WNHfG2DAGWsEMcm8MtLYqaDbdFvVh2j8bDdPf5xd183MWR9nnw70
3Oy/cXOwt290cMg5NupxO0Gd4RQZqj/RPS64xhTRqYkuyTOBr5lLohNAkd0y
jE3c487xIVV0kwPaMgE6PDQm1kw1RExDSXZLsgvUH5j/Kr3TUpQmZMVtXvOO
+/+9NhhTT2wQxy8UonLxW4ZD1QZGFGbCm44qHQzy2oq3D1Hf8fY8ZhU46arR
0ZyfzmXlMnywClgifoXJsC6Ij8fj4eUSMpVs/gnEcngEsBgYyxEBJYlMSyLb
QGt6BDJgbLtwae68++ITUv72M58/dbpVNW/k9sgK8ip/yR38WlpW8eBDjyQk
Jf7NM0+PTYyC0oTkoiwBEHVAPxHpdA80j0s1G4khrDKxSZK5JBUAE0BgwgP2
kJEefnXL0N5kgcQhk5cvgAM8FATdCEPmED8hKZAA40XdKBHyccs6yw3w8SgG
Yr7Pr9J4PRgIXM4eWikAxAd/RV4UTdwCc3AqGqbHxCw9xnt8i2BVw9phWRhg
v7JPBLM6vAzBjm+nT3mVyAsiP9HHhAxO0mGhbqLsvMyGx9RF3UsKj+lLvu3O
IxCIk6JyHGLyiR/yhnRC+4TY0wq951oVOH6gz+hivaWampL//Mk///r5f8/O
WHv9Ro+gkEd0wFdMrABz+JOF3ZIKoJjcYtmOYkBLsYqLvs3nMZmf8YmHNat5
mTfeQsiJcW8L8oMqWTEqjjt/WAJMo9CVRdbZWVgwcUAG86sF/sRXxLJ2otmL
gVG9n2u2OpmvjlfpYy/jmBb5WdCN/mgQXCU9kVg2kFLjUNV0p6y7FN2t6g6J
BPyaxsNJBj4eK46t4FNHKAikCmUGCPA8IJucgHyCkQonKwBhxBMxr62srq/Z
tK2ufse2hubtjXt2NjXv3NG0Y9vm2ur6uo21NeWlRbklhTnVFcW1VWVV5UX5
eZm5eRm5OelFhTk11WUN2zY379i6c/uWpoYtO7bVb9u6Gb6CbwFqNlZUVJbk
5+cXFBQUFRUUFuXmF2TlF2SUlOZWVhXV1pWVV+YVFWeXVxTU1dc0NNbV1W+s
rCrdvHlzbW1tRUVFYWFhaWkphCGmsrKyrKyskrrq6upNmzbV1NRUVVVt3Lix
znSQDP4sLy8vKiqCQiEZpsc08CvEQIaQADJn+dTX1zc2NjY1NWH+kLiWOghg
oVu2bNm2bdvWrVsxf/gKIgG37OxsKKW4uLikpAT+zMnJSU9PX79+fWpqKkRC
nrt27YIPIZNi6qCInTt3QjyUCLnBnw0NDdUba/ILivKLSwpLy8DPKSjMyssH
H8LF5RVA6PTsHAiXVlbBnwBlVdVbtjY079qze8++HU27G7c372ja07h9V13d
DoDy8tr4+PmJiQuffPKjmZmFe/Ye2nfwaPPeA3sOHD7YcvzoibMnTp8HOHby
HIRbL3TmFpa8930fWHjfA09+6C8btjcePX7sYMuRts7O9u5rHT03z3dfO9He
eaj1wtH2S6cvXwc4c6Xn+IXLx9o6zl7qBmi9dLXr5tCV3qFT7ZePnms/ffEK
wMkLnfDThe4b7Vdvnr9y/Vzn1bauns4bA1cHRq8NjoF/c9TZ7xQAbow5rw6N
AXQNjHT2Dg555DHoI0Q+6xAYcIkQMwF6CvqOqk/I+pioj3j0Ybc+5NIGneqV
3rG+cWlUIDEDDgViIAGkBHCAPqU+gFM3/hyVNCftX+BDzn0OD/jjCoTVYUEb
lSABCQ+45BGRpIGf4Cv8nGXlop+7UfjQNIAq/OT2KhejOEzmpuk9ZnoWZold
ZjKP6TtMcWek0bzSz2MqU6dCfA8nugVficEkpJ/cQHycvnIMM2SfIFYOE1xm
JCGFQsjr0bhC0VICAaUQEKhAJjmYrTZOxZ0fkl7riJIOf3JqBmJuWhBgBaYU
CK7h0ZG///u/i466JyUx5v2PP3r42MlhpwQ4IBos80A1BwkmRIO8brNerEE9
HOX5MGtNvnXYT66AFuQltsCJfT81BJLfTYmD1ppLMmjll8bFTCzdCLs4JD0m
AwODAeM5dYtauLhkPO9NqN4ckALenCkxSemKD6BWwng3bXeXZnA4+9xplugy
mRbabtgt9427AfonPEMuZcitD3t08AddGvhjEmnr68Pua0Ouq4NO8CF8c0zs
h17sVm6Oe3pGXddHnAAY6B4cv9w3cr775rkrPe3X+y9c6wMpdKqju+PG4OW+
oUs9/SBhQOwcP0/k0sVrvSB5IAAxx1ovHjhxtuXsBRBHAGc6uiAefgWhBGEI
gDi6MeLo7h+BrxzDw+6xMdHhABCcBDyOMefYsOiagNGfxzk6Ntw3NnjDNTbg
mRhyjg+4XMMTjsGxsb6RkZuOsX6Pc1hwjYAPKQHcjhHXxLDTMeJ2jTng2/Gh
MeomJsif4xNDo2N98LlHHHG6B0fHbw6NXIcYt2dclJwu9zikd1IHnwwODg4P
DzscDvhzfHx8ZGQEs4IwxExAjmNj8CvNfAKTsXhIDMkwMfzkcrlYJg7TTVCH
v8K4DPOHGL98MAbS4FcYGKWOZY5oDA0NDQwMANoQxhwAf/wT0ripYwhDDPgD
Q4NDw6NDY47hcSf4AyPj/cNj4A+OTkBM7+DI9d6BmwPDN/qHrt7o67p+s7un
t2+IpIcEPb1DV67e7Oy6ebHzxvn2q+fOXz3ccv6Bh56YNWfue973VG5BZeuF
7svd/S3Hzx09de7kuQtn2jrPtV8BOHvhMoQ7LvfUb2t66q/++p45Uckp895a
srh59y5Q3nuOH28+cWL7sRObDx4qbmjK2Lg5vaY2q76hqGl34Y5dmZu2pNfU
FWzZUbR1e9m2pi37j2zb31K8aWthTf3G7burG5oLqutKNzds2X2wrnk/xK8v
KFubUwR+RnHlurySpRtySuoaS+u3F9VuyyyrWZtXsjKrYFl67lvrMtcVlOVU
1sJPxZsb1hdVLFmfvTgta1V2cWbxxpyyzbnldRlFNWuySlamF4K/Pr8S4vMq
6uGn1ZnFb67OXJaWBzHFm3ek5pdDtmtyi8FPzS8FwD/TCstzqzZD5vk19ZA/
RKaXVBVs3JZRuimtsGptXvmq7JIl6/NeW5X++uqMxWm5qfkV6woqASAAvwJA
eH1R9cqsolXZhQDLM/IAwzdTMwB5wBYqsiIzHwJvrNnw+ur1i9amw08AUGX4
CdLDr/DJ6pwixAr/ZAB/AizLzFuTX7JoQ8Yra1KXZOVkb6wtadieW1u3trj0
rYysN9MzwV+cmb0sJ291YfG60vINFVVLs3NXFRRkVNUU1Nfn121ZX16+qqBo
RV4epFmanb08Nx/Dy3JyIAx5biityKqsKdhUV1hbX1izObusKr2gNC23aNm6
jOUbslZm560tKM4or8rZtLlg67bixu1ZtfWZm+o2VG9aXVK+NKfgrczcJVmQ
WwGgujwrH+pFKFlUkVVanVO+EVowo7wmtaRiZX4xpFmcmbs0O39tcXlG1aa0
4or1JZUbSqsgAUB6WTXEpBZWLEvPR9quyS1LK6jJrdyWX92YVVYPLb40NXtD
VvGadRn3LXwoMT4pek5MSsq8//r9K6sz8pemZr62bC3AK4tXLVuXtTarcEN+
Gfir0vPSckuyS6ozCiuWp2W/vGQVUBWonV2xCdodGACaHqgNrYOMBwABPgwt
CK32x5XrXlq6+tUVqZAYGLVw01Zo09+/ufzlZWug0bG5SSNmF/33a8teWZ2+
Kr88rXTjmsLKZdnFACtySyHytdSsxRkFSzIL/7g28/dL1760cv2bG/KWpOct
WpfxRmr64g3ZBg1zi9YWQPvmLNoATZwNFAOAPwGA1KmFZdA1AICB19Ie9Mry
tb9btOyFxSuxFoDGhuJKQBIAWBoigSGhCoAwAPInRMKH8CtUBNoIcgM+hNzW
FZUDv0FjrcgrIm1qwvLcQmzEN9Zn/n7Zqv9+c+lvl6x4efW619MyoAUBJQBs
UPAhWyAvlJ4FDFC+MbOkCnr6augOhKT5y9ILlm6AfpEH/vKMwtU5wPwV0I8K
NjbkVm3JLKtNL9kIfRDCRbXby7Y0VzXuLd68PbNs09o8QLJkXUFFdsVm6Kfp
JTXQtcEHWJNbCgmqGvfU7Nxf1ri7YEtjZs3m9RU14OfXN+Ru3ppetSmjurak
cWd50+7S7c0QgEhIVn+wpaWtc8+xMw37jmw/cHT30dPNR07WNu0F8eXdLI3b
p3HBCswWFTeN49ExyQtkVB0QJvczsxNm3skqbp+MsSBOFweZDWjMBuGEDW64
slvnDYwMXNEOshuBn/Bkjl/dY7/6RfpteOCLtsyBJeBX5NklXfxEK/5JJqvp
DKQxMUXWUHX6gIQRppHeGMl8t5fES7pH0iFvMMXBn3BpTz/9pbjE+z70oY/v
aD4gCORXWfPOAJDZRZkmVkn85SvXn/vmP0THxD3++AdgSKtpikeWYAgwrKqD
ALoO0K9q/RoJ9Kn6gK7fFNVeSRuHNPCToDpM4xAtQxiRETOVjsXIcABHBIrX
H6MBtCEhDCMvNuZCkxV/dZpDLTKsUwjgyAJggubvNscm4EOhEIn285hoZIIF
TagGYJjFIwIu05odl/VRkZip4IPhCgGCjGIA/goAAac50mS58QWxgSdizoai
aDlDMhhysmQMMQT8c1TVh2RtBKx9ncCopkMYgAWGFZIAAAIAmHJE00Yhf0gP
Q11FgeaboJEQHtWNBAgQMwJomyNcbCCkpMtsMsBhxMx8SNP7ZcIJw8gMMvkT
4iH/IVkfBjQkkpjVYszEE1EdELV+QYYAYRia4bhGvnUgVrI+JOr9bg2oCqPg
QRcZMmC7DNFRf++I2yFop85e+Ohff3LevAWxsfHf+/4P2i9fH/EoN0ZcN0ed
Ix4NRhyjglELHswJBAUbyEBPJq0DrYCjeGw+JAULQzLWjsCf4LMmuzHm7HOI
/CQA4D8o6QMyoUafqPe61R6X0i8YMb0C8Udo3a85pB6HBImBCECTAY9KyILk
kkn7Aq36PBL4EAaAJobEmIbnW+waw4ICuOEcBc9XrNeAP+SRhzwq+xN+cune
Xob+oKiM0cYFNAZpkw0is+mkXtD6+CvGI8sR1oKARPhkjLIKjjQNnqeMhLzk
wBkVjXScEcHoQdDQ0Kegi2HPsgDFO41D28tbcawOxEPdIRLoP0zpOUo5f5BW
ATAfoWFEfgCYUNFoQLvhkccouZBDcO7IwFMOmBfG2fsQt/JODj7KIcz0/qrQ
0oWb/pa5UPFBy0Pz9+m5HZX5Pr+aZ7F4H0wYUdK+/KWvz4mKe+x9Hzxw8DC+
MmJqWJW/GAGXngWP8vzzv0pKSpmXMnfJ4jcFD8gnWdAkt072SLh0DcFNgZ+Z
wYuPDV81LkG29GXdCAuahimNS5M58MnNz+fWNPnnB0Sbx4tDB36ZIGwIjnNo
vhQULBazNI2B5WrX1MCPvHwpHlUFMIrTOMSwNX2bg9lvwdvUn0N8wec6UbIr
zAP/79nX/N73PbxgYUpySvwbb74+4fa4RAlsQr/WNEoPaGW7pg+M4ddJQweB
zmOLmtEvmI/xfj6ANR3sKcaw9VLYt15+1eG/JSVCU3K+JR/iwrQf/n4+WU1W
/ds9REA7XGSbDaz6FON8y84epL8H72WBdbfL5+3iQlQ3k6a/ZS5EZOzuPWA7
SP33kbIPfZ1GN/Z8+ctfnjNnzgMPPNDU1ASDUFEkhy+IBtRlie6TUsxTKoCV
xyO+9urrSQmJKQmJv/iPHzvGBmXJJauCqEk84L4tH2T4jUlaMGAVwevdpgB2
9Z2+w2ynhtX0wbbdA87dBKn+FMgSHA0LVK0OAQXeEaH6niEKHTHkT2NrsWJs
SCb762SyWcbpGl701osPPDj3/gdSHn3soeLSAlCOeNcHQ9gW8wBeVe3P1EyZ
zcJudxsXXJiovmeyNN+TO/yfloUG6X3Bmj4c/IPThyFgV5CXCSPtAq40wQN6
/m7GFViEnB2HhJv+ljk/TOzwnFQP+sXzLrAdv/Wtb8XExMyfP3/btm0YY+aD
28D99WBmetb8ufPiY+Oe+8ZXbvR0SbKL7CmmSlPS/Z5stu4LoYj6SbtkkH5q
V99wnW0modkhEYcgejAQZ82c2w/d2dEhRDQC5ZJftnZFhNteBmtxepDs2zf1
4MTEwL/+63fnzktISo59/wfe29BYjyaZXR/xYyqyYdYGt9ApZln9QHpOTsmg
cj4U3HibxJbakzFwuAwfRP6Ey2+WZYVOn9AbJWhrco+Ycy4yWmrmXXA+uQNd
iJiH2n0m04N4cONnP/sZjAcTEhI2btyo4+lCKz2I19cB1NXWP/zgQ3ExsX/z
6Y+fPnWUnGrxPkPvcwIvFD3o160sdbpf4km7p119p9M0PhUIk/4zDTNRX97Z
UdtWNAWUHjo+oeBvMBhuzld14/gyvTVLEl1dVy5++1vfBD143/3zvvLVL1y+
fMnOfLIT5jNBw+nwT0QK1ULQg1MGO04wls7CRdvGXLFFIGh72f0aGK/aON9r
ir3u9mm28Fy49L+9LnS0LXqKeSTUph/5XDfN3cNDwosXvzl79r0JCXEVFWXk
wKYkmO0v4z0G7E5XiexJ148fP/nYY48lJSU98eTjDY11qActT6IHSpXg/S5Q
D05fLxgUi4RMm7Icm2mww9MC8ynRYVLpNyn9wytuMjyNGyw1UwMaB+3JmFBw
ju9savjrj344MSHmvoXz//vXv6ITr96xXhANGChXp1sTu6pZNmKw/mvtQpF7
fnLeGqWwmC3ofJRfygjqwWBg0146ty+RJeDpY/mVVU+xu7f/7eHs6BypfMLN
P8SvLFvEUo9YnmYNZFTLRmQ36aWmromKmp2UlFBaWszuMKdOZpe7Yjzef97X
N/CpT31q/vz5Dz18X35BFrnkZwb0YGC/C1LByMrhSd001VbkIUAOBPLbTOhB
Wya0yyec0kPQgxr/Fo15tZtUWlJw/33zUpITkxOT1qxaLYvkfgxernrvHLAf
z4aI5NTkQ7jtGykXET04BQgbT19pECgBQsyfNQ3PeKG0VwCjvqMHg+UTbv4h
fjL9ggLysW5HUSSXab/66sv33HNXdPSc9PT1guBWzRuMzUuJ6S0dhn4kuk2S
1X/78b8nJCXOW5D8ymsvONyjdnowONqB8YEGm9+fU2uOP3lnpwdnmlZ2TGtZ
rq773885jZK9M1S8HhRdTo9j4rWXX3hgwdxHHn7wyQ8+cejAYTJM9CWR7ise
Z07rBeHz6VV/WqWH7qaP5/Rz4BlsmmKZzzPESNO9oweD5RNu/iGmn35BAflY
tyPetv3LX/4C9ODs2feuXLnc6ZxQzBdAzFcSvHpQ13W8JHjZiuV/8e53xSfG
fO+f//Fqz2W6higHwqRo+8UzMcV+mhr9I+UCezHiYzXEvRWSLVxnxw8RwV+1
n3cNbLUgdJtSzaz1IAwOui51fOnZzyTHxy2cv+ALz35xYsyl4ymhgJ2T/D5V
LbTxciAxQ0zvF39reCZ0eWKHiR2eoaBtx2Ph1p2vhR0/T1rTwPSWaeyx+N+l
ByOVPtx87HKecvrg7cjWB0F8SJJQXV0JSjAmJurXv/6V2+0MogfJYFAi+xMa
d2yfEx0VHTv70898vHnPdlnx4GXN7JFBABp+W7opt+8MuVuAzxTk0hTwmY48
9MUBGYxsYJYE2bgeWVYkt2vXjob3PHjf/fPnzZk1Oy8nXydvEWp0f5f/qY1w
C30buTuHdW+NCy4VI+He0YORpHO4mE85ffB2ZHoQlCBoq6am7dHRc2bNuudH
P/rXoaEBmb4CYzz75asHsQRJVvsG+t/3+GNzou+NS4zKL8qWZDf/+hh71ylc
+twhbsrtO0Pu1uDzNtKDaGsZb8dIqvHGgShokuet11+NnXNvQkx0TFT06PCY
jm9CK7ZHLN9xfwIuuFSMhHtHD0aSzuFiPuX0k7Yj2y8K8uTs2dOJifEwHvze
974LelDX2Rtn/noQz02QJwk09Yf/9iPQg1Gx9y5d8Sa5tcJ8DRPzlOljtYEU
MBa772w3nfa9o/AJJecpIzNDlQ3FGe+wU4cP3uFbfoO9PZ/46w8vmJ+cmBD3
zN88DVYemRfVfPQgX4twyw33k+C99e3rJhVEfolvFz4RzD8g7h09OHn6cPOx
y3nK6S1bLVAPkifrZLGtrTUqajbowa9//as3b/YQFWastvjrQZ0+nQbFCJKY
kZV5973vSpob9w/fem5kuB/1oEwHmKgH8X1kv+pPbR91uPSMVP5TxmeGso14
ff0+nzT/O4TO+PCurhsPLxJNR7hO7r7cnhQflZgQHRszOyc7k7ymSseD+B60
arWPKCx6hlvxiLfXHeLCIt0tqO9M09kqw3f04OTpw83HLucpp5+0KVEs6PRx
w8uXL0dHR8fHx3/2s5/t7e3lPqdKkzs3wWfS0NAQHTMrNm72/AVJF9rOUkGE
m53JqqIoevzGg8aH/zv0YGRxCLH1p4/tpAXdIXQmi4GqgvvncaBHn1CVX3zh
N/Hxs+6/P/lTn/xoe3ubSjd1yRKZg7DJJrx62aW5XXQLPf9bU64dZSJVbrj4
zET+oZR7p7lI0S3c9OHmY5fzlNNP2o6oB/E20c7OzjnUPfHEE11dXZzZ7KMH
6SjPeMge8jl37txjj78nITF6TtTdx44eIltuRI+Ky4J05TGIHpxpN2X6T7m9
gmc1nW+niUaQ/AMjI16QZbnT6RdGPvToH7OpcDF6YnzoS1/625SUmKiod3/9
a1/s6r7EVrTt0IhUXabzbSj5TDl9uIhFxM0o695293as3S3jtxBduJhPOX2Q
clmkau5vh/EgDAbj4uIeffTRq1evcmm8etDvaQ9QoIODg89986vxCVExsbPy
87JQD0p0GIh2Oq8HvaVHVA9GnP5Tbq/guU35w+DNOs38Jy03UnSIuEP2wnPW
OkGbMNvJUy1PPPFocvKcufPiXv3jCy73uKrKoqQEwX6a9Y1U+06az5TTh4tY
pNydyTaRcnR6QZ9q/dRb79PWUAL9MNMbC1uBvqYZtxmE6FvmY+nCZSS/9MH7
C0bikFBRlNbW1piYGNCDDz54/5Urndx5B7YtylCCuFNdEMgo0ul0vvjiH2bN
vgv04Hf+8e8dEyPwO728SsJRoWLmE3otwnV28sHOhZvhlJAK5Kg7UA9a92LW
wf3gTnMK7Uuyim9VkElRWXLXbqpMSopKTol59L0PllcVy4qH7KUx+ulM1df8
JLx2Yb/7+UFLCTf97Wy4qfeet4kzyWseXjXlpDY5yIE+vXVE8vPN0Ycchm9s
51Bs4zkfZ/kCy6XPVfljZT7cR54KNnxNx+NKWG2Z873xfHrOx1/9/HDBbIkw
gNNlxlvA6HDneV/fzYcffjA5OfHR9z50+cpFUXKx3aTswDIrFjSgTvcnCIJQ
UVGxYMGClJSk+xbOvdB6ShKd5jPKKhts6n4IMxwiMTa0lT9hE5Rn1NDob/UU
piWfGzrRMiPO9/kxbLkapjyfIs9Z03/62eP1WLbcy12hZcTo+IYmPeKqSprs
1hXPb/7nlw/cPy9lbsIzn3n66KljIqhGwYMpA/P3yQ0TmD8qakg4838Yr3xS
kodN2gBOmK4fJvvfOeDtgTPtvNT38cNuO5Yf1xFs2sTLKSGCpYQJDr7DFg40
w1z08+3Pg3hz42PsLlT0ewnXGx/6TYy+9JxKU4YAdnoQxnfg9/b2PvbYexMT
4x95zwOdl9uJoe2jB30QRAVH1xD1vXv3P/XUh1NSUuanxG/eWKZroiK7NXo8
HzWsBcJ/GnrQBnUbfg6pyX1+n2k9yIoM0bctN0J6UDP7hlXp2HP4/mMe66G2
ruxRhYmOC6e/8pXPzp+XFJcQ/e3v/GNPXy99Zpd8QXbUBOTvzY3FhAn8t1NW
gppVfUOnv227vG0BZelU6jwFAk2bbhzeFFi2025BHqXgvh/1rNPg9n9fX9Ms
FKZPRXgx5i1A8YLRVuYhO+brqkUOgblNH8Ilpv8SoQH00mHt5s2bTz31ZExM
1Lx5KadPn/SzBEwdaji2yxT806dPP/PMZ2JjYxekJL760u90XQI9iOaHJEkW
LYpE43KbpgtXX9i7QFYIXnC4jaWa72ZP4tMhpMwm5EPWg+HSIaz5FltqTJXa
gfkEmwXSzDkctk4t010y5MQEpJHcmugoL8l9z3sWLpif/Nj7H80vLHBLItLe
vDzNP/+APMOZfQqgT0SIENRNzjmcz2C67Wvj1PDxCcOZxLQU0JFyqi+hgoN9
uZZ6MHIQqZzs1BHBWQkZvFfZTwZs5DfDelAz1xxDl5O+f/oMGfr6+j75yU9G
RUXFxcUcOnSA3KtmowfJaS06hMQ9pZcuXfrud7+XEBcPevD/PveVseE+XTFO
T+BKogXPTImf7eT8bdaDYTiUCZODhqpwZvVgWEIgmCiIkB5Uzb1Y1qUbO5a5
NLQHa7IkqIqgq6JnYug3v/7Z/PnxSYmxT37o/RcvdTgFDx6soHxokT+fJ/4E
Pj4xFj5xZBuhHUEIlX9MiEz7BmkvK9YV7ZGZWpUD9XUE6RkJ+gTqwSBl2ncU
u/kcLQTtxGsGuzTWVQqOrQXwh8qNc+XWwIh2S/Rg6POuPrKKW3DBR2iGhkae
ffbZuLi4xMTEI0eO0Hax1oNoXeu6MSp0OByrVq165OEHk+KiP/Lk+w/v3wN6
0LiVNAjPRNCgsQLN3NcUOoStB2dYToar38O3B8KVG8HKjUD+bJolyK9cGg03
iyoSeYBeky6cPf7sZz4JejA5Ke65b351bGKcaEn62iBhVUWyyN87scNliw+s
3Aq5eqfp2fCc5SKU9crU1OkTZJwbEXqyyoQiIOw401dAhSBogvQjyw4cogbk
VaGfb7lTJZT3sGx6utHW/IxKoFVpaNqw5VJ4Ltz1R7+S2WoLTo0OD49+/vOf
j4+PT0pKOnbsGKtmYE8xVIymCYKAMYcOHfrIh59KSYh938P352Wl67JADtRT
Pehf3z8dPaiafXNSm9xkiQj1i0ilD5v+Qcu1IVE4EFyMoOpDn5ZG94nii2Ci
6B5dv2bZAwuTEhOiU5Lja2qq+Efr8JF6i/xZbii/+fjJah1ifYPqhTAhQu0V
KRe4+jzZerR1vSJJovAAkTb9kEgaTL8Hn9DwJgu6L8WCPuFvpNF8fbojVLHz
ZV0KAvxcp0wSK9wAU6OgmL4PsK/C1VOTDX79Z2CxIqHQk+kGX6bV2L5rkCiD
g4NPP/3p6Og5CQlxx48f5W/MtuQf8lyTJOESIXz75S99YUFK4iP3L3j9lRcV
wcUulpn6qNCi34Xn7PuvXfowpc3U6hUy2G3FD79edh8ErVqgH7Rcq1/CFEr4
vx1KfFpaGlGD5GCOByyNq1cufPkLz8THzIqJvveTn/joyMgQJHE43djdqFVm
tQ/HzE2RVFnUgpUenDJ2LRh0B+yMgx2lI5t/8JhQ8DEWnkLFM9wHgMOrURBf
s2ZpRZcVupCh6qJqLmoEWSf13s3l65sq1cLnTyTYpbH/1jgfYedTfSdyvp8e
lO31oGHfy16d6NWM9BPj3EToejCEJUp/PajxM0UmBLMrvHObxp9Mb4qip6+/
52Mf/6tZs+9KSIw5fea4FmxKX2caEASgxwOCSP+3H/4oJSH+vrlJv37+Z+6J
UdSDqqFMw5HABr/Zyts7RQ9aZx050G+THrRKFdwFLSUsPRhUEwXoQcq6sts1
pqnC8ZZ9c5OiUxJj4uOi0tJSJUXGj8heGuh0Klts9cPcMNZEj+RxCZAqmDy3
p6IlPSeXw0GIEQn+eZvpQSVUJGdQD05OVYsKiOTSPomqCYmqCao46GOseGaK
PECg0qVnsrFCFAU3ldW6Rt86V+kLd6bkUVgM/mqkMX1+T6bxlapRtUOsPQ3K
l8m8B12Wotjiw3k0RhXpmW5ZIWe6JZmlIVipgqSI4OPd9Xhzr6ziAUZVxYsy
6RKDau7TJlpZMcLkbCG9cdocoxo6DuPhe1GUQWPwvU811+NYT2R/kvPsmupz
IsNAwDjACAEWJuM1qD6qRFnSJNH4U8ONOgohi2pqZuOdCLoHQPNfMtXI1nLB
4Rz53LNPz55z16zZ767ZWE7Xu2V2pyheyo1KE29LA1UIjYpLhKIo/vTHP0mM
jbl/7twvPfu59tZz5rkJ/NxgSYXeXsPtU1X9BKlGscQ/IDHemmV8aLYFu0rL
2zSmPONBMZ/3gWz57Tqowfni2OEOdpUcfxuz38utvMN7TBTVe9YMZwTYVina
MpQx6ZwbrRdUSqYsJ7GZDf5PCANQJjS4DouQKddbAuaiqD4chRffIfjFIAfS
yxMk+mSkTPqpRppbkt3QFyjzCgC4bVXSRRrp7QXws6x4WR18AfhcNtqFD/MN
xPEzWdIzRmreVsb3oA2DGREjTUcDuH2F7WBhu1noEyceUIXf+OoX5iXHxcbM
/uAH3nf1+jVBISSHDxwegRSKF/2R48DQG7G/o+lOilBACMhuUXKRQ/e0FG/m
vntmNEoZIgDMz0luNAAtiHVhwFfWe/8b17WhCaDjMHsSr7PAGEyApMNMTA73
aXx855rJK7OdDVFGzj2BNIbKEpwlRlhsa4/gwEiHc1TX8bJ9GVkFuzWKQhRN
GDb7jdF5NXLkCi/Sp7LFDKCNzZ51M4FkFZgPxrAwE5KYjLEZ8j9yFPAXkte0
dlSPKDDhwAtt/JMtE/s1B81BROohAXX6NADIN+M4PDesoPUiPIpCjwkQkCfA
oCAQwfeoKgB8LNINQwr6qmmV0H7H7CW/xWoiqiUDjBdf2a/ezmP8RJgREog6
bUnjT58NMQq3aCNbDbe9CUzjUzVGkBrFG0cwWJbGrBRyTjfAbtEMH2qu0BIV
7JeErlbWDugEQSFDZxywYk/ik5mSBVhSo7LGPCJFLQSJZE2lkSlbZXqHPpGS
0Bcl4gMnSyLRiSh/maKkReJ4nPZu6BoeWXHKiluSHarmhpYcHOr5/v/71pyo
d8fFzzp+4iDEwK/Qa/AZQQR8nMJkDAV1Bx6OyMvJnZ+ctDA5+akPfmDXju1u
lwM4ioAqMb4lvubDFT73/3M2NVlflEmFCdtTkKj5ItNMPLIkSMD6Ml7nDYwt
UcmD6WWO89kAQBAEl8vFznGo5kPk+CfwNq51arQ/Evljci8ZTyBHEBLIxJ6T
JZRUgrktX6WH2Jh24DUUL/ogK9RxTGQxDcjbYEwh+mhYqgqZWmQ5MyVIECD4
eS0NnzELF4PFqPhIg4bWDtEFEBZlN1HdikfUBABBBS3iEXURTVwgskuUgGOQ
nQUqYVHdYAywFMYAQDKqZoxVfpUYW1SNUrQhK0Iuet5WNs0YqDsUjdqKMB7F
jSgaEolqSDYnnUgANRdktmf3DlCCD903PzEhZvnypeMTTqeouCQVO7pCT/JQ
C0SU6MyPYup3qK9HdKI6Q30BGYJOJC9pqgIRupBYBcVOYiRyNQ35lvypi9Qc
ljn6UCObNgUJqHRooEEC0uIKtimhrQgxXoPWNC8VU2oYuozaS5CPZghIksOI
Y3TC4xAkaB2JWFP0rg9MiTm7ZQ9hGzMTNGk0qvoVGmY0ZO0ONFSouodsiR7k
RrhE6VCW5mN0ZD+jd1ATXaNDBpVadzDYkQXs9RivI2+rVFlTH61B0ulUonnx
xRCaA9BFgB7KMNFow0EvMzUaoS38ygYF0CKC5ILmoBeeeA1LPzuB9TjjoS6a
wOl2AMKB9oPmpZ7EEmBXBW3LOjL6IuFxogQZAHJGWCUsQnyF3saiEAktoeSW
dGFCU9yoBRiPclpMBNWua4KhxSDs3YQrUhCoL9MAxjt13UWUsewwfwIt6TY0
tOoiaeBPxUnDoqkEabbKhKo5Vd1tZs5KcVPtLphq3m0UYSDgMdKoDkV3qORP
iVO+HLbauKBDEwF4qOUF37oUEoA/ERjtIA385JEJ1YD2smaqeFRzEAm0E4kv
U3OBML6oE30HkYIOA20A8lIS1RVAaO9MLXQaDwBdRiFDP9CAqkEg4isa1MEJ
/tDI9e/803MxcXfdO/v/nDpzCNIoqoeZwWzzD75fzytEOjzU9+/dlxwfB0PC
pLjY4vw8MvbHSQNgZBDPdA4Zp84VU4CjjxIe5ALIGpA4IEuJFAXDWDU+MRoc
jAhNYyyDC9L4K7OA+HgP7cCQOUg6VpxELWxUWIGqSjWGB0TCExvEkNi6gZXK
dl7RUYFCVYMuuiQ3yB82fw7kJkLeBKiFh1oboEHQtgJ1AN8SVU7JwlacaWKF
TehJMqoYHU0nY/McJaDPIgT9E2N8dC7lGpziF0QQ5UQu87MZqHqcgscteFy0
g1NLTXUrIIYkfr6A9gzNBcJNN7q2EW+GIQAAegf/BFo4BBkDYB4j8gq32w/b
1yMTWSzQNLQWGq0vPvyso1Wjmrs5ZWrYAJ6ALUGPGDl467usiu5XX/z9vKT4
uYlxjzz8YEVVpUKlkEslmLuo9CcGkg5qTGZAjCvd20zQFtSIUNhoDghC5nJQ
4iFJaT5AH9KCmmJs0CHTYqRSlD6kZyq0T1KFS8xTj2bYEhCGjgrWhWSsuUDH
cLkFB1X9ROHCJxB2SU5q1ErwlVt1G2HS+Un3hnLpFjQVeR7CTklgCzRQL1IR
w6In5qJE7U+BahO3RGanCO+JAhlFgyFp8LOGPRStFGh7t0RIL6P4oTHQWMYa
mGKE8VsRKYYKi7Iutp1ER17MjkV7lZjEmkCtAplaC0bYLbg8YHKraJ+o1D4R
sENR457oejAePApQj5AFSIRGmkIoCTFgvEluoAR8SOPBNxe2SBNADOQPPiaA
MClap2YzNd6ge2JXIiKIjhDYAAvCDo/ArDsiGag/4fagKINf8yrqijc2VNQ1
1Wzbvblx35amg/U7DkBg89Y9jTsP79h5pH7r3q1b9+7ceaS5uWXblr01FY01
pdt21O/fv/M4+A21e3Y3Htm74+j2un3wZ9OWAwDN2w7Br0f3nzvdcvHQ7lMH
mk/s2d4CkRh/4sD51mOdB5qO79p6aH9jy6Gm47u3HIRAy65TB7Yf3Vazq3nL
we21eyEAfn1lU1Vh/abSBoDqoi3gN27aAx9CGoDdDYf2bNl3sOHQkR0tAAcb
juzevG9HdXNjZdPeuoNHth8/3nz6aNPJ/VsO79l84OC2YxA+1Hj4YMOBlqYj
p/edOnvgDED7sfPd5y53nLhw/siZswdPgt9xog0Awi07D7a3nO462dZ57FxH
y5nLx1tb9x87un3vyeaDh7Y2n959GOLZr1dOnL/eeqnj5NnO061XzrZ1t7Zf
PX+RwoXu1rb+y11jPTcBIDBw5cr4jRtD3d1XWs8BdLedv9Z+4VpHe09nR2/X
5f6rXb3Xuvp7rg719owP9TvHhj2OMcntAD0IzO5yj1HVBiauy+kaHnf0uYVh
UILgQ/hGb+fXvvG5pJQ58Yn3llfmOZxDTtcomItgCQuiU5LRfFFxlIfTBYLg
9nhcbrfT7XafOnVqQUry/fPnzUtKXJe6BiLRmgLuxV6JwwdkM4iSyZCBqAmV
mfimtAQhOQ7GPpXADkV2aUTUQAyoWycIQ1lG08NNOr4KPqQnyWRAUaMWiqEx
kXsxc1BDyPAQiTNfKHsRH2ruk74nUmQE1Cxs8oDpVpUkNowpKmcUQyLR6TlD
temIocjZTWi+TXgM/QL5Q1eUjY4GxjohBXRd8hOYQhKRDoAA/MQsRNSGTOvB
T+RD1autJHOoiLovcDRKpJYEQlkRJUPieYdLQDSZqC3wGcJuTZ9Q1HFZhfGS
h6sI+A6wHxXNRdNAeEyQ0KAbp8RhpqJoGsaCqU+JipRVyWuxEoK7qRp1Q40U
okzBJ/SRvQoXVSpRCZx2JvxHDjiIp4+3PP3Jj8FgMCU58Ze//GX/wBCkxKIB
w36Hy8MpdIaViypKD21xLBHHY2h7EONBMW1zhSaQDQsfc3NrRpvCn0AfFzUl
RY4nMYw1BW40bWcNw+C7FWO/AVpWwH5OGAtRXiVGgpk5IgxdAIrAQmWTqhAj
UDPcKapQumTSEyjskjTEFkeAWDuZG3YAnUXF8EXKDKRqtAkESg3FnLLymHRA
vmVWDbF8RIX9KmFxKsmTWfGSGc/HiMTCVogQ0DQMKxwFcIIejSKnIBOdi7ao
YuTAZiHAhCMalnwo8jOCpnGoMVA4nkEthjY2tKmCGCrG50YfVPUJSQUQfLmF
NAGYjsSCot1ZlobdLgicv9J7obsfAAJnL14/1dZ9/PSlI8cvHDh09vjJjtOn
O48ebTtxrL2t9eqF89fOnuw8tOckwLkTly6eu3r8UOvhvadOtVw4e7wDwieP
tJ0+2n7m2EX4tf1s95X2m9cvD7YcPHfq2MX21mtXOvq6LvV3tt+8dP46fHul
7Ubr8UvnjnWcPnLhUNMxgJZdJ/c1HG7ZexoyOXH4/NEDZyFDyH9X46G9TS07
tx3YXr+3aev+/c3HIPLg7hMQOLTrxOGmlpbmlqO7jh7ZeWR/w8Hmzbsbq3ds
rWhoqGxqrt27b+vh3XUHtlfv2lbRtKNm9576A5sKajcVbNxSWr9zY9Oe+uZ9
W3cfaTp45sDJI00HDjTs2bd11+Ede0/sOXxy7xEI7K7b3rJj7/HmA4cadu2r
3wF+88atdUWVW0qqKzIL6ourdtZs2VFVV1tQXp6RX5lVuCm/rLaosrqgrCK3
sCw7vzQrrzynoKqgsKaoeGNxydaq6vqK8sr8vIq83E0lxeW5OVlrVq9+c1Ha
imXZ69bmbUgryNiQl7khe8O6jHVrctLT8rMzSgpyK0uLNlaW1W2uaWyob97Z
uGv3jtrNVUXFufkFGcUlOYVFWevTVyxZ9uradUsys9fkFax/9gufmhP17pjY
e77+jS+sS1uxeMnry1csXrlqKfpp69ds2JCWlpaak5NVWlpcVlaSnr5+zZpV
qalrMjI2rFixbEHKXIDYmKhvf+vvMzPTF731xrIVS1etW52Zm7M2ff3q9evT
srJS07OWr1m3bPW6NeszcotKiyuqSyqqswuK03Py03LyIPLNlasXrVj11pq1
qzZkLF2X9sdlyxevTV2ZnvEGYLAu7YVFb/73iy//9o+vvfD6IvD/8NobkOC1
pctfemsx+Cs2pEMmqTm5GQVFBRVVpRtr12flLludumTlmrUbMlenpQOsWJv2
8utvvvTaotfeWroydX1mXiGUDr++tXzVirXrV6dnpWXmrsnIXrM+ExCA+DUZ
WaVVG8tr68qqN0G26zKy12Zmr1y3btGyZYuWrnxr+Wrw31iy4s1la15fvPLV
RcteeXP52oyCNZkFqzPyl6dlv7kq/Y9LU198c9ULb6xYnpqzIbc0Pa9ieWrW
4uUbVq7NSt1QuCYtd/W6vMXL05atykzLKFyXXrQ6NXvVmhzwFy1ekZ5TUFxR
k1tUlpFbmFdcXl6zuap2y8b6htKqTfAnQFF5dVl1beWm+urNW8sqNxWVVuUX
lQNAoLisGj7OyS9Jz8qHAPyJP0Gyypq60oqNxeWbyzZuA5N118ET+4+2Hj7Z
tvfI2T0tpw+dagd/T8vZw2fbj7Ze3n30dE3DnoLquprGHfW79uw4cGj30eMt
586f6bzS1n3tfPe1Q6fP7j95et/xk0fPXzjd0bnvxKm9x06c77raeqX71MVL
x862Q4IDx85A5N4jJ8Hffej4gZOnj5+7eLS17URrB2TScRUESNeptitn2rtb
L90413EN5El7V2/n9eGL3X1n2q91Xh/sHRGGHPKoWx/z6P1j0rXe4e7u7o62
c4v++PJ7HrwvKTH+PY889Mait86cbz9y+lzr5WsXrt0809l96My59mvXu/v7
Oq5f67wx0N0/dm3Q2dU32tbVd/LClaNnLrWcbgcf6g6yq+NKb/+wMOZUh0ak
G/0Tl7oGzl+8dv5iz5Ubw2NO3SGRcjtvDAFWl28O946Jw261Z9h9uW9kwKEQ
M0DU+8bkngH3zRHx5pDQ1TvRfXMCwmNufdSjgz8m6DBoccj6qEsfGFN6B8Su
a+NXukev3XDe6PPcGBQhpvums3dYvjkiX+11Xbw6cqFrqLWz//zlgY5rw1d6
x3rHPECBAYfUdXOs/WrflRujN0ZcA+Nyz7CT0MelQBhqd7lnpLt3FNJc7Ru7
OeAanJCcULSsQy1uDru6ro8AhSG+42r/wZbW8509l68OQR2Hxl1X+4fOtHXs
P3by0LFTLWdaz164dKHrWufVG919gzcGRoAMo04B1MGYS4SU/cPu3hH39d4J
aLWWE+3Hznacbu0Ceu7ad6Jp39G9B09D+NyFayfPX4Zw3fb9zXtPNO090bjz
yKate7c0HmjcdXTr9oNlNdubdh/bffAM/Fq//WDtlj3lG3fkF9dm5FQUlW5F
yC+qKy7bVlO7u7RyW+qGoqpNTfBJ1aYd1bVNWxr3l1VtK6moA3/bjkPbm1t2
7DoKRdRt21ddu7O8urGsqgHSb966F/4sLt9SUbMdwoWldYuXp69cm5OdXwWw
Ji3/rWXr//Dykt++8OYfF699a2X6GyvWQ89dsT5vVXrB8rTcpetyVqSDv35V
RmZ6YVF2aVl5XX3z4SNVW7f97rXXJ2Qw18FEp75smKwCndvDuVCVzfvgCpWk
G5OiCpnzlJyaJpgWDxuISl67TaHLXIpoAL9Cp+HUJZ0OJWHJmFNl86vUZNFl
lzHLCj8Zk3y0CI1pen5GlPlsUtRY/uRmSj3cBClGonXoUQyzEq0iMmekGZlD
/yFDdmIFUjJpZL7UJRulk1lT02I2rC6ZzKO46QyKiBMDdH5ZBJJ5DN/jUl0O
ADIdCsa47AVVdAOwuVBZcoNPRlTwt+DA8Z0kuyg4YGAIZp2iOcB3ugdff+PF
6Ji7QQ8uXfY6JID0uH8AAjAkJCvsdL+TJAkYoCNBAmRSXxI+/7lnkxOTkpMS
/v3ffzQ4PEC2fOjyiHNsQnAPTYwNTUxMCMK4W+wdGu3pH+4fmegfGYc/HYI8
AiNSl2dcJIEbo2OXe/uuDQ1DoLOv7/zVq5f7+2+Mj3cNDg643Zd6e1uvdF28
caPzZm/btWsXrl6DX892Xj7e3n7mUif8enVw6MrAwPXhkSG3p2/CAcm6Bwa7
+geu9PUfb7sA6fsdTkgDkeDfHBsfdLkhGfwK2bZdudrZ09vVO3D5Rt/Fqz0g
Adq7r1+8er3tSve1gaGBCSfAoMMFSPaOjXb23BxxeG4MjF3qvnnlev/QmAjS
puvmSOvlno7rQ+e7+s5dvtnW3d/RM9LRO9Z2fehsV9+Jtq5jZzsPHm9rPnCy
YdeRxt0tIIWI6DjRvnPPMQAInDjTCZbkwcPn9h48eaq141J3z+VrN8+1d548
dwGEEsiolpNnm/cd2rX/MEiq0+cvtl68fPzM+T0HWxp27mnec3BH876GHbsR
tjTsrKndCvquvKoWILegdG1aZlp6TkX1Zki2a39LdX1TdlHN2owi6OyZRdWl
mxoLq7bklm8urN5aWru9cktz4aaGlVlFLy9LXbQ2c0NxZe2uvaAKq7Y1Vjds
L91cn1FcuiY7d3VWzobC4vL6rQBZpeU55ZXwU0ltXUH1xo2AwLamyvrGourN
WcUVGYVl+YDM5m0QgD+zSypzy6rLarc27j3UdKBlU+Pu7JKNeeWbCyrrIQD4
5FfUAT4QXpNZ9PJbq5ety9nYsKdqS/PiNZkgpoorNuXl5aWuWv7UBx9fkJII
g8FPfOITK1auXZ2WsWxt+sqMnJVZBWvzSlZl5q4vLEzLywXrKDW3eENBZWZx
zfr8ilUZhUtTsyGrJWuz/vD68iWrM8E+oSZKDojEFWuyM3LKQULmldYCrM8p
W7wqAwoFwZhRWAUfLlqVviQ1G8QjWDi/eOH137y65LXlaUtSc15flg6wIq1w
bWbZmozS9blV+eVbq+r3lNc2F1dvzyvbklVUC5HLUvNfW7rhlUVpq1OL84u2
ZORtevXN9c//z6Jf/37JC6+t/a/fL3n1rQ0r00rW523MKq4Hf3VG+erM0qKa
hrLNOyrrd5bXNRXXbMspq80qrskoqn5rdcZLb61+ZfGa5evz0gsqoY7gA902
5FesTMsDwf7SGysXLV8PDZ1ZUJVTvDG/bHP5pu2/+t1rK9blQtVeeXP1T57/
/Q//479efH3JS4sWvwBW4qLFbyxftQTs1dT1qzZkrsvOA8tw8erU15auWLk+
o7CyprJua0l1XUn1luKqrZDh6g0FUFBuyabq+maAkuptNVt2bdq2BwJAUjDz
IXLXwVO5xbX5pVtyijan51aDX1zZCP7KdYVZBZtKqrYXlm/bkFOVllWRXVgL
f1Zt3l239VDDjmPNe87s3nfuyLHOtot959t7Dx65cPrcteu9js7uoa7ro72D
nraOG0dPXoS+c7btWvulgcvdowCQ+OSZ7iPHOg61tJ893wN/gn/81JUzrdcv
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
sYsWZKWkFGZnF2bnFufmL6usXr9q9c7NWxuX19eWV9aUVRTl5GSnptZWlO7Z
sbW+rrqytKggJzsjJTE/O2PjulX7dm1fv2ZlWXFeWXFORWleVXkBhPk5qWnJ
sQlx83Kz4zLSFybGfRIT/X7U/L9HLfzH4kXvL1n8fmLcRzHR/4xe+PfYJe8n
JXyUlPhxStInGakLinNSKgpy68qKl1eXL6spX15bsXJ5dUNDTXkJ5JaYmrQk
LzultqJoeWVxXnrikgUfR3/2r5j5/1q84IPFUR+CXxrzSUrCguzM2PTkRaWF
qWVFadXl2ZvW1dWUZX303l8efXD2rFmRAYFTJk/5n8ipIcFBvt5eN06eNMHL
e2JAoI+P35SIqeG/fPXlvOL80ury8trKhrWr6htWVlRUZGVlJWKXnp6el5dT
VFSQmAD1Sk1PS3nn7TenRoaHBAfOvHnG0qVL3//Pp+/Pm/fef+a++cEHr731
9u/ffvutf33wr/nzFyUmzY2N/Thq0YdRUZ8tiZ0fHw/hRwuj5s6P/ujT+XMX
LvksOm5hbEpscvZzL/5isneAf0DI9Ok3xcTExMXFRUVFJyWnZmblFZdU5OcV
l5ZU1tXWr6xf3bhqHfKr169es6G2rr66Znl5dV1RWWVOQXF6dl5GTn52flFZ
VXVRWXluYVF2fgH4rLz8jJzclKyskqqq6hUrVqxevWzN6trGVfXr123avWvv
58fW79yRXV48P25xfHZ6QXV5QU1FcW1N8bLa9MICCHPLy7LLS2saV5XVL88q
KS2qq8mrrapc29i4c9vaPTtX7di6YsvGhu1b1uzeseXAvrU7t9dv2rBs/dq6
Navhk+pVDVWNjRWr1pesWFtavy6vemVSfnlGaW1hXWNO5Qp4U7x8TUHtqtyq
evg3v6YBolWs2li/ec+yDTtr1m6rbNxctXpz7bptyzfuXLFpV9367au27du4
79jWQye3HPx8/Z5Djdv3rtyyq3HH7nV79m878vmu46c2HzwC/67euWfTgcMb
9h2Ef/eeOvv55Vbw8ABxth0+sffz87uPnttx6DT4PcfOHznberqt/1Kv8ejF
juOXu49caN9z4uKBM81n2gcu9hjOtPdf7Ohv7hroHjAOGGi9iQNvMLB6PTM4
aDGY+QEd1Ttk1pm5PgPdOWCEsLlL39pjbO8zd/RbwHf3U72DzICe79dxgzp+
SC/09FEtbUMdXUa9EeiP1GehO00m8L00Db7LbAbfxzDgeygKQvipw2gkz8Cl
9RuQoyymQ3t3Pffdp0J9vcIC/eY8/uju/fuaujpb+wfaBoaau/v6dCadieoZ
1HcZjSSRNr0e0u+2WNoNBngY4Dh4TzIl2cFPkBGEXRZjH0t1mg0X+7rbDEMD
PNNNmeBfCHsZSw9thgjg4d8ehu6Er0xUl4Xpoblemuu2QF4U+A6jBf7tY3h4
bjdauim2l+HhzSDDDVB0v4UCjx5ousds7jQY2nU6COEZCgBF6mdZKCGEqGCU
CdoEWgDeQ0gahDQa8V1mS6fJ3G4wtukNwJh2G83g4QF8j8nSa7IM0qxRkAy8
OMRwPUZz+6CutX8QGqp9yNht5rrNQpeJh7DHIkLYrmeaB8ytQ1QvJcH7lkEL
eBgJh8+3Hm3qONHed7Kj/3RH/6n2vvNdQ+2DVLeBA3+xc+j4xY4zLb2X+01t
BqYPepaXLuvNQ6IEbQJeJ0r9rHCpb/BMR/fF3oEuM/QF06oznmztOHyh6URL
e1P/UJvedL67D95AHAh3nzi9/ehxGLrwAKO6YdvO9XsPgK9Zt7GsYXXpSphH
y0rr19es2VG7bnvd+h0NW/et2ra/cfuBTfuPr9yyBzxMmbW7Dm3afxSmzIa9
h9fuOrBl/+GNew6s3LC1bMWqsuX1y9dvXL9z96a9+1dt3rJu166dh49s2LOn
cmVD5apVDZs2rty4qXHLtoKqmoyikryKyoKq6pK62tK66pzSIqDUlfXLgKRU
Llu2fNWazTt27zv8+aGjJ0+fuXDuHPJnzpw7cuTYjh27GhvX1NYuk1eVWvaI
bJBp5Ug0LEV48hMWB4pa+RJZd8sCZI1EBTAbrYCJBFEjaobI+FJOibWYkRxb
3fuA5QCLpIgiS4ksEXqjLQOITOITvhYLfxhZ2IHl4TRlxtsfaCWPBRQcQ5uA
j+M5C3i8l4eN3mNvVWsR8W4LT4k4GjoTJ5gF1ojEp7D44k1IXi3RWGar3f1h
5f1o1ayLQEOxYbWIDkwh/hSyNkqCQRINIq/j2UHkeR38i36STCZD56EDW15+
6YeRoV7+PhO8fSYFhwYFBPjdddddc+Y8+eyzz/3pj28kJabX1tRv3bb78+Nn
uvt0/UMmM4s0D4DFhQUOcL8GjjUimQIHTKmeMg8Y9T1DA336oUGTISMvJ3x6
RFB48Ox77tpz9NC2I0cPXGw+3zN4cdAA4cnO3rNd/RcG9B0mpklnOtc9cLq7
/0LvELw509kHBPnY2Qsnz1261Nrd1DHw+dnm/cfORi9Njpw+KyAwdNasW997
772DBw/u3bv3xKmTx0+cOn3mXPPl9rbWrq7OPvDtbd3w76Wm1ouXWi5cbj3f
1HIGZtCZ8wePndh76Cj4A0ePb9ixe+223Wu27lq/Y++WvYd2HDy289DnOw5/
fvD0+SPnLoHfc/IMAAR4mFyHL1063dmx7uDe0lX1tVs2rN27q27rxpoN6yvW
ry1csXzlrh0rt2+r3bJpzZ7ddVs3V65d27h39+5zZ8BvO3l87cH99QB8O7ev
O7h/+8njW48e2XjwwPr9+yDcevjw9qNHd37++a6TJ+u3789fsTGjqjFv+Yaa
Tfs2H72w5dhFeChcuRne5y5bn127NqtmDTwU1G8qXrU5tWJZdt2q4saNVRt3
VG/aUbJ6Y3ZdQ0p5bX79muLGDZUbttVt3b18++7aLTvK120qblxXtGp93orV
mTX1yWU1sfml4OEZooGH+AUr1xY2rINvc5atgueKtVvLGjYX1K3PKFsZn1u1
JLMM/NLcqoSC2kXpJbE5lUuyKxamFkVllMQX1oJflFEUlZyzOD0/Obcsowim
fx347KKazIKq4qqGyuXrSqpXFVTWl9atzq+sTy+syipfFptZGJddHJ9TkpBb
Cj4lrxw+zC6tS82vyCyqLqpuqKxfX92wsWrlBvgqq7Q6t2ZZamVFcnlZWlVl
SkV5QkkxeHhYmJmxJD8vq642f2V9QcPK3BXL4WVKeWlubVVSYU5eeckb7/wV
GLnIqaFePlPeePfNRcmJSwvyPoxb+mlKEsTMqqlZkp0VnZG+IC0ttiAfkoIw
qax0aWHBgoz0RdlZEAf+jS8uiisqhJcQAV7OT09dkp8bnZMF/j/Jif+Mjvo0
KSGuqCC+uBB+WpiZDu9jcrPBL87LWVqYD++jc7IX5eTG5OYtyS+IzSuIyc5d
lJkNPqGoJLW8Mq2iKrG4NK6oOLm8IqWyKqm8IrGkIr6obGlBSWx+MfiYvMKF
WbmfpWXCQ0JFVVZ9Q/7qtTkNjUlVNfNycj9ISEqvWZZSUQlfJRSXg48rhC4u
XpJXNC81c0F6dnR2PiQFXZ9etTyrdmVW7YqUsoqEoiLwqeXl6ZWVEGZVVeUv
W1a6alXxypV5dXVpZWXx+fmxOTng43ILUsur4fOk0mrwiSVVcYXlMTlFCzPy
PkvJWpJXQnxCceXi3OIF6bkQfhif8s+YuLc/W/Tu/JhP4lIXZxaAn5+Q8ff/
LPpgUVxMRn5sbsm81Gz4qmj1htptOzNrlkPdM2pqS9asLVu3Pmf5iqy6ZQUN
q4pXr8lf2ZBeXQO/wpuqTZtX7t6zcte+ivVbYfxn1TZAmFxWm1Rak1hSvSir
MCqzADz8m1mzEt6nVS6HCGkV9fH5NfH5dUuyYQwvK1i+sXTVtqL6zcUrtyzb
sm/T4TN7z7ZuOXqudtOu4oYNVeu3r95zeNOR4+sOHKrfuqN09dqKNWtW7ty5
7dixnadO1W/bumLHNpi/aw/sa9y1fdPRg/vPnd518sTqbTtK6pYDFNY0rgas
3Lx3z85D+zft3rF6y8aNu7Zv37t3576DB46eOHW+6VJz10VMnVqaOzo7enu6
B4BkwfO5s5dOnjhLbLyrklKyiUDTtOhggx2eldsq7fWa8MaxxDAUlpvBwhPv
7KAPWFngzHIMRQsMUZ8TiRYNT/YyRPQrjw9H8hwjIxRHtu81uwYsR2TOIlE7
QRoUeN8EqeVQHIOE1UhOyGHEJHoX8nYPjWUbxLYYj5RAGFlCjkTlWMaHqilg
S2GCrKqKziCwNBaNyPtZZHsInR9HWiQUi5bm6Coiq0YWR7OUAUGhYCGyUyJm
QNI43gTwSmwt9vW1/ezFZ0MCvXy9JgT6Tbr/gW/932u/i4qK2rNnH1QaCm8y
omqRLVC8SScBAppZ0cSLshgBMJXn9BxrElgiewEPzzQSBAm1jSsjb542xd/7
0aceN4sCQK8evCgNCtIgJw3wkk6Q39i9H2ClAZon8i4dJRgVAcuO/Ue//egT
PgHBkVOn//bXvzEbTeSeOOgHmgGWQ+BYWRdA3tciKhACOTaAPJQfPBHRoPKL
koFD3shLJmCDITtO0vMoHIRicCKEQ7iQ0F7dNDUk8UbMQ0Dj9rLUkCAMSRCH
H8S1g58GeWFAAM4DIkj9PAd+QOAhjh7XHeID627GMUk60DdGQdRz/BDLQ2sM
cBIww5BpD4VCA0oQfUgSJIlABJ2oPEOaoux1kuyHcEtCM0Ko00QjD6QuEKJ2
5q2f6HF5UBWUb6FH8NJA0kOpWOShd4ZwqXTkV1wqKAwUu59FvQYRIL4JN6xZ
lIW0BkYWmkEjQ92hkftoHFnAxRZQC6OUBblBSC+QToGQDF+jiH5FRVV8P89D
U8ObQVHsR+ydBP+SN0OSHHlAYDt1Q7945VdTp0b4+k35yc9etPBsr8UEP/XD
r5LUIwl9qCsZPU5QrzSySe5B6FnRpGl80oYkR8gL+h31kSh0mE2QiNrv8AY6
HZdE1CkfDuIcyb8GCdeal8gAM2pbHpd/QO04xcP7XkHq5qQeHj30wOoJh33w
XkKh2vWkYcmzOjwcRwiEUAWoiJy+KJKKq+MNDTNYGAoi9IhBsn5ubQdB6ufE
IVH+imQBVeihhT7oZeJhuccKZNigAYaloHpe7neI2cuLULV+0XaQa4YxGY3k
mQxUeIZVM0SGxAd4uWwGTRvCe1LOfk6JgIerHn5lkCezT4cHHioJjx7Is14p
yQCuml6ZHUalccxKIwyK3AAPI0c046kN9dIxIngTmjgohDdADI081shRiA9a
sQhIuUZ7uNB6KIZHKjF4axWDGcfJV4BpHFGSUQFR2ZUW8X6oVXdUXqwpO9qq
cpeANStwDmSTB71ESjgcT04EcVjljTyj7UtFUwIlzfGAvAgi8a/YcBPeThI4
ijJzAALq3jA6qCGDOcCH2WxGagFy1gjaALAA2uCNehaJV07kyeewOHTzC4J1
cl+M9ZwFAkdUWXJ/n0T20Xjl7DoHaMiytHVnXOCxmpl1U5goltA0Kq3RqL98
+ZKfr/fkSTfeNfuOv//trX37d5oonYU2cminCyuss7KeDkUhEDTTgrwFjGEO
GBTtipyooNC8YKKhtyW92bRt187Z37zLy8f7O09/F7AcwMiCDr2LqoRc1VVg
tXqUyjNNdmcEmR5Crdp6dX/4y1t+QaEBgcFPPD5n397dZB+d7BKSUUT2oRhW
JFrFHK/u6yl7HMpuF9mbgwIzgo1RUbLdQ3Z/KA3cy9sxQK4ZHu0L8HKCaJuA
FSkWpUm0kskbOT7WC1c1YlBlccHUrUyZuSKtJ4pqGZTNBRHYF9LU6r/Eo+w0
m3fyv6LIKdWUo6n1whHIZNR6OTKPe4e3qq9CG2q1Sq1akGhPWoJ+lFkL/BWr
bIfJW5CY95B3ZtWdJo2kR9k7U7yyB4fanLfqJuCMeHljV6mmg8lIeZOL1AIi
mFn0MGCmIK/TZ86FBgbdPm164I2TKnILJayfgHoQF0DHCWQrB+qutiFpFtKw
ZBsRvPpStU1m4STtSCYtTPE2/2oTZMm2kWJThsU7UMh6Gi+fQKPxfiX5Cn2i
DGOOV6x14HbQzh1115KSrBkxmrOxnKYY2qZTd+u0Y0PlGFUZG1EtI1mjvsCj
zu64DpmnZOyxDu85RTMEOFUOU3TE/POiqrfGKjuPpD1RpThJHQPaBEmbWzj5
JcVb2x+eTYxg4ay9o215edjgzWhSL7QZqtVSxFoKRCtX8YoYkrSMplVVGoWK
zcMU44jJFO3ernou1TqXBWUHlpdVIIkaA6FXqkoagR6y1tMqz8C/ZGFI9EVV
HRuO4yQ7vSbFE50xtEpTdJlk/TFV3xjrw2FsEtUVqNUaHFnkSZKKHSrGaY+R
kCWqejAWQxs+YszLB3/IHqjmQ56ouyqYKJFTbDZK2VidSzYFg47gsVgVE2ve
CjIEK2ArKacAiN0DApqqEhTW9yPrX/UTERcPv2DRmTypo7N71i23+fkH3nzz
rOeff37Hzs00O4TGr2hBxxxwrSkK1p4SWUwjdIP/sXYbJTDE5IjWNABRiyOq
aRB/247t06dP9/X1ffDBBzXqwfL5ayWUdTuJahlhIUSsjWphEfSYeCsowDhf
GBMbHBIWEBBw803T5332iUE/AOPXgizPCKqaqNpEkqKoqBJw3ubQjM2JQmKH
RGslFR+cV08TCZjxUcYGLjDWQJPI2pkMaVW7g4QkDhlKNvqcKjBzkqyWhkcE
jBqktKPRU5VPJ2n05FUL2GoDqk7VqbZTuiaHnoi8hQx1MlbtnLb1UGRZpRaL
Jjik+YrBG+u1alQQyRzhZM1+VftVPtGmMoREa5IoBbEyiRAVC+Y25IjHmuey
fojAq9qmdpyD2ubaLpA1ddUzIoLw3t/+HurjH+Hj9+Q99188dlImZKKMy7Qg
I77KRKkpk9TUN1r9KzUjlA6Djp2rzLxdNC2fr9bCaq1CoU7WIzsKUyQ6UjZF
t1NWPxatrDdpYS0RkxRdTRlvJM3JXIkQW0mjOGydLYJMim2yJtqh9odzFbKM
87J5IORRJOdeWExm1V7UHDPBLL1AtN1IGcjiSO1E0vikl+U7ZZS2Va9asx3/
ZOiKkkNTkHbgiSgPK46SRicq3TbArhr5l6zDwNqnCr2ypauo/IxyZlLlMbRH
GVS+QsAn2gWNkQS78TxWztnhRxVDHSb/WKRsl4970bSlGj59l9ZsbI9tOi2J
nCymmvIJWVjYkiEKRGnz9h1zvvM974Dg4PCw+x+4u7q68NKFo7SlR5KMjLlX
Yk0cbUQEGA9kmoHVk4ThCW15CpLzwqNWxpzGtm1bbr55RnBw4PTpUw0GneYm
ejI/BadVtiaIl0hkjAAzKeJDXqdPn37qqaemT4sMCfb/1f/+tOnCaR5BNs1z
FqywbmNVRhLsE9Rqf9mUXoObrrzno8Uq5LezvuI6A8Ex1IwBG7u+npdoVE5p
F8f2tHOKjQRrWzn27DDNa2UIbcezZJ+abdk0hyaUB8wEYkYChsfdd95209Tw
YF/fRZ99ZtYbWJoTbA/2iUrKI7eEPdfhPM7wnzt61x8MNwod28dTpx2f2jeu
Qk9SdlYwR3MBbpXQ5b9OM3XHOfvKiUlt9+srJ6UOYNuTuOqksBm5LupiBx+e
luGLce439ZV1ypilbcVBIibGSISttCAopDjWYKH2Hjr6xjt/D58xA+nJBHv/
7CffS09edO7Ebs7cI4kmibfwtBmYOgu2xKj0LM9wtKvCKwteYd++PXfeebu/
vy/goE436Nr6ivMGQcDHyWt2eS0jSvoh3Wu//93kSRNmTo/81l23rV+zQmCN
EmfAy1iGWE+1t2ikOdGkhcLxdtrqOO1uj9Jx0rtfuBs+X8dfR1dal+PBBYES
tetE3Ndo652jOFq/NHrezBkRvl43PvLwg9u2bkbCDPWAtWJrS05CHHlEOJTH
SaVGbJ+x6scrHwbD99eVlNPTceJmzBE/HL78TisyJvUdsdgjxhmxPKMuzHg4
N9vZIzd+6StmI6xSWRWJ8OajvGEJpOHMxcu5hUWPPv5YcFCAz5QbwoN8nn/m
iZiFH144c8Q01IOUVDGOWGgzJ9CD+l5eMoloN4B3WniOI2I94ciRQw88cJ+v
r/ftt99K05ZR4CCSEmOJjyx4wbRu/bo106eFhwb6BQd4L10832Lsp839WAvI
yXpQa6hKUojlVwsHryo3TBWGGc+eZuF8PLhIjVeNGLAcEXPx6I5mjrEM/f63
L0+LCA7y9/rz638cHOjjODSWruGgNgV3SuhpRsN/6H5qTgeAR1mPWJExqe+I
xR4xzriWZ8ydO43sqRu/9F3hIGKYeZZi0PqOnAQHEgALw/MXL6xqXPHqK/8b
FuwzLcI/ItTnsYfufu13v6quKhsa7KdpmuUZM2VCWyK8kRMpVzhIFoOQxdGj
hx999GEfH6/77ruHqCd5ioPa1pGVfgXRZNT/7KcvTrnx+vAQ/1d/9ZJJ3yty
WDSKrnaysVDkCgftUh4np62O0+7+mjlX43l06YzkNGIlpUfJpo9ih4feuG7l
44/cB4MkIjw4NyeLZWDEimjX/muKg54m5aq/rrycw3/lfmqOFXTnw5GHjnuR
3Smhm8UeMc64lmfM3YgtPAo3fumr+zWq0VeCREgfFctFgW+mGc5EM62dXYPG
oe6+1rPnDx8/uec/c/9+5+ypN90cOD0yYOrUoKBA35umz5g6dfqH//60u6sf
CI7JZJEc+ldTI7QYZFn6+PFjTzzxuLf3lLvvvgvbbHGCg4Jgf1+SmqDgoMlB
DChxLJ2SnBgc5Dd9Wtjs22ceP7oPmV5jzTxeD9hoaGh0D754p62O0+7+mjlX
43l06ThzklMv6z8Q69/4ZBRAYXtb05//+Bt/nxvDQgMefuj+c2dPk/1xkWiL
2eKgaifZowo6rdow9XVZq1E5x889TdBVf115OV3F9zQ1pxV08ys3KzIm9R2x
2CPGGbE8oy7GGNZrxJSvxI1f+q5wULbSyiMpotFkyS8oeukXv3z2uWd+8MMn
pt0c4B98Q3DopLAIrxk3BwWFTAkMnBISHDhl0uTrr7/hh8/+uKW5w2xiyO0s
rgpPlpwAfGfOnHryyTleXpNvuml6b2+3Iw5qNGecNIiKg1ZAxOs7wMHPjx0J
Cw2OjAgJDw745MP3kC42bbyGg2PrPC2tq/E86sQdRrRzHCTG/RQb3TAEKBgP
B/bveuTBe4MCfYCLi1r4GWL80FFccsT4a46Dbqbpqr+uvJxO448iNacV1P47
zFduVmRM6jtisUeM46o8oy7DuLoRW3gUbvzSF5RbVq1qpQruSJJ8WvPixYvf
/e53r7/++inekydMvG6S7wTw/kFTQsL9IqcH33P/nbfcOuP2O2bNnn3HXbPv
iImOGhzoI2s9R40Fa74Y7IDynDt3Zs6cx/z8fKZNi3TEQc29RS4bxDZZgWhr
A9Hr7el68Nv3w5IwIjz43ntmd3Y041MGPLlWXEPl5PWCg9KdxhbwFff+8PHt
vvU00y/ReVpgx/iuUnAzZceWdr4elJUPBUXvnWEZU0Z6UkR4EHBKs++89fiJ
I9ikBhrwWNtf0t7RJV3DwZFKeOUjwf1fh4k5/L9u1sKjKo+uHRzL6X4jeNTO
X5YbRaN51Kpjm/IwOEhWWEATOjo6Xn31VS8vrwkT/uf+b9/z69+/mpGbnl+S
17B25brNazZt37Bxy9qdu7bu279rw/rV7W2XiWEcdI2UxA2zPwgeyM7p0ycf
eeShkJCgW26ZSVFmuwv73MFB7VE46xlSQRzo6//ko4+DAv0D/H2B4a+tqWBo
ZFvmGg6OofO0zI6RnX7ufrKO7ewMB4lJKN5i1mNzFsheU3Pz2R8++3RggI+3
z6Q3/vonbGpJIJYr8JLw64+D7jevOyX0tJzDf+h+ak4r6JjL8LkPX5ERI4+i
HRzLOWKc4SOPznnaa56mPGL7uNluo25nd0srq4nYHMviRVn9kmEYHInvaG89
ferEiROfd/W0t3a1GGmTBRlR5SyChcEXPogSa7boZMOnPEVZ9GjxJbhcEqrG
B06dOvH444+GhgYHBweqOKiVi2rOgzutvj1aiYp2BEVR+/fue+jBB3x9vMLD
Qv7w2v9BTFIjGjtJOVlsn5jcJJ7h4PiNqK+TG/fxLNr/K6ePDADqyWKQCEWj
o+cGBnj7+k0JCwvZt28PNqAkacwIOCnYF9C/7rfGtfF2NbuvSu+MXzldzXS7
HN2kA+NON1zgoEoQzGYjUS2gKXTVjIXSN7WcP3Li0NY9W3cc2rXz8O5Dp480
tV3SmwaIFRZ0VyC+Pk02CueMmGDHE22cY8eOPPbYIz4+XhERYUNDA6PDQduG
RZ5ov/d297z11zfDQkIjI8Ie/Pb9AOV2xn8kxaSG2hwyDnq+HvyqjPwv1437
eHZyqhqnL3c6R1NGwMHOjuY777w5IjLYP9DnT3/+48BAn6qTTOTqTgv2BfSv
+61xbbxdze6r0jvjV05XM90uRzfpwHjTDc36R7BbD2IbrdgcHEtbzHqJZ2CV
l5wc86tXXrj59siAqf6z7rnVJ9w/bGbES6+8tHhJ1J7d2y36QYRA2MKa0UCJ
CiFyrJGqigM4+MQTj/v5+dx1152jXg/aNqws8+Sx1bn4+PiQkJDQ0NCZM2eW
lRZzrAUoochS6BAZuf7VvsHVAl/DwbF34z2etalp0ydXAyPz91gump6W6Oc3
MSw8cNatM1esahDxLX7EKLF607djwb6A/nW/Na6Nt6vZfVV6Z/zK6Wqm2+Xo
Jh0Yb7rhIAq04iCLjlGx2N64bOIxMy0xLMwnKGSKT9Dk6yZeN8Fv4jd8J143
ecIN3jfccOM3fvLjZ5dXlLEGHbotVZQYWhBElziowhzg4COPPBQcHHj//fc6
PT84Ig7aiV4JDkrY6imEO3bsuu++ByIjI6dOnfrTn7zQ1X5Zth6KLrtnpeGM
QV3DwbF34z2enSaOdrpFYk8e2ZC5dPHMY49+e9rU0MAgn9f/8qeLzZfJ/euk
GMR0v9OCfQH9635rXBtvV7P7qvTO+JXT1Uy3y9FNOjDedMPWSi/WKMA4SACR
pi0iPnQMbPLBfTsf+fZ9QX7e/n4+P//FSwlpafmVVfPj459/6eeT/bxunPiN
iROue+qRe9fWV7HmIWxMneNFxikxwW8EYlrt4MH9d9xxm7+/76xZNxPYHR0O
itZVgGwFnRgr7unp+/Wvf+vnFxAcHHrbrbOqy4pExihxZnzzNlKkFxWNIEmy
OzxxDQfH3o33eHZqe4HgILqejLUAFBbkZ8+8eWpQoM9jjz+0e+8eM0MOVMj7
AvJVNYITw7PC+B+tcb81ro23q9l9VXpn/Mrpaqbb5egmHRhvuuEKB4kNf6xG
LtCUkaFNH33wj/DggAAf7w8/+HdLa7uFE/Wc0Geh+82mQZMhPi7m9plTb7zu
ur+98bvBrssSb2Y5syhxro9OyPdMHTiw79ZbZ/n6eoeHhzq1qzY6HMSWQ5Cd
fwgPHz56zz33TZs2AxD87b+8pu9tFSyDEmvCKj20UnH8rS0OuqMfaFevUXbC
f40b7/HsiIPyURpsx49lzDCS//rGn2ZMj/D3m/LXN1+HZSAjEOOBWHdaUK43
vYaD19wVuK9K74xfOV3NdLsc3aQD4003XOEgEhMh9TkWsAm4aPC/+fXLIYE+
d98xc1V9LQAcYJ8F35+lZxlaZIcGe5/7/pMBUyb85pc/7WlpkjiaXKriWFqF
Osl38Rw+fJDYF42MDDebjWOAg/jqEySVxSy+2cR09wzcOftb/gFBEeGhP3r2
ybaLxyXehC4gloiRSawcKzqenBAETyyMflVG/tg6T8fneI9nkdw/pVzHabUT
iJk7mjJv27r5kYcf8Jpy4/RpYZlZqdDBJnTrD7rBUN0RQO4rjoPj387jTZfG
17kq/1jVy9OvPM5XdAjdieMYkkE+fGp2v7ryTlN2FbqouMvqutc+tv87uZfH
ZSgqoWjNjlz1RbMMQStYNB05vP+ZH3wnOMj3lpsjMlITjKYhiqctPI/vfkX3
8bW3t951+y1hgb7/9+qv2i43SbhpGdbJ7T/kDbGzDTh75MihJ5+cM2XKpKlT
I/r7ez3FQbuXonJZoYQVQZFtN1GyUNxvf/eH4JCIgICAmdNCt66r50y96GZX
dG88q+KgLRTKp8dc9YurnnI//tfDeTp/RVG+L8nuFrDhsnAIhy2PMxwU0UWR
HEvrdYP/+td7QUEBgUG+Dz50X3PrZXSSUBTJjYci1pbBF3M60Re9hoNfZPrj
7VyVf6zq5elXHuc7DB5dJd7uCi1bL9peCDjszYC4HWy/VZ3d55w1HV57K6sa
yhalbEP8Ey41AUFeIBdQiqJ8ml4gSpc8Vb+y7pt33T5p4vVhYSF33333O+/8
raysormpxWy0GPWmI0eOvfvuu+Hh4f6BAfMWzDeYjACfZobFKYvW9aamcURs
2gyI0+mTp37w/aeDAv1DggMN+iF8/TujkjJJ4hwlXXYtpHjiZNKnajtAaDLS
hw4ei4yY4ecXEODv++5bfxZ5nSQZBW4QXXKOLy8mltbwHRMcvvebH34Uuzt/
RhzP9hepjuDHLt8R3DilLyq3Otrdl+t0UmjHNmc3zl1MPizSJzdTCzBuOXRU
kGM5M4QWynD48MHZ37wzKCTwum9cN39RFI0PuKo3OKv3ooqS5s5o0ZFHGgsi
4WLWe5aK0qTDZDFMW7mdg2f96+C1regscU9KQ8acY03Hqvxj4EbI3rP57tIP
X9UrHJ1jks6wICiOEQ7apcNZnx1vanC4a0/xkAi6vI/UWJmDSC+GY/At54KZ
MhlMQ+jUFWNKT0u6447bfP0CbrhxSmBAKADXtLCpU0Mjb595W0RYpH9A0EQv
74fmzKlfswZoCyUIDAFVFzio5nXy+ImnnnjSz9cboFBeDyLtGhnBFbGnKxy0
TnUFCjEOyne1CzRNkxmiGzL98n9fDQmOCAoKmfPEI11dF0R+QJL0kqCXkJlT
JETFOChgHMS3vwvDTSQ3YcINvLhKcdDNOnqc5qhwkBsWByVNSJLiRSx1l8gd
4izHW3iBGtL1vvDCj0LCgm+cNPHxp57s6hs0MWiUM/jyeU6yvR/c8R7eMfWu
pvxoumnYXL5gHHQojzAyDnqUuNJG2lC+Mcfh/ZfjRq6hJ/I6F6H2rvDx8QLW
NHTuncGbfQqcZuba+WEgb/hVpFM81TpV1uTqIxfoi/rKTFlI9yDRkcUsKTci
CZg8AC4wnEUQaZYxnTl74o2333ry6e/detsdgYHBIUGhAX6BYSHhPj5+YeGR
v/r1b7bs2sWRDRdMUkTJ8dCE1XPI4LV44sSJOXPmBAQEREREDA4OIpUGkSOA
rhoAt/cO9VISF+0Mk1osFpZFhwQtZjZuaXJY6LTg4NCw8KD09KW8MCTyQ0g6
KmEjWh7i4Jfl3MGmK6SrTvMaq/JLLiiV08I78orq9BkmRTIMsGKMbD2G5yww
etMzkqZMmRQBTFtkZOOa1RDdwgo8GuWCqiBtRY2xa0YX/IxTvpQXPaA8yI/E
NdlsLihU1BM3etTUlkTlMuyLoWClm6FCT2wxT3S6w3X1Td4xdMOgjFPvKQ5y
HuKgsxSGK49LeuUJDg6zLBgFDhLdAGSNH9dSRPBh4gWaE2gDpTezJlawMLwZ
mGpYFQJBOXT8eFXdspjFse+//8Frr/0R/G9/9/uMnNyegUEzx1F4T9HC87Ae
FB22VFQQJM/gzp+/+L3vfQ9I08yZMwEHeQei5D4OShooJJquylvkjx099ewz
PwYcDA4OfOSRb7W0nGIotEuIDlaLcu+KCg6ipYQgXoVTaRjIcz6uxii7MSm8
Oxl5Vi9n1BifghFkHBRZQEBJZDo7mp+Y80h4WIi395TXX3+9o6ODx5JvMt7U
Iaem7CS7Ua5hXMm1nOMg4cMdvSty5IYA4QvEQWv7OAVBzrYFSPIuia3z+jpd
nA+zYv+aOndkido4nqbvKcflJAVPZ7TbkOdOTFsZ6cjSV7KPJmGzaSgKxxIr
akbTUG9/1+4DuwAKeYkGXOAFCnhnM0cZOJqVRJrnYCHZPzgwqBvSGfQMsN0c
SmvIbCaK6CwngLcboWphgQ+nGQ4iHD9x6tHH5nj7+Pn6BZw5e95RHqV0g6sa
OTY+T26yQDfysixaeLJoFhkN9Hv//DAwKCQMVrBhgVlZCZJk5BmdxDP40jmS
C14fkK1Jebl/dTmPR9cYZTom6eC0XHgP+cBhSDE2EyRgIwkcspYAocAW5WXf
ctO0sKDAm2ZMKy8tQ+bWseU9bJjddvvAKU55KL4e2Xu4Hhw1DtqX32Nc87Re
2q84F94GB9HpKnf9NRyUnbINRM74SMpYsAlt4oyGnxFsQtF16HxGOy+VHDqv
lcuvcC1Fd2otyeysc8Lhct+QGJISRFIjnqYY2rJ588ZHH39kxi3TZ94+69T5
k1hvhGE5Cy8yjCRYwPOwSqRZngPPCTyDrZVBWgQBkS66mcIpC3YSC0GugbUd
Afuefvr7AE8hIWFt7Z3OcdAG+3hN6NiegqwXhBsFr01RMRDRE6Xlyxpm3XKH
f2DA9GnhL774zEBvi8gZsLorh6FQsMFBkb8KcdCVG1ccHEvn6Xz0HAfxPYPY
kgJGQAg7Wy//6hc/C/b3CQ0M+PGPnmtvbSPmcxmGUxkn0Q7yxhb+hqEhdqEM
De6GuE2Hp1FE0sF73PJaKHQztPvKORQ6IibndngNB2UnS/MUkZnzQaeN43Gn
azNzjXRq7k5/HcY76zG7emlDAe/g20sCRdftgJyTjF2pykiqBWIBqY/Dv7SF
evvttyfceMOEyTc8/+ILHX1drGwZBumO6lmzCegH4rYx7yqiG/1ILQBByYPB
YEDYClhCMzKUyJVEau0Y3NH9gDy28Hny5Mmnv/PdoKCgqRGRFouFnHrWknEt
pbLXg3VCqTiMYgwDK1dZXVDA19yjpunq6nn9z2+GhkWEh4XcdutNa1bViZxJ
RHdkoGvKiX4sYhhUHPTkHP2X674sHPR4bnlIqUaol7Ns0HoQBplAdkUEjjJV
l5fcdftt06dFhoYElZYUWUxmmkZiEN6ZiGQcG8uuag6htUZOCcto6bw4nPHA
0ZZzmNg2kRxpkUNkws+6FUp29ISE4tW0P+hG5whXHnJEs8sBHbReG8dTGNTu
9Lkcemo7u+BNhhfnaPXleNuvRME+5ERiDdNaI04LiBovYWmQ8/GgYiVvHyJ1
GEhK1q+ULHoz/Lt///7/98qv33z3neNnzwIeMNi2DAw2JOmUBMA2SmAYEWmn
swB1+CYjcmoegEzOEUgMw0nyEljlGAV0XkPA1kp5vH3D0cc/P/rkY4/6eE+J
DA1DFiB5vIjDWKl8K5/7wCHW77OGrIbPJO2EfiI6gBKW5UpyE6J7gQGyV69Z
d8edd/n5+USEB8ctiTLqegAKoYrozkTEB/Bk4UxOXn9ROOj++HfpvhI4aEPt
Jev/jqPVOptsNWTU0L4QSkhui1AZP0DDnu72v737pp+vt7+/709/8sLFixdJ
XJYTZMmDIqNQJRWuaOroQ9E+dEUHbOapym+roTPvNH2bvBR6MmJMV+XkHcpp
Rw/tW82+BQSnQ0WSnNVx2FAd09rQVa998c75aLdxHq1/XYZDgmSQpCFW7LPQ
ehZp+zl6E/ZGSTJjM5fEk59ojYdfTYJEjKLAs1lEIaV8TinPZocU5PiS/K02
C5IOpXxuVzAKU2dGQWoYVBQvMbw8zNChNfLMSxSswTj0DMmaeMnMY+KuaHez
gqzaLSu68OgZnnicKCCMSMuzCemPqyejGJwcb/ssKG8UlXFAAJblBwYNfUM6
M4uuUCInARmGA8iDcplZk9GsgwUXTRnllRTP0pTZZDL09nQxtAURIeC3kZyU
R9VA4ikBFYvH8IRAkMIHGOENfXDvrvu+eWdESGCgt7dJN4C0YABpeXJpODrC
j7Z4JLzXA/HRstSCYZu8JDrvDMejnmE5I+kK3AMoFESkMI89jZaHHDMwqPvL
G2/6+flFhIc+NefhU8cPSiIl8WZIFunE8gzRGsJWVVktDrqCGO2zdiUrYote
2mj4lnNHOLMZ4dbznmRta/tMxLxqgtYklIxEja1U9eYstZDa8ricyA7RBMU5
rz4hj3gQEG0T9Y36LGhkM4JkT8cE2cwrEk8LGsU2pOMiCjQvqBRYEGU6bM8D
C9ZVArGDBAwb2S1gGOrgwf2PPvpwcHCgX4BvcXGxhaY4HuVCUlYpPBpwvESU
u0heSn+g96wo566WQdal1qADJ1njsHgHnLONT96weF6rFICEhCagb1mlCVTO
Fn8v4pxErNhMGp1sEJKyafFUUPh/NXfIl+JEjlfOg2jKoz6T0K60KmFQyYP1
XAmOwwo2dZe7XrC2DDk8pbabpnNxFhKyfGgFdN4e7uENYtSVl0S1iZPkllTz
JW8gL7X8Vr7ChbOaFHY9f7WzwClXKYrK2kYzF0TNAJZngWzhVlKGBjkfzSjc
O6boMimDB1r7RhtH++0/50d9GBP77+glH0TFfLx46dwl8Z/GLP0kOnZBfPKi
pLQlaVlLs/MS8goT8osSC4rBp5WUR6dlRienJ8KbnIK5cYnzliZCnMySioyy
yvyqupL6VZUNayAsrFmeW12XXlqWXl6eXVmVXV0Nz8mFRWklpTlV1bkVVfAy
v6qmoG5ZUe2y3Ooa8qagGp7rcsqrU4vL4rPyFqVmRCWmzk9MgRyXZOakFpRk
VVRDLhAnt6Imu6wqJbswI7c4r7iypHJZUXltTmE5/JuZV5KZU5yeVUh8Snpe
fFJmQnJWUnpufFpObGpWQnpuak5RRn5pTnFlYVlNfklVYkp2clpubm5pWVld
dfXK+vp1a9duXbdme1FeTUleTWXxioa6DRsad2xas2vj6p3gt6zZ3VCzvra0
YUXlmrUrtqxZvhkeqouXL69qWLV8deOKNbUVy4pyS/JziqsqahtWrV23aeu2
XXurltU3rt9UXbP8d7/9w+OPPvnIQ48CSfnO00889PD9cx5/+Kc/fu5Hz37/
lV/+789ffOGF53748EPfnvP4oy+/9PPa8sqTB4+cOXSs8+KlS6dOdDRf6uts
625r7mi+2N12abCnzTDQpe/vhIdzJ49VlRY+dN+3gny9poUF79m+5dK50+Db
my8N9HT2dbV3tDR1tV/WD/ZwtJGx6GnzIHjGMsTRep4xCKyRYfS8YOZ4E3ij
uZcTDLxoZDgdYCJ4+EmUuQ80wBjOAtSvqm7ZrFtuCwwMDPLzhiUhZeqTBJMg
GMmqmNy9iIS9AkA8I8obh/JLgmXESQq6qeZHWOzs5gv8S1GUCijamYiUebDw
FmBaa0CAXGFMsJs8wE/yA5LfohuCICN8bToqmLokJ8WDf9HyHBnt4VQIs82X
w5eJIEdikp+I0hR5qWbhiImkssg+LMsS+FMpgIBNdJJDqeobZMMTqUQhqQLN
MuRZVdFEl0AIvKrajaUNHHgGcWQy4YXkLCwHnhz0g5aCtmA10hiMCCKLzYOy
WKFYb9QRkCwoyAsODQoJC777nm9eutyk0mHZGhLGCAsrMIJMvuDBRHM0b0+3
MXQqjKiIojGC/IBQRrK+IS85hbklYKGyuxZGZPGvtCCZWdHCIWaYFmQuV11h
IcLOSjSn4JEoh4yocLKiFZUYzDkjrlOBG/gX5SLKIfmW5myKZOfhc4iAVAHU
1IAHFtD8UUk2YyuCsbaPqCQrIKBXKwstBuObmOuBRAyUfKKKkeRao6JyotnC
kjMsKnYTboEgMrDheMdGg7/KioCMBFUtAR5MNAN8OzyQX0UNC0rwCIY0uYOb
OHX+Og5ydSqpOKjSAXVO8TDmOJ68J/oS6BgOyprnVSaQOI5nGQpPbQrz7bhm
nJk8Qz3gX/ITPONqUaK8+iG1JPw8RWI2D+q7zHS3hekx0X0WdsDC9Rpp8PAw
SPE6RoSl4iAj9NJcD8VCND0vQTQUgeYhTqfe3KUzw5tuvaXLYOkzMfAevoKw
38yi90Zzl9nSTzF9DNtjsnToDF0G0wDN9lsgO3qQZnWcoOeEQYYboBiINkTD
s6CmAKVC5TEzPQYKQigSlAd+hTiQO2TXb0R+yMIbGBgVwpCJHTQyOjMHHp7B
owcD0z9kAQ8/6WkRkh2ElxaehHp4MDI9g6buAWPfoHlAR/UOmMD395t6e/SX
L3Y1nW1vPt/Z3To40GHoa9N1NvW1XejuaRmEZ3jT3TzQdKLl1IGzpw+eu3Ci
6dzJC+fPNF06e/nM8XPHDh4/tP/Y8aOnT5+5+PnJc9v3HNi8Y8+RE2dilyaF
BEcG+IYEePv7+/mEhvhPj4TnSdPCguBvgPdkABQ/r0mRoUFeE28MCwpMjY/f
sLJh86rGfVu2blnTuHXD2k1rG1cCXJcVLasqWd+4fOfWNTu2rAZfXpTzj7ff
AAQM9vO+7ebpAMPLq8uz05KWRi9Ijlucl5lakp9dU17cuKJ2ZV0FfFtRnFuY
k5adlpCeFJsSH5MYtyg9fWleQWp+YVpOXnJSSgyEuXlp2Tkp0TGfgY9ZPG9p
XFRCYgz42KWLFsUsiI5d8vHcz2bcNNPHxy8iJPiuO2bN+/S94sLUnJyEgoKM
4uLCgoKirKyc7OzcvNzsrMzU2NjFS5bELF4cHROzCDw8wL/wMisrIzs7MyMj
LTk5MSEhLj5+KbyMjo5asGBebm52XV1NSUlRYmL80qVLUlOT4U1cXCxJCh4g
PoSQWlTUgozMlMyslOyctJzc9Lz8zPyCLOLhZUZmcmpaQnJKXGJSbFw8Kv/i
JVEpKUnJkCUkjV0idvCQlpa2dOnSpKSk1FQoM2SRkJ6eDuH7778fExOTkZEB
X3322WcffPDBvHnzEnAJkrCDb1NSUrKzsyE+fDhvwfyYJYvjEuKjF8d8Ovc/
H33yMTykZ2YUl5ZAuDQ+LjE5KTc/r7C4KC0jHWImJCUmp6bAc0ZWJkRISUuN
T0yIjVsaFb0IPgS/IGrhfz6bC0lByvASUoDE45OTElKSE1NTwMMD/BuXkpSQ
lhKfmrwkMT4qdvGCpYtjkuLj0lPyS0uzCwuTMjJi4uMXLlmyYPHiuVFRH86d
Ow/aGtUzMSktPTUzKy0rm/i5C+ZnQO/l5y2MiV4SH5ecnnbPfff6o4vnfW6b
fWdcUiLklZGTm5GXtzQ5OQl6OK8wPacAfE5haVF5NXh4SM2CMZSfmVcE7xPT
slIyc3NKyuGnvOJy8lMGDEMcv6x6WWlVXXFFTVZ+cXZBSUFpJfwLL+FNfkkF
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
HkI2QSJomZxQlGUgQyBzuWQFQog7iBpXEzR2Q4/MADN0KbpDJaFTMwTKH4sa
CSGO6RBCHH8FAnfw4P777/tKYkLM1+6/97XXtoKARpS9MqFTSOlg4CSi/VXz
CvJnzJoZHx/7u9//+vz5nsHBfmLPHxCZLBE8qJPSVHLeUnfJhCZC6MuXE+JL
t0glooEznE6huro6IiIsPDw0KyuDXHlWzU1iKwQWU5h8I5GLGBTYmuCfRB5J
o5pClUY8Zj7XJ1ARG8gYcikq5ZFcLn3F8vW3fu7zUZHhM6fFNteXyfZ+Qxgz
XA4g/OSgqMTP36hIUX3XRSA9P10dmF/ianALeGNIU4nju+gUyrFY9OrAuZBB
JqiDXRAh5A/1FJaQqUAtIRAjckNknIFu8wjd4DBDByFeqkCJoDukiX7SiUyn
WEB1A1JVKyqj9WdGRIkiFyaUPHLs+M6HH34wPjEsJjbiN7/5bXt7t0L30e2C
SJlfu2Xvnu/m+9Kp948OuhUFl0wHvfaJfHlgj30l3cLXmek+/yL8p8e8skzL
ixK4QHTQXyLfj5P9UTG/4cTAS+9toXom7TMcbiApEvIAHkpXT0AtPQ0lulrI
XqFKVzgAX01+AKm5v0cxH9XyMKeuHHwPZXNOlfOuGBEtrDDN8Fx6eVJBQ2p5
S3Jpc1JhfVJhLcCCgpo5OWXJpfX5javKV2wqX7khv2lFclnt3JyS55Iy0nLL
y6paSmuW5hbWLEwvXJiSD2FGTvnizOKk5LwXkjLnLMicuzhncVphSnbpgsW5
6XkVhaWNGfmV8xflzlmUnVNQU920OrewFsrJzK0sKG8sq1oKYXF5c1ntsvK6
5fkVjfBaUNmUW1IHIXwIUhak5i9IL1iUUbQ4uySrsDqvvAHCRVnFLybnzEvL
X5RdmpJXnpJXsSi7ZH564ZyU3MU5ZRlF1bnljbnlDZnFtemFVVkldfAvqFJS
WsH8RTnzU/JSM0ugbpm5FZA4NykLWlFU1li7ZG159dLUnLL07LLCiobiqoai
mrqSmvrS+saqppbqlmU1S5ZVLVkK8bKGpuLqusLqWgjh14qG5srG5r8+/UzC
jOlBIcG33XH7U0//vaikODc/r7K6qqAgLylpfkrKYgjz83Pz8nK+9a1vAjmI
j4t58FvfzM3Jmjf3xbzc7MrK8ry8vNT0tGeffy4tK7OorHxxRkZBaUV2QXFq
bn553ZLa+tWNTZs3bd61avWbDY2bKipXpWdUZefUlRS3ZGVWPvW3Bfd+5dtR
kbNDQxP/83s/rapYWlG8orZiXVXp6oLsRoDKkpU15WvKCpcBVJetbKhe11S7
AcK6yjX1VWubqlctq1lZX1xbm1+ztLJ5Ze2ylorGpqIagBWVzTX5FavqljWV
1tcX1SyrbqktrF3fvOallnVblm14fdVL72x4bffLb+3Z8s7Ol97avunNdza+
8dqqlzcvWbehcTWEL6/YtGXVS6+seqk8t+Lrdz8QFxw+Kyrqnls+W52T/tqK
ZdtWrX5t6aoNtUs3N63dtu7VNQ3LXl6zft2yJa9uXPf6xk1vv7R116tv7nvz
HQCIvLV5y+vrN+9+bdubG1/esno9hJB+Ys+B9oNHTx86MnS209bbO97TM9DR
cb6t7ezRo8d37z349vaBjs5zx04eenvPjlfe3PfGjtY9h1v3HN3/5s4jO/Yc
A/5v936A1r37zxw51n/6zHjPeWFwsLu1tf3QgXPHj3YcOXRo+9vHdm/vOXW8
8+TBzvaDbUd3d7Tu7es+2XPu2OmT+7vOHBka6OjtPtHTc3JwqGN8vMfp6oOw
r79t3NZpd3QDQMRm73E4e8Zt3YND7Q7nefp6XpKHgB4J4oDD0UcEZHFMEEZH
hvt6ezvO954bHOyCuN0+OD42CKHdNjwy0js8dB7CocHevvOdnadP9nWdGe7r
HunvGezrAhgf6XfZRxz2EadjVJTswOWN24b6B7qHx/ohDoWMDnWNDncM9B/b
d+Dlvz/z2PRZoUAHb7v95o2bNwyPjpzv77U7x1zSmEMYsrsGRWnc4Ry12Yft
jhEIoSiHcwy4SAgF0Q5sntNpBxBFF4DL5YCfRMkBPzld4wguwQYwbhuGv8BP
MmE/XZiN5rTBJ6CeLoF8CL4CfyElIwhOAJf5AF/ncNldolOQXKIsAMcoSPBh
AQAi8MpAUuA3J+RziTaX06mQHQebCLVxQGgXXGMuh0MUIBxz2MehfChHI1d0
IY5cMYTAfkMeuyQ4JdEhk3IgP5bgUgSXKkLokJwOlxO/DqFTcAHgK2BpURQd
Duhw6BwRMTk0AdIF2muQKMvEpAa8SvSBRMgPr9T0okR/cgKrLohjtPMHaecA
jDmcwxhCj2Ec0rH3aB7oZzt2KaYAwCvNBmPnUFQXdDu+AsAnVOIBYBwGF75C
inUNjtsGXOKwpIy5xEG7s8/h6rc5zo+Odw8MnbM5+u32/qGhzsHBc+Pj50dH
e/p7T48MdtpGeyHs6TzZffbEYN+Z8eHu0cHOke5O12C/c6Bv8GxHz6nWvtNt
ABDp72iHRPjpfPuptoP7AWCVnT50qHX/gbaDR88eO9kD8lj72d62M12t7fDa
fugYpEN4+vBxiBzfc+Dwjj2weE/u3H/8rV17X379zVUbXmlevbVl7fZ1W/a/
8ta2lZt2rNuya/3r29dsfXvVKztWb9255lUIAd5cvnnbipf2bX7r8Naduze8
8VL9quVFdb2iMaAZQ7rRpxp9stFP4yQ0jEHDGDZIBEMS0Q0H0ekQcgrgBJlI
IQBMA8Tx1S4zgDik4E+YDSLwXw6QxyaRDBgHgAxAn21QiEr4j3GZhC6DRDCO
gH7ZBZpzVCUwpnGem8QBhiRjRGHpkGGE5rTRYvG7ALzmWG1IgRAqAyk8Tl4N
w0FDFwWI21QdExGchplHM7a+vf3Ou++dEhoRP3PmTbfe9o/nX9i0+eUtr249
cuTQqVOtZzpODQ709gMCbT26aOG8Gz997czEhP/95WP7d+/qOtPR3nZy5453
dm7fsX379hWrVr61Y3vLipWNy5Zt270X+PIhlzDiVAZHlaFhokSwO4yRUWN0
zOjukQYGte4u57mzY3v3tD3zdFJkxKwpU2Ke++ei9lN9naftvefErg5n2/Gh
k0cHT7eOALQe6d+/68yR/Z0QOXUMYBDCtuMDZ1oHDm0/uveNvXte3X3orYNH
dxw6+Na+A6/v2v/aziNv7QMad2LH4QPb9u59bQ/8unvrrhO7j7bvPHrq7YOt
2/afeGt/247DZ/Yc7zrQ1n2wvfXtg4de3fX68s0rK5asr1v5zvrXd21+6401
W9Y0rvrnn56588bbr4mMuy4q+nv33ru+pvr1pcvfWLbylaYVayubNjauWlPX
srZp6UurVry2Yd07m17evnHLjk1b39nwyhurN77csmpd3ZKVlfVrappWVNQt
L6+F15eWrATY0LB0dU398orqzUtaXlu1+o01a19fvQbiLaUV1dl59Xkl8N/9
r75zZNvufVvf3rn59e0bX39nw9ZXV6zbunwt/H19fcuq6roVlTVQyNq6xpbS
srq8/CUlJRubmtY3NNTn55enp1fnZaTOfyYn7YWCrHmVZenLlpQ21OYVFywq
LlyclzM/I+351LTnMrPm5BcsLC1LAygoXNTQWFhVnZuXvyg55bmFi/6RmvZC
ZtY8gMLC1Pz8ZAhLSzPLyrKKi9MhXlSUUVycXVVVVFtbClBfX15dXQwpBQUZ
5eX5paW5ubmpyclzk5KeX7ToRYgAlBTmVBTn15QXV5UXVZQWlJfkQ6Smuqyw
IBugpDS/orK4tKygsCinpLygrr6yuCi3KD9t8aKnauoyvvMfd8YkTAoOnRQT
H/H4H/9AuLWi/IXJ83IL0vMK03ILUguKs2rrKqqqS6EQCCurSmikrL6huqS0
oLSssLi4EDg6gKKigpKSIniF9OKS/ILCnLz8rJzcjOyc9KzsNAB4hUT4CTJg
nqLiPAAotqQ0NzsnLTllQdLCOYuT50NmyIn/zchIS4UWJycvXrw4JSUlNTU1
Jy87ryAX6llUUghMJkIxlFFeBlBSVlpYXJSXX5idk5eRmZ2amVVZW9OwdEnT
8qVVDXX5pcVZBXmZ+bkZeTlzFyW9sGDe8/PnQmRxRhok5hQVAJTV1BRVVEB7
0nJyFqWnLkhZzAFe03KyIE9uMTQmJzkTfl343JwXF8IvmRkZWZlpGekQySvI
L6sor6qqqqioKCsrKy8vr6mpaWxsbGhoqK2tLYFuKoKOKoZ0+JWMaGoqtC47
OzstLQ14YMjZ0tIC/83Pz4dehbErKMzMyFyUkjo/NW1BVnZyXj7w61nZOSkA
8MohM2txesbCrOzU3LyMgsJsgJzc9IzM5NS0hSmpScUleTAHIIRBrK4pw1kB
0NhU07K0oXlJXU1teWlZXnFJTnFpVmFxRnllXk1dcW19URWwv1W5ldUEyirI
RK2qyqupKYBOKi+HuZpXWZ5dVJCSm51UkLe4MHdxXlZSQc6i0sK08uKMMqhq
8sLKzMzq7GxYPqWpqRAClKSkVGRkNBUVLa+oaC4ubiwsXFpWtqq6emVNzSur
1qyoa6opLAVYWl2/bsny9S0r1jQtXVnfvKphydrmZZuWr3551bqXVq6FENhg
WLlbl64G2Ny4DLDHsuKaloJKAIhvrl/+6pL1ry/d+PaKl/esf+PA5rcBTm07
sHPda1sb177WsgEo456Nb+5a+xoQSgmJGtAXlWj2JCpNCmYo6rpTJwpDF9uF
IRkgHRC+k+pWUMSEX4mSkOz0uMVNgXjZoZIo1SVKOhNViV6R2g/Bn2QzAiDQ
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
DtgFwPtYjmApkAtseCJHVNj+H9uzZ1tjKAWyOD0l4j49Yj0nIxmaNUVBsgVy
ha6iDIBnhSF0KgpUSTbFPdYDuru9UEmnTk5WOWjcZb5K1PqcpELUZXf0Hj/6
zjNP/eaaxPCZcRGRoUE///lPW0+fdMnSmMOu4tf5QR36akp3QAKBHwLWVseh
kXCMNNPrhwhyP9MHyHSYRFM3oPHzVaYModIJA7OCgO4x0DCpyFzSLSeFUB4z
+5BzjwqdKpDNpRIT69BjjLei2TzYaEaFFCrUGIDF3aoJnb0S7IWKL0mHFFSb
EZJLyYJunu/hOydI2DGuU+2Hex+W0z0LnWTyCw9VNOdAX3H8GFtImwqYUjR3
5rmGGNU2uoe0hAe5CDlSLCIU5yrNE36SrMsKZ+pIhLhls3SmyY17z1vZHC+e
TtaFrPLTLwpd4/xXiTp4ExX2K+6LW+OS6rGirdNYMec2Ln8e58oNot9QUS1H
qZUXH6iwhebGDzpFCzqLu2e1mYI1YYjC/C5Z76obh2A1BNVdAskg08mvGnSf
gWTIzMwsLy9vbGysqakpLCzMy8srKSmprq5eunTpkiVLqqqq8uhTUVFRW1sL
6UVFRcXFxZCntLQUIvAXSIE4lAAZIH9lZSWkZ2dnp9MnMzsrOz8vr6gwv7gI
ACI5BfkZOdmllRVFZaWQAq8AuYUFEC8sLcnKyS4sLiqvrCirKC8oKswryC8p
K62pq61rqIewtLwsNz8PAH6tb2xobllSVFaeU1SUnpubnJOdkpuTmp+XXVKc
V1GeV15WWl9Xv3wZQEltDeSBhpVX11RV15dX1CAUFZdn5xTk5EIbykrLqiAF
fq2uaYB4QWEphPUNS1pWrAaob15aVlVbWFpRUlFdUVNfVddYXl0HrwB5RaUQ
B4DEsqrquqbmsuq6mvqlTS1rG5rWNbdsbGlZV13TWF5e2dzc/MYbr23cuHHt
6g1Lm1e/tGHbujXvNCx5+4UFdd9+6InEmV+5Onh2RMzsq4PDJweHTQmOmT7z
pt/89m+NLes3vfT2q28c2LOv+83t7dv2Hn91z/6X39658Y23t2zf/fa+w2/t
PbR1+879x0/uPXp816Ej8xYvjpsxLTQ6/Lv/+R/H2k6+s+/g9gPHdx86ufdY
+5FTnW3dgz1DrgG7DGHH+bFzfbZBhzYmGP02pW9EhrhTNYaccv8Y5BFHnMqY
pI8JWr9NgHQipCgGYFsXFVsgxSaRCWYXVZugOGmiXTPGFW1M0Wx4FZBidYiM
q/qorI7IRHLDc7TAaY1r2piq2nTdbjA5CF5HiY8NzW6w/0L6EFH2GSOibJeN
EbvU0zda37Ts1tu+EBuXEBwcfNddX6isLB8eHgSGDVYVkBsXpZ6EoNAKQPlD
soyVcZr1cWiMytiAw6EUGTLbZA3qDw2BRAjpYV8Sh3RoFMRdNBv8HToBWmRT
SAhxLNBhNs1lynSQ7jJbgQCVsdFyXLQao5o+Cj1Ge8MGHaITGFWNYUUfVw1s
CFnvCuGqxmw9W19b+uNH7r/2mrBpcaFxEVEPfecHm7duG5dJTih8WCBfH5Vo
95KaE3Do7NMuWqUxxYAKDAka/Euk5Y+LLCJgv9HW4fA5aQoZboWEgKNg0Ano
NF03cNARSM9oBLDa8C0bnS1OnaWQbDoD/KJkCYlzTap/xEPJIPOpbBuK2AnQ
qGCMqkHJRfUVkoEnnkQnJUBUuOB0SqUcACpe6M65md/UA1gBM7C/8/ZIJohs
Z562Gc+AG7wBmpNFdBcB/IsuuBkRdyMlRi7hWwBYEx6XBXY2ClMwLgnANptU
F+8aGYwYSebpE5GSLcZ7QG/QQXEqdGioSsEhG+MSidtkwy6xlpGxo3lgNHFc
cF1jTWHgIIUMnOYRkkmus9nrZIudzTE7/QniYzIJsQvtGustXMtYiKAzQobk
idNTkaIXVrJu8AVLsQebje6iaDhOJypZiZY1hVN3RNKwBLJCdTb/x8iCZWsT
UkZFbVQmy3/AKdlsNid9IDI+Pg4REFggdLlcIEDZ7faBgYHBwUF4BZEK80Do
oA/ER0dH8V/wCumQX6APvELc4XKO222jdtvQ2Gj/8BDACBTgdNhcTrvggsjw
+Bgk9g70nx8cGBwdgV/HTLA7HU7BBeHI2OjA0GBndxeEUBqkQLH4E/z9/PBw
19DgucEBgLNDAx0DfQjdYyPwerr/PHntO9/W091xvrdncHBozD40PI7Q2XX+
RGv7yVMdXd198PnTHZ3HT7SdajsDEUiEOPx6oq2jo7PnXE/f6XPdre1nTnWc
g9czXb3nB0faz3bBr4eOtbad6Tx5+iz8dORE6/H2UweOHTtx6szZrqEz50Y6
u8e7uoaPHW/btWsPEMGdu97eu3f3vj37Tx4/c+zQmd07T29+9UTjyr3NK/ZX
1L/+7NzChRmlC1JzF6RmP/nMgjkL86ob15XVLG9ctmn52tfLazfVL3u9ecPr
y7e+tfyVN6tWrC+sW1ratLJmxbr61Rs3vP7OqpdfXbp+45yUtPjZ106JjLju
lpurlrS0rN20ZO0r1S1rc8rqM4qqC6qaK5pWVzavhjCzuDYlryKvoqm0fgVA
ZfO6ptUvL8openZhytPzFj6/OG1BZm5aYSnAvPTsuWlZ6UVlABBPysrLKa/O
KC6HPE89P+fpF+fBRzOKSvIqqzNLyhbk5M7JyHxm8eIXMjKS8vNTSkqSi4sh
Micr6/n09LSy0tRSSClKys+bm501JytzXk72grzc9PIySHk2NeXpRQufWbzo
H8mLIfK3BfOfnPvC3Kz0F1PS/pm0aO7irBcXZixMyc0vqvz708/ddvud4eGR
ISEhsbGx//7v3wBqmJqZkVlUmFtZWVhbW1BTk1tdnV1ZmVZSAuX/MyXlH8nJ
AFCxZ5PTXkzPSsotSC4seXbh4nnpmfMzsqD8p+bMe3regmfmJ/3txbkvJKdy
gK9DhuS8gvSikrkZeS+kZj+XnPns4gwIIY7wj4VpECblFKUUlqeXVAGkFlWk
FJWmFpckFxYCr1nU0JBTVTU/Oxv6ATpkcVHRgry8F7JyAObm5i8oKFpQUJKU
V7wgJx969el5i59fnJGaV5pTXJmeUzQ/OTmnMPsXv3z0s7dMC42YFBIyKS42
4v6vfO3vf3txcUbJi8n5T8/PnJ9ZmlJUn17alFHW/GJ6yT8X5z+bXPBCWvH8
7IqUgpqMkobs0kYI00tqU4qq52YUphZVN6zcXNm8Jq2gCmYCRMoaVhZULcko
qlmYW7YguyQptyy5oBJmyOKs0qT0ogVphfNS8l9YmP1sEoFnFuT8bU7GX1/M
fHp+7j8WFjy9IO+vc7KeeDEN6pBaXJecXw31eTEtf15m0aK8stSiKph+mcU1
qfmVi3PKUnIq0/Nrsosb8suXJKWXFFcvr2lan1VQN2d+3rykgsysmvyCptys
2oLchtKCJQTyGgAqCpurS5YuX7KpsnRJTcWyipLm6vKl9dUrSwrqq8pa6qpW
YGTNii1rV26FVwCIr17+clPd6srSZoC6quUQb2lct6x5w/rVr65duWXl0s3w
Wlu5rLy4saKkqa5iybLqFbCi1tSvXd+0YUPzRoD1TZvWNW5cXrWquXRpbV5j
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
axcD3qosP7O08JK1JMdelUc6CiiygGUKOaHE7swh6TyKySeoKySRS4GSzHE6
chzW/IrC7ILsc5fPnzyRfmBb6vrxY0Z89OG7vd564803X3/hhRd69HzkkZ6P
PfnUM917Ptq+Y7uO7Vq1ahaTGKuLiQyNNodGmYJBGRcVDkqLsUGkoYFZX8+k
qwfKmMiwRnGaBEs9wLzEm+5IstSPM94Zrb8zRh9s0QUbIhqY9OGRFoNWrwnT
a7VRFm10jCk+TqMLizTrzCZtpFkP0FmkwRgbHRMbHdeoYbOExMbxSU0bt2jd
sl3Hjvc/9Mizzz//+tuPPfufZ17o9dxL77z1ztc//Dyw71/jfvp52Eef9n7q
2fc6dX2yUdPOzVp2vfeBZx55/OX7uz/TpcvDndt1bdGoWZTRYjJYQPOWyNj4
hMYmczRoPDomzmw0wZfqNVG6iFidJlavNevCQU/iYi3Nmjbs0P6eB+7v+tCD
94Ly4e73P/hAt/vu74Jzt3s7de7SvlPntu3at2p9d1OQW7Zq1K59a5DBLfBA
166du3d/sGfPHk8++fjLL4O19MoLL7z08suv4uWEV9Sbb775n//8B9x99vnn
QHr00Ucff/zxJ5988r777uvcsdNdLVvd06pl57tbtG4Y2zTOnBRtjNZrW7do
PmTQ4NLSckxauqTVonRBq4UCmLAVRJXASKph3ehI110W3SVY1/EVK5O3Eu3P
uz2p/tcj41/hHzKqtwByGGRoRyNn/C5GbpBRta90g3H/F9eQnPQYvotJcpkq
EJQ+ezQLrsFdXMO4d5iRPh8Gh8aNqzOoB8SG0qbyOlYm8ynksh5jHBKMIQdH
kvH6ItwfUp4sCmlUszK7QKP3gho7xZKMdE0hJ8CuKC4SxY9aRq1xqHuA71Ha
Ab/FTAktyOQQHmpot+tqB04BK9Uro0TykKZiVdRURtrV9AM5Ozee2JN6+uSh
q2eO5J1Nu3pyf/alY0VZx0uyT5adPZy7P/XEjrWH927KOLD95LZ1h7avTwN4
cPemDIAHN604APLWNYc3rTi0fune1Qt3bly+D2DAo/supO89n7737L6t6Ts3
Hdi1+eDBnccObD8GrnduPHhwR8aRPafSdp04sP04QHObV+1ZtTB12dwNIB/c
cWrvlozU1fvXL9sF3rV/2wnQzolDl4/sOQfqd21K37nxCKgH16Dm6J5TO9fs
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
ojXz3JEnH7/PbAh5vOcD33/9eY97uxpDw5rExs2cOAn69kXngIDFZRhqdPLw
pPioSH1YpCEkSt8gxhT8y3cfEvZ80lkMOnz29KFuXe5KStA3aWiIt4QkxkUk
xhoSYvSNEyMjDQ0iDfWjzPVbt4zZv2cd4ygWeZutLPfYwe1EVYHIVgmQTrA7
i6/88fVndycmdG7R4sXHnorWGaONxvd6vZGVdRbxktCL85mzx6ZMHT9lyqS0
w/uhHzIWcNB2MGJgfETeypAQXfLI2S+Kh8tLnrKwQbS7u4Nblny+sU77wrvb
17POb/0+uh1SgJ92G357Xeer5nms9etu2bfX3E/vJ292f/7ZdLutOnXCeBAb
AaFY33xR4dU1q5enbl5fVlqMDAfRkTt0FUOzDLF8yfzWLRvNnjEB5Pb3NDZo
7kBxbOs3TjTNSBlZbb3MiyWiWJF56fDMOWP6//3TN999+NsfX3bq2jwuMfzB
h1sPGvrj+In9U6YPX7xkakXlFSRgpBjCDvBcxpGdDRMiQGuxFo1ZE9w8KWpQ
vx/LC7KkiKEETVdXblq5oH3rJEu0pnnrpl163K+LtQTVC+rx+MPFBZdFthpk
uqpg2vgRSfGRYRHB0TGmD3q9kHf5aMrEIS2bx0RFaaaljC+vKF62bElUVFR8
bNx/v/jSVlnF04zAsJTDvmzp4k4d22siwqLMuvZ3N2+UYDaGB7Vtmbhp3WJ0
2li1dtXi8JCg+kFBUaaQhKjwxFhdQrQxMSYyNlIXbQ7XRwQ1uCMovH7QmOF9
Rc6Wde5on1++efmZnkP7/cLaSkS6UiQrnIU5rz/Zs4nJpL2j3nuvvvXef3rp
YHx548CBf9JsJc1W8GL1wMF/aLQhep2mX9/fbbZCUaxOP7q99+9f/vert2ek
JAM8SDoqoC2J5Pde4LB1B9YU/YfwoHh9xLbPn/zju6YGKHqLe1LXFAjI9Tfm
t6qPNzHdDnjw9oT2/3i6fYcF2w0g7TIAXSnSPn70yKYNE5o3SRw6ZBDgBFnJ
wIJnoQYNOeDvPsHBQT173vvEEw9GR0YkxhmT4k1GXQNteL1WLeLmzx3vsOfa
Hfmvv/5MWESQTh8C+LKGjWLiEyKTGlmiYiJi43VxcbqYGE3jhua5syc47YU8
FPdRAMU8/fj/Y+874OMorodJ4qbe3A2mmQ4JLYEkhEACCYEAKcA/lBTSaAkd
bMDdVu+9y7JsyZbce++9N7nJlmSrd12/7fu9mbe7t3e6k+5sGZsvzO/95uZm
Z2dn3sy8MvNm5idjRgQCW3n0oft/fP8DQQO/9+A9ty2cO1sy28m1CgJv62yZ
Mv4/oyIGh0cERCfGHjxzKq24OHNW0e4De2xmom01nj10at/W137/bJD/wPDh
w4KC/cYODUia/uk7b74U6H/ds799srahmpOFyqozt99794Ahfj/84Q9379xF
DDUFoau16bVXXg4KCgkLH/qnP/1pw/q17/zzTeCFUJ433/hTR0sj1L2luRFw
8qMHHxgy4Dvjbhxzxy1jR4aHjx095rfP/Prvf3n9ycd+9PQTP4mdPrH+/CnJ
boSS33796GEBfk8//ihn7pRFq2w3lBdk3Do8NGzQgNBBg3OSM3Zv2/Xznz3u
HzDol089ZjA1AsszWupfffX5oKCBIyLCo2dMBf5rMNY//csfRYQNGBYx6LZb
R7z/3t8vVJ8i937wLJ42gB1LMTW/enxQ9mXew9OLvWTok+uvungf37/uMuvb
Oyr6fPFK1eprdL1XpB/7yVXJ/5vrrl20UD4IPI7sW5d5m9X4/rtvDQsLDg4Y
9OqfXmptbWcZsquFrg+KZkv3G6+/AlR6zJiIm28eFRER8PzzTy9eUPbm3964
cczIQL8BP7jv5hXL5ra2Vj/22MMjRkaEhAQFBgYGBAQMGxYRHhE8esyw628Y
Aa8T8B/4+SfvGrpqgfifObX/d8//anhEYIj/oOGhoXfdeseH777/4L33B3x3
4J9ferml9oJoIZf5Hdyx8RePfn9Y8ICHHv7+2brabp7vFqUOhlwCJUv29cvm
P3r3jbcODxod5j/uphue+e3zt4y7dUx4wM8euO2+268fFu43ZeoEK2dhJK62
sf7u++8PHz4C+OCe3TtlEbRB87LF5ffcfbt/QMjPnnj6zNlqg8H08fsf3Hrj
2FB//4fvf2DFsuU8S5bkTAZze2tHZ2tbc33dxAlfjBk++v57Hti4ZgNjsRo7
WrvbmuzdnWSjidWcm5o8KjQs3H/If/75d5m382aDrbv18R/eGzTgunHXj548
4cuu1s7O9q74+MSIYeFBoYPLKvKtTDPDt4EIMXpE6K033FCcn9PSWPPf/74Z
ETZwzMiQ8JBBeD75X15/hbEYQWIhraaeCiXQo3uuLh+Ue/RzX+m2pwx9df1S
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
zIzk5MTMjLS8rPSUhNgF8+YW5GSWzC6cV1YCflZmanTUzIT42PHjP/vyywlJ
SUl5eXmJyUlxCfGgfn744ftv/fvvL/3xxXffffvLiV/kFxZAWeNTU1OysgAm
zZiWkpGekJo4ZcqkTz79AF7KzUlPSo7OLUhPzYiPiZ8ZHTfjq0kT3v/wvekz
JsfFxcyMnBoNhUmKTU2Jj4mZmpQUBeVcUFFWVJhfmJuTlBifkZKcEB9dkJMN
tcjNTMvNyZgzqwCynfTF50mJMYW5WelpiXEJ0+ISpkRGT0xJjc3NS0tLT5xb
Wrxg4bzCwvy8/KycnKzUtMTcvEyoe2zczEmTJ0ya/EVk1LTU1OTMzHSoHSjX
CQkJ2dnZZWXzCwtnQSA3N3fWrFnFxcU5OTlJSQmxsdEJiTGQSWZWKjQHvJWW
BhpnEuQMf7N0Dt6FVwrzC/Jz8wAK8vIhdXJycmoqvJhdOq+suGR2dn4eoCg+
OQnwFhkbMzMmOiYhMSkjIwM6Q2ZmVFz8lMjI6aDqJyXNjIuLSk6CwHRIGR8f
nZIcm5w8IyH+nY8+effjTz+bNPWrGZGfT542cWZUVFLqzISkmQnQqNk5xXMK
S+fllZSm5uZD/NSYuOnR8SmZOcWl5UVzypLSs6CxoHplCxfC5xLT0+Erk2dE
TY2MAf+LydM/nTj5sylTP548cfy06VOgeEnJMwHRKWmJWZkFc8vgxbjkNChM
ckZ2Wk7OtMiY9z766J33P/p8ymSIj89Ih0w+mDD+868mQ5m/nDJ9cnRUZFzi
zMSEhNSMdMBK0ezMokKoBeSWkZcHMeCn5uVCVoCgGbGxUPEvpkx5/9NP3/vg
Q/A/+uzzDz/9ZPwXEyZNmRgVE5mcmpSWkZqQFD995jToe198NWHi5K+mTJsM
fyOjZ0bHRiHMjIqcPnPGlGlTJ02ZPHnqlGkzpkNMVEx0bHxcSlpqemYGduZk
6LM52Tl52QWF2XPmFhTPzs3ITExLj4culJObCp0WwgCpaXHQr+BvQmJkbNz0
mLgpmdlxOXkJeQVJANm58ZnZsVnZsTm58TGxX6WmzczOiUtLj4yK/mLa9E+j
Y75MS5mZmhCVnZwwKztjTn5OYU5GXmZqTnpyRnJ8GYy4kiLwi/OzISYtMTY5
ITolMSY3Pb0YhlxGRgL0zKionLQ0iEmMji7IyirMzk5PTEyKiclKSQGAMCRb
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
/dy5c1VVVXiJtttt19/QhviGFvtb9/+3+5YPXl137fNBl/hv+8mVdspFRXRe
FK+y9dQxvokN8W3/+dZdg+5/jQ96Q+q/TveN4IMuaf4X+snVcqgM4t1/4NBs
Rq8SXu0CKu6SS3JN1eJbd1XcNdgB/gf5oCcWcFWq/y0f/NbpHeJWsxoFVoiX
/12DfPDSCnNN1eJb9/W7a7MD/G/ywZ41vVoY+JYPfuv0DnGLy4LabYD0HsBr
kQ9eQnmuqVp8675md80yGk902Ff67GsFvc+/z+9eTnUu37l814VeuUT2TO+p
5L7i7XKcN/cmXGnndvPvJdS3XxD19ePh62loF+fS7j27bm/3aHjoLZ76bX9V
qvf8vXeeMuzzu32WqvdyXmZF+nzdV7z1F2K9aLrLojNeXu9yydXxtTx95nOZ
3/U1W5envlbn8p2v33VbL0/JvMfb5burywfRaXXU2OIl5/DNcl9nQ7s4/fHL
ejpzacXw1G/7q1K+5txnel/z6T1Bn2Xwsnh9VvBK48FX5+m7bt0l05nLF9cv
s5q+4uFK5Nln7S4ZOZfjLrOont69crjqy/l0zlJ/8k19Ra4Fpvz/qfPYvnil
kSBwePdxX+3uVffo/S2XOy+8cb7k7FX+PcaRx6PGLi1/LwvQS319L5JP49d9
gv7K/4qS5V4y73lDaO8k5UrTW1/z7xfarsm3/Zinl052R8n78bv9hUPPaa4a
H9S7b/ngZTrPPcI9rUPep3+EPLF3+ukLP+ovPnKl8lfHgq/03/1477P3ej2C
feX7l8gHXVL2Ix/skxZdmus9z2uND17ydy8n86tIQuWrxAf7L0+vBPt+54OX
s3ZwOfn4+sUrPS58/a7v5XFPu3r+9ZV+Xir46nzmU5eMn8vhg/3SiNT5Oh77
q12udT7YOz77/Vteun4hYlJ/sIyvR5Vw+4levutT+qvKx68sH/Qkp4ETqNPX
/RLw0Ev+3jgdHlxHEya4WuPOV+rpOafeqBle9c5xDIBePexHetvj7nivnK6B
ri0+6FMjSpfCCr/xfLD3BvU0AHt/pU98+tou/eW8r06/5N/Lh65QAXp+xctI
X9N/beX38JUrSwd6aUeRskKtVPi3v/L30mn59BxNV7RdvOnY/fQhvgcnUtgT
MkGWtdvtVoaxQdh71qaBlym/Nj7oO4a8LznGexzC/dSUV4ev6dvU+/b1Ev/e
DMA+X7k0bHr+8KXc4y718EV6Qanmi73dVH4pIIruQVJvJNd8qJNAq9vT12FP
9tr3iE8PSFbrjsIcDetxovcF0U0M4rAnhnv3XfAv6PDTZ3/QxwsS7xZ69O1L
oDCO71L6QXwNtCUp178+OspJefoRjz75BPqCqDSZE7qI74kP+jh+vaXJupzc
N5xa/p7gq3OmaTKHIEqsElBVQkFQrqTU0ijQK7V0TwzVT2jgmqdzti7ocsaz
r3TbvfOgMjjX1zMf1O6g1H2FFBjigdTQIaP4zn3PywZybmvAmLPv5uZQ9wjs
GyiJcpOb2+/2Ar7zVvc48TRe8Kk2ZdSXc+IdsujwnTHscJxIbiG0c7LFLuBd
sjZW0gKAcXyKySAGAqwgczzxoTdwlORCmBcUn6MX5ZGLVyGGI5fK4mWHIr2q
VOAJ4F89kJtIMZkOBJo5T7MledIMeUGJFOiHyNcp4UQfv2bj4PuyleUwBn45
ypg4UnWqrFO0iFAYah0gCUqMYhcgkRgQhyExOdtKIP1ZktVLG4GGiqS3QzwE
tEhMg9jA78J/DVcsp2BGkBVciZJSWl6pBcUerTX6PM2BV3qqEg/pMaVAqiPb
eaXW2lv6d0W1G0A1BU654xL6LII2meG4GFOSAMEcyZj40NqMyIIPeLIxdqwp
1BoDLEt2ebM8p3B83bEnosL14bs8ABYFAlBWjmFFXr3tV5SU1sWWJhihwIsy
ve2WlFbkOfgI7aek11CmjGFKc8hfSMDyDPjqU0rMBTuh5DJtUUn1SZ3pTccC
SzoiNJlAuoEyBajNCkuKz0OWtCGxFjzpSaKCTEc/4ZBrK+zVCaAPsQJvBx++
Dq9J9EsQEHhWxlsmyUsCwYnoGCmAep52MkHQjL5EjrdBpYAiyaRSHMuZON7K
cwztj0rOAJAzZo5fUR5hY9PbLQXSs+kVyRI8YmQgcQKUkEGgWOK0KpDeytsA
8KOQQKuOmpJFjGjpAeeCyKhFpTmIdvKuzCLIMqOBKJphvAJIkk0UreDLSgV5
yWG9o4iUZCSq3BkCwK8xgWbkg0wc8aA97TlZ5xKPOSjjAb5OgWKDNJ+eWasd
jNz3ipyO5sDT5ie9lJNZSuHIwMGwqPIUbCY6UpTT8wj5JY6B19HHfou5QXMD
ULGBQV9ScMhRHEJKG8tZZSpgyBTniHAI4IuIfAjgI327IGitQ9Mz9KNWSIB5
Qv6QnjYcp4ahCrSHYM4C6Qzgk/5A+okdA/gIn2L/J29pt3KTDsNQ/LHYRbGX
qtfyOtLou65AmxXaHAgIjhrWzin6kcosNBmSp5lBlk52XviXjDAOZQlRJYLQ
+uu279lz9OT+E2d2HT4BsPPQ8QOVZ6ub2s81tB49WwNhiNy2/8ihU+fOXGw6
fu7Cqer62qaOutbu8/WtJ8/Xna5pgMCF5s4ztY0QgPj6NsPFlq7qhrZzdS0A
HWa208JdaGw/VFl14kwNebe58+yFpuYOE7x1tqbhyKnzh0+cPXji7PHT1ZVn
a6tqG89U1wNU17XUt3Q1thlqG9rg7+nzdZAY3u0ys1ZONtqEtm5rQ7uxurEF
oLa5Dfxz9U01Ta0XWtqr6hqPV1VXnq/FyIOVp4+croI0TV3GdoOlrdvc0m5o
aO2sb2qvb+mAMERCGGJaO4zdFsbKiCY7b7JyNmA0gmzjJQsrmBkefCsnQgyO
Z4gHgAAjKmE7HdtWQbbwBMycbGKJDzEARkbqsvLg22k/Bh8edVoZi0DeshNa
oFAHqyhDJPy1q/QCnwLAIxNHyApLAf4i4F9MhjGYnqWclFJ/0qGhCsA69TGY
QIuxq98lvkAARSCUiKDjsaxstRJfppeFQ0DQSTgYYOwya3P0QPgeZyegdHPo
pYwCSrlx9LCUItqRCpJqi2SUy4Qg2SQlUqBPgZzbCKGSGSVDAjQTEonJBGXk
AboFG0epL0UK+KR6gvIuq6QkGdoUPApWQWJQ1KDVJgKyoFSHVy7ABnEEshXt
PKF2MPrsLE1DxyEhhywwLlJzIAWsVeYZwnkBBRCpDVdAHMtLDEde5KkEA3la
BVlbbOFVIUngOZuVvAsUiTEz1i5ZUrsGb1VYEmeDD4mMBb6IfwkAwQFKzlpZ
i0GwmyFM2ClH+Bqgj/IdC0U6CVCg/AhECML77CSlYKFpSAKFTyH/oqxTRT3v
oHI6rqFSYA2AllrBB6Cd1AIgSSae7xYEgyxjSWw8b2bsJqDwlFATRBBWwTBk
bkBR4txoGTiLq/FE3P2BJE4PmvKi3x7iWFyDMgObgG6nChv62gmU01GxkPBB
Fgm9HcRtK8mKNj+0N0sam6GyFdBjnoEuIiraJREY1CVmybG2JeqYMo88SyD9
mNWEB8oEWX0MRqKAAcwLMYzcEAHYGYLGH/VthHyQckwrvqgB5AxcT/uQFqmF
VSHBCXhoL2CgkCdvYxmzKOAwVqQd6DYMYwCg/ceRg4JnRZoi6ORYC+2caoEl
wiiB+QHqWMZGZE5JkUuVpqOCPU90MJoclAROpRJIE5B64nChf0ka2uZQBIlV
hvPElOS0stI5a1Yv3Lpl8fZtJatXZVWUZy+ogMiE4lnR+XlTM9Inp6XGzyqC
mNjCgimp6fGFs1JK5kbl5E1OSZuWnhmbX5hQVFyycnXhkmV5CxcXL19ZvmET
AAQy55VnllfkLl6SMrd0enZOQvHswuUripavSJ9fnji7JKawaEZ2zqS09C+T
kscnJH6RmAQwJTn5y7g4gBnp6Rlz585duXLhxo2LNm0CKFu9unjpUoBZS5bk
L1iQVVaWMadsSmLWlJS8aWkF4H8ZnzkxMRsCk5JyPpqe8OG0+PExaRNi0z+Z
mQSP4vJLU2aXJxfPSy6Zn1pSDn7SrLLE4jLwk2bPK1y8KnP+4ti82ZNTsycl
ZYIfk1ucUbowMr1gRmre1KTsyQmZABCAv1EZhRCAT09PyY3NLk4uLEsrLs8u
XVywYHl6SWnirFkxeXkzs7KmpqVNTkmZlJw8JTU1qbgYYr5KTPwyIQFiJiYl
fRIZ+c5XX30aFQXJonNzZ2RmTktPhzSR2dnTMzIgBjIBiMrJgUeQA7wC7747
ceJ7kyZ9Fh2tJcZkmBJi4F14BAABeBEaK65wdjxAUUlcQfG0jJyonIL0sgoI
z8zOn5qWNSklA/yp6dlTUjMnJ2ZMi82aGZ0zPTJr6oyMSVNTJ05JmzI1Y+q0
zLj4WZFR+WkpZRlp82OiipISSnIzF6cklCbHzwU/LWleevL87PSFeVlLwIe/
hdnLyorXl8/ZVDprXXHeytz0RTlpCyFyVu6qvIyl2UkLshIrwAfITChPj5sH
f+fkrVlUsnVewfrcpIVp0aUFqUsWFKxbkr96Sc7ypdkrVxau2Thn6+Z527bO
27m1fMf62ZvXz9m0PHd1SXzp3Pj5KwpWY/yG8m1bFu3YvnTvrhX79qw6tHf1
wb0rD+1esW/Xsv07F+/aVrFz8/wt8OLa4rVri9evm7N2Q/maHcs27VqxZcui
dTtXbDq2df/JnYePbtm3Y/l6gG1LVx/etOPMnkOndh04uGHbxgXLdq3cfHjT
nv3rtm1auHJDxfJtS9fuWrl+96oNjZVVzafON548U3P42Knd+wBqjxxtOXO2
ofJk/YnKplOnASDm7L79J3bsPrRpa+XOPce27Ty2dTdkXn3weNW+I8e37Tu4
aeeZvcdP7jpStb/ywrEz5w6eOLHzwLmDx7pq6zqqLzSfPdtZW9N98UJHTXXr
uTNdF6plc6etpbb13NHzh3dcPLHX0nROMjQybbWGutOyuaWj5kT1kZ1NZw5Z
m8+z7RfA72qoqq89VVNzqq7uTGtrbWfnRZO5kWHbWa4NgOPbeaELWBLoaJT3
EXGB5Tpk2SBKBqutxWxpgsQc12W3t5tMTVZrK8N08bxREEwqWAgRVnUrCDOs
BXQNjYBT0m0F4AWIN7O8wWpt7+ys7+ios1jagANCDioJVSR2TR/ESS1gH7iC
CT6wR/QxmbbLA3giw9i0v8j1NC1SYzq6WU0SgFcsVoPNbrQzwIUtqAFxgp3l
bXbWQnU9XkAhTgIVCMQaUbXCIXNBdoEBucEuEgEIwCKC0MNDMhuwSp7OZkgS
vVdZ0QSBs6uHqDNdXR1ms5GUmbA/wsugJCZzF2APOB3V+wBdgDc78j4IQwwE
kA9CmMw8gSjGWeAV5HqAdjtjBh6NEiT+RZ1OU9UhgOkh3mY3AWBiiIcXAeAp
tiAyVsjfZGrp7q6HntPVVQd9wGJpATCbm8FnmA7oGG1tNRcvnmxqqmpvrwW/
snJvfcMpSN/RcQF8o7ER4mtrTzQ3n2toOFNTU1lVdfTs2SPgV1efuHDhTHPT
xabGiw31tXUXqxHq6y401F9sbmo4fOjAnl27d+3YuWrFyvVr1x06cLjyyImT
+w8f2LJj9/rNBzdt37tu66bFqzYuWrlr5cb963bsXbNt++L1a+YsWVm8cMO8
FbuXbz6wbt+e1fuAMuxacWDHsn2bFhByAbC2bHOHJHXKcpsgtFGZrFuW20UR
ACLxEYTxEUAzy3YIglGWATohGSd2SZKRvtUtyRDuFEgYE3SJJNsmjm+VxTZZ
Bh9GFPkWAQn8dvgEhXb6tFkQm3kOMukSxE4yIMVuGH6SDGCkwiIEIB4iMX98
BF/pFslf8NtZuYMjkRA2yyQMMZ283CWQvxZazg6RlKGbVqeLlqddkttEuYmV
WwUS7sLa0XistQE+ITgA/holkqEW38XLHSyBTo7Ek7oDKgCHFLo1dPF8G8d1
UGRCMhOi1G7vpn8NNI0De5KkhbFdMM9uNZmJxkCekCFka6IpMRm+i29BRaBe
jYzQzElQTfCbWNK4WEf4C48gBgONFt7AyCarbDDLnQa5rVNu7ZBb2+S2dvnk
qfbjJ1ou1tqbG8Xqc2YItDSI588YD++vP3qw/tihphNHms5Udp473QU+hGvP
mutrrHXnbRfOmS5UWc6d6jx1tO3kkdbq08aqyq6zRzvPHGlDv/JAy9E9deAf
2lm7b/P5A9vOH9/TWLm/8dD2C/vWnz69o/bMlvOnNlWd3nzu7Nbqqm01CCc3
nt2/7PCR1Sfq9jUBHF1TeXDF0TPbqncu379j5QGAbcv3AWxfsR86PLDFzRU7
NpVv37Jg544le/ctP3hw1ZFj6ysrt50+se3Imb0nTu46emDD7n3rdhzZsg9g
79rtwIP2rd+2Ym756nkLd63ecHTb7uM79u5dt3nrsrW7V2/dvmL9hoUrtixd
s2v1pp2r1m9dtnpdxRLwd69Zv3PV2o2Llq4qK19ZVrZq3ryFRUVLZs9eW1Gx
ZdkyBHi6Zv6Csuy8ZSWlm5es3LJ01eJZcwsS0/Li00rS8xbPrijNmVWWW7yk
pLyicG5JVt7ikrJd6zasKl9QlJZWmJo6vzB/bm52ekxUatTMeQU5FYWZy+bm
L52TV5abUpAclRE9OTNmSmFK9OLZOQuKMjEyadqEyAkfxE/+LCN+emLs1JiY
qYmJkenpsenp0RmZ0ZlZMRmZkbFxE1NSZxQUJpeW5s6fXzRnTm5+fjqIUfkF
SQmJU7786r8TvngvKXlaeXnhkiVzysryZs/OnD07G2DWrMz8/NTs7MSMjLi0
tLji2QWzZhWWlBSXls4Bv6Awp7Aod87cWRULyubNLymZU1hQmJ2dk5aaFpeQ
CB+dnp4en5OTkpeXlpISM3ny5599+sH0aRMz0pNz8zJT0xLj4mISE+MzMzOz
s7NTU9NjiIuaOnXyV199MWnSV1OmTAKYPn1qdHTk+PGfffrpxxMnfjlz5vRp
06bMmDEtIQHKkwLpIyNnQILkZChhWmZmel5ezuzZs+bPLysqKkhNTYYEAJAY
wpAgPiE6MmrqpMkTPpvw0WfjP/5q0oQZkVOj4iOnR8+ISYxNTE+NT02OSoib
GRcTl5KUkpWRnJoSlxA/dWbkF5MmfvbVV59N/urLGdMnR8/8bPKk+IzUgpKS
jLwcUs+oyJTU9IKCopycvOzs3MTExJkzZ8bGxkK9AF0FBXlQ05SUpOycdMAY
1D0pOS4mdmZCYkxCYnRcfGRM7IzYuJnxCVHwF3z4m5wSl5aeCADITM9Iys3L
gDDEZ2al5hdk5+VnJafER0VPj4yaBj5ARmZKSmoC5g8+JJhVnA8fwnBWdlpi
Uix8NCc3A9oLckhLT0rPSAaAALwLKeFRRmZyXNzUuLjJ8fHT0tKioN1LSrJK
S/Ohz0BPgF5RVlZQUJBCuk1+MsQUFaXl5CQUFqbC39RU6HLR0G2gC82fXzB3
bl5xcRbkkJubXFiYDpksWVK6evXiVSuXLFlcUVY6u7AgJzsrLTMjJTMjLQta
LTc7NSWpML9gftm84qJZc2aXLFm0dHH5ouXlCxeVlC0rLd+4dOWW5evWL1oJ
rBBG5dLiipVzF68sWbwwr6w8e86i/HnLixcuL168ccHm1fM2ry3fumXpnl2r
jhzceOrQptP71p1gRXV+jC5RMQIB1J8xBh8xgjLZIdB4smIoKZNPHCYTcSqE
viWoMapKqs3jmXnRxImsGolzdzgRh1Igq6wsKWt/2jogWbISlEUkUVl8lBiW
zDiAhISyJkhOZJVQltHXJmgYKlQBWFiB100z4uShpjEDWAQy6wi+mZcAGHXZ
Ub9kyQsSKOUIuHCoLR3SpUn4loRoROxps44aaHhGDGMyDc/YIpiJlkCfFYax
grwuT5dscW0M5yYsAlRHZHRzp8rMlCABaJOoNnXOhTQEXdwEYHg6ywOl4slM
nkhXUVGm5hgy9YMzogggIkMMy4hKPOuYoucZmbNLOEGIU4ZYdJFMHjn+us5p
8OrMp9Jszv3JZd6DUZd3RZyTUr4laPOuKoj4CplHVdYHeVbSVoe19VNQOCTs
f1R7AKGZB9mZzsOQqRglMVmqwuaH13iO4Vg7zuTQxT/H+qC2WoeLHSxjgwwd
XYf2MNAXcMIMj9pGi1n8PIjrIJyT9SMqtKNs77TESwPwae1Dypqd+gi/qy7x
kOkpEVQz3gxqHeIR/iqrgbiiClhhjRpy8SnOiDJ2E8daec6mLA8pa0aknOrx
4I5FOiwtgsssnFIMOhMra0taDpXNYSSDFzLSaVLGZrOAJohLhFpiba8HnUa1
aWqpqlSK2jSptkSoTYrCX8iQZMvbYKDQSU6yZMtKHCh0ZsZisJgtkK0EqhRv
4jkjVJ6uhgrqkLRxZN3ELPBkTElis9HUbrV02RiDzWZlBaoJyxar3WKxgTYL
FdHPi2ItdCotD7oYqG/aop62NKz9lXQTthxZveXxLeghWvfQuor2VFP3HGnU
T2NLaRjTppf1GFa7HEdXThk6mWlXJzPtdF6Uo3OkNklNydMVTG0u1GW2GXKA
xNiRcBkRAwiORWeHKQMZbnQYcspiOi06HkdPlWvoHGSSQDGHUBdilLfpRLtC
EHRbPXhKBDQzCcfCoqTYACAC8JHIK/H6MD7V0rs8InP2orL0L/CynmFQy04n
OxnNVAZKCAVWJm9dVrnVRR+HPQMlNYr9A/rUIoKSAka1VeDVce2yr9PZrEhG
Oz2XjSiUUiPhxgDiUYtEEMiyAF3tlV1BVCithmf9X9qyDqRpOHfCle4V/Kta
vCiJRT1CdN8lTcArVVYpqmImp/11qitd9WLpOrNukU2iBiWKoRHD8thkHEus
ONSuplgL6O3NtHjFR4sTrWNrpBttFfR0W3D4Gi8Q1W0UWmkxBsM4FiQiP3BA
rCAvbYkdQbMa0+yacKVGUp9qNktom2Szs1o8JLayjEAzdBFpKHHnaYAHoFNn
SqeGCtgFBuUCSlTJUxQl0KdAFzB5zsKQ2TMV2ygLSGpnF2wCQ98lr9glO1Bm
kEMhcyvQEFUiwkUPpMk8lcd43XBRmlKgHQAFO8egUgwb1HEk0j5G1rIItcFF
K2e6RDGh759o9KsML7TowyaSdTv09SajdE6PEGrGbqaLQWTMQtPx1E4VyTLO
iGJfRRMs2ug8bm90odgaN3GmFyKVJhjNeMYFtKlR3RIhaX8qyrGakZhApzqB
A9oEDnxN+IJCoATrYIjqIxA7FWFNUpQI7E464iPhLZP6smlig6RYvziW8/Qc
Da1oJLIyaLPajC2tDSZzF66oasm0tzAxcj2ND2oTpCgYONrIGSGSut9Tm15G
i27ZRfpXu4ESr5p+EfmQcgjsM4pVDLWXowt8gms+TuvivCa8oWyJPRNfx09A
ryAjnQ4ZZ5KlrenKdgY6maAKs2Qsa22K8iIu9WqmcXrQzOFcqLGs7l/Q0SKF
cXCcoI+Ev6LeAE+kY1UNgG7msDdwgR7oBRRyRCHpyVzo8iiUVll9Vsxu6UjE
69tE2tk42uuIwa2Ea9doz6EB0FuOdRh5ECYgKoqNoKPYLqTbw9ZR0pEJkXXH
Ut05NHnSp0SmjJn0zEFj2S6R7h3pU5xD5tAHtL8YVsxcONWC0wFENpZYzUpT
cq6vZgWt2jkr+otqmEsIF+mx0ITUrlJWGbHYY+O8Rh9wd74i5OhKwhGrWwKs
xDDEXolE2ngrAIZZInSTgEQB5yQo67a5EBM1LCq7VESFRmn7UGTsZaKyg0GQ
FKbpAjCwNQNaibITGLRouYq4EoiGx2lbW9DgkAFqqhgcij3zhHHKAlOlr1CD
Q8o0qfBN+bKo+XpVUhAdYf0jzRRXoTSSoxdT4iQgtdPrpPqxRi1mRe0vJUFK
PNrNOgR2TKCYpjttJNGIqs4oxYlhoamtrj/Ttlfz0ce7WLa4sFrtKzpFxmWk
OCzwe2aubIhQsKBJ5Q7gna2COE3E0myDHBZbdDZMxwEVBKvGoq4jVeRdUOTE
nXXx+i0PuN+zq6sDNFlNGOhp/+OSifOj3px+VCro0lFgF6KIUyUOIdxZIHcz
eFS2orew1pimiyao74SOd3GjChr+E0HRIejCSFTHtMPR4eYw5VJnMXkqyDio
KNJetV2w+g6FQlI3qenHl8tgxM1mjpGo4UGPeJewJrCKKp+VFIok0CEoq3KU
qHuKMW4HvtIteVH/VFSJG02hUn49L9AzBQ3kPi59c3QPLUZ2jx+XsE50ckQq
FnFqaV2onJahvgkwmbs+onYC8j7lIRr70zhjT0DSTXoUhyCo3ITQZJWeq1Kr
fqjKmo/EyilMqZqqgyjxLm9p8RonlZXuICBr45WpKl7TsKhdOqdnkZLK4CSd
GbkDJK5HWCfv6UerGlA2fSD9p3MyiFb9SFHHjl5XdU92nG31tWHltElKn1g/
m0eHpIi2FprVvTZrSvMRlIErihrmnaQRZUgTstNDqpR69DmF0Ok5oI5durzu
wJ4byqnDiRuyTLGqIVav4/ccXLjtS3tdT+01rUqfQI9nl6z0yHeOE1EOc+xK
RiolCtr8AC87VoUU3VobxbqnSG0dCBZcv6tn9D07SU9e5mIoi6quTOeBZWVG
2lXt1bCkZ6OyznbIZZpIjyudXq/IJAo90YlSLhzNERCd+4kzK3RUyw3ZElxV
DIXXkold7CeOrigqqNWokIZVpUaCg88qnyMkgkH7W00wJlMTTpSib0D105tI
XnadCujTSercgpe+ryC4RXyvIHjIivMAl1CqfgFO3dD1/9r7zuY4ciXB33tf
Ni5uLy7e3tvd92ZG40eiJIree29ET4mU6EQjeiN6UiRFihRJ0bO7y28CWYVG
GVRXNZtG8waRgahGoRKJRCIzkUB13bC/QsDoscNymnIrY87HRY24z59kbom3
gCCnWk0EPjIREBT6bqMIv6q7QDX3U53gT6qgvgd+Wkji81ESt9Px1T/f3FtC
E8qvh4xbqx++GvOIAibTXnv+b4ZTL8R9u7ADn1TSudz+y+lnGs6aeqI6vsmD
fl2c2NqWpST7GyJpYgFIBbjjbGjrRIrJdO/t88UxT9kUFotJcDVgRQb0gIVq
Su3OzdWYg6qAuZgPqaTn5oC7eDfsrx94riBNETWDI47/qbgh6LwR1Fy5akk4
n/s0q1jD5siDU6RydtBjPrr/d0n1DjiEZrQAv4qFsv1lt4CgcHnYu7K11pHs
NZk1DK5Rhf8fZUt3aQf9LFmA+klUsKVk7CCfQvc3XNKYqkudHbTLT3J20DFf
HPV5fO4S0Yz2B0+SfOgMm8LSE2pS6GYLhh4ot4beE5Vr39Bav98PiIYgdH8F
wyLSV27G8EeeQsqDsLoeNPdhj0ZP+9B4F/e/ecEZzFbA4ruenkJI4E1d8sMu
Zr/mWn27wf8uVYPeq/5U6+GQ8nMrLSYG286C93yI3w1PkW9ybcXedrLc1BS5
uw75scL7Tg6IqfGYYonmncfMCj3o5raWYcvZ3ro7t4Q3SG6EpkeLn9gMCNw+
YQB6xPjZ2VEHqPiPabozF/HntvOw/Bckwf+vWrLMrcsS2EFfCjzrhuqD7/pd
53N6LlS4gg674hYJXPilvW1/OuWQcKADpjvSukKBuMMWE6sgt7HzMoK3Ywfv
yvy5qQp0DjA8Wg+kog7qvvFJd+zHB5K0g0EKKegh43JGWJKYvAXLdes8YZBc
Z16uG5uGW7DuXPTX5ElMsRuDde4lcH81b/4b5trGnQu9PN0aSncu1mmuZpmA
Bc4FnPYYEO/T32LBv6P14C1LRIoQeXs7KUzCDjy0FHb5Ezo9LDvoLwA3lU5v
2+q3HhSbo1D7PqFTKDuYDCdCprB8NvDobEAQ2AXdS7H6Q2oFJhjQGYL9DZh7
7V4hmwPHRRNMd9/B9mg8RQIUaB/KX9B8Fc79Kyg7Mb63UyFaf147qHN5sIQb
LkHypOgRy9Wfxw4aZh7WDgrq85QGEh8RXUL/Nsy6NbmUCrWXIuziBkR69eHo
Q1PPJyOTntsczpMw5gaBwO67kyk8IvwchPQwbCBEe/P9XI29e+PJ7RSNezLy
aedekhs3/uOSwlY8uhuCD7ecdOEKwlPeHFrcG6HP3UAkCb6XxEaBg7vRM5pF
lc7Jhmfuh8EuGGx/MKR98bLFvmwQ6ZxbtoPhjU4qzJQ4Wd0LmovQPGw7GF/v
hO6v5jopoZkRd93je2eh7WAAbek6dqkEzHVPyjn6XfmfwA56mCdfCyU6D+PO
/WqKz8n8K9pBEYEpIf+B2UFzrFEDJJIiHyH0lrSU2EFfIyyiNlwSze6weuC2
7YUIv9kKnhrkc2zZnaeIkrB0pqbteDOBc5L8fbx4fjf9wuh0kDwYzbwfew/p
VsY3ROL1p87evvfKHfYrSH7rScS9sPLmczels//Plri5Y5tTjpJE8qDZZc/P
UwpAT6BCvvWQ1Hq3m0I5vD39L8J/2+2KKAlL5+3Rk1xyU/WN9uveybh3Agz7
6NwvJWGTiOaw8vYt9v0hJBHzk8CTEv6nip4k2k2JHN52EtFz93QGmY8Ph2+i
FJbOB9uveyfj3gkw/ox28L7w/KslT6YlwckUjmNK6EmiXVHTD0rviei5ezr9
8T80vvkkJMzxt9j+lR9gv+6djHsnwPjLDj6MUfgWkyfTkuBkCscxJfQk0a6o
6Qel90T03D2d/vgfGt98UijyHmy/7p2MeyfA+MsOPoxR+BaTJ9OS4GQKxzEl
9CTRrqjpB6X3RPTcPZ3++B8a30QpLG0Ptl/3Tsa9E2D8ZQcfxih8i8mTaUlw
MoXjmBJ6kmhX1PSD0nsieu6eTn/8D41vosR/VC5I/Qfbr3sn494JMP6ygw9j
FL7F5Mm0JDiZwnFMCT1JtCtq+kHpPRE9d0+nP/6HxjdRwo+ROf7U91vs172T
ce8EGH/ZwYcxCt9i8mRaEpxM4TimkJ6b6ysRnjvThwHRhiXstvmTqvq3jYd9
O/7O/98+UHLT86DIe1AJORP2ez0J2StiuI5fe7U+jZdcc3eWbluwRfMxVfP0
vpKI4G+lR6ni/22PY0L8AZsLJHwutAEr34T+G9a/Gzxhn7o5PQHr8+U372wS
KVV8vjP8ofCEqsmbV/Oj6bHY6urq169fWTXmViXsY9IdTC7dduuicbxt+bmv
lKq+3DZ/wuK/r5FKSKfnzxumm9BzS/WTIPVBpVviW8r5c0t0Jp0SdvCW2vVs
OmB9NIWKooApjEajaPV0ujxkFjBVfUkVf0SVb0LbTVKq+nXHKWl6bru/qcKf
Kp6nql8OhHfWrghJWD7fdko5H26JnuTS7bV7N/TfnJ6wdCbXo5tzEi/AJrIA
KST4GbYvYfkQBGdYDtwEz72ke6HzG+KP8fD8nBsivLN2RQ+KZ15qUqr6dcP6
Sfc3DI/9UkL8qW3uT5Nub0Q88bMAaSwWQ6vH1+Rtoj8eH/r/GmifdGf8+dZH
IaxciW4lgSe18hzw8VTRKXowYf0bpqTpvCH+VLUbFn/YdlOF/6/knzxZrdsN
Fu4POvYBdboqZDZRNGqiwf3Wx/0u58td8idhQw98vMKOi6gvYcfxJu164vdv
LuXtioi5Vfx3kG5bcu5GHvxL7jLdixwGoSe1CN34DXo0FI0glMs08UtCna4H
EyL8F0/B5+P9ylgoGtyvXyWHJ4V0hv3QqaoR8PjQuiZ8RAnQSuI6mtm0EwwT
8PtVjp+hQNY9IGHlJBpyg3ZjPDfH4GCgA9x9V1QC/Aj6k2dKi/17lljC584K
ahz4z+d6f9ZMty4CfyHWxKa4cpXDoybC6SNwPo8EhzA9SjCRdKuCbRYp5pce
HaCruqZomuLO8aPM7pzdhVxTZVWVoYT/HiLWZHg0XWLgNf+8gXwKM1hugsfX
J22gG/HWCSWa5MhF+Hn6vfvi+fXAhDnBrzoeF39L2oK4Og6v2U2pCCmZvIh6
irdrrrH56/mB23hllx7w1P9O6RagTdjvP57kpmeU5BXUFBbXl1U21dS31zV2
1tS31jd1Nb7sqmtsr65raWjubO3obWrpLq9qrKx7Wd3QWtPQUdPYVlnTUlpR
X1hSm19UWVEBz7a2d/W3d72trG0trWqorm+vbWovrmoqb2ipbuosrWnKK60t
qW5sbHnd0tlbXN5QVt1Y2dDe0PaqufNtXVt3WW1LXmk1PFJR21xV39LY2g0E
YOvdPYMdHW9a2nuAjM5X/d1vhhC63r4bGJ95MzLR1jtQ09JZ2dRW29rV0PEa
sFU0tsJ1Z987uAbo6h+ub39V1dwOJfAIwPD0AuQ97yaGpxdHZ5c73g73v58d
mlwAbL3D44i25XXf4sfPm/tnKztH4wsbY/PrC5v7S9uH0ys7Hz4eTC5t7Rxf
z298nl39tH8mncaMnaMrgK0vF2u7Xz9s7s+v7y1+PNj4fLr7NbL66RhuQc2R
mRW4u3cShXKAg/PY3sn17tHlp+PLrS9na7tHKztfVj8dru9/Xd07Wv9yun1y
tXN6vXse3b+SAQ6vlcNr6TiqfY2p57JxpRlRw4hRuFQNKLnWjQhc68aFRnK4
Cz+hGty9UEgO11AH6kMOPwEi9HGoeU0rXxrGBYUrCtc0j1CAR+BxhAg0DT8V
41o1CTAR6mblC9oo0gPVoL5C/DojFiF6F4RTloyYTC4gBzmXFKqPwbzKRjRi
yDEyHZQoUVTwpBoz1IihwU8ol0iOFwRp1FAvKaEyLcHOxOwQoXcVWgGfgqav
6VNRC7D/UVozSqtFOMCaQOGljo0SqqCTksUjhgS5dk1ZeW1HgryWuEYdcGXR
EOXqK1ZhxOoapU2PWF1mXYtZ1xHZkICzKgFCoUrGAG+ZhTB+MUOSiTcD7I7B
YEQJwKgASHAL2CrpSkTXKFJQ7/I1XmtqVJWuDGIdJFKiS6oSgRIoNxRKrg5G
MGZea7KqkHJSohKzYl6TnHRJ1y8AiJBq57J8oqpnKHpwAcDuYgXMdVLnkog8
XGChckru6heQq/IJ4DHMp3AAYrpyocUuDOWCiJEM+RVhn36py6eacmIYZ3TS
nOsUAyIHnAQ/LYEWET8hxsqhjqKcqypSeKnpZ4p6AkiQMKivgazohIHQa2JP
odc6cC+my1HCE5WYV0NDPsRITeVKUS4hhwcNDWUupmnXADjw5JZ8bUB9HBRN
NuQoAR34rJBBhHEnkqCRCxxlzMEmw0VUcf6MqASiUE0nOZOua8Cg2yRTsuYF
k3A2y7CQid+VJauSJcAxswRmnE4nDuTADJAFIgiSafvgmphOioeUR01LqspG
BDoN004zLq6MmEK+un2tEHohJ8TGjIsIqQDLpViMKBnEKQE/IkTDwK1r4BPt
MXQdcgB06bGkrul1W9dQb/9k/7vZwZH5wZG5NwOTna+HevrGALp7hzt7Bnr6
R4bGpgHeDI69m1gYGJvtHZp4PfC+t//9m4Hx/qHJgXdTfYMTkI9OfBibXOyH
nyPTI1OLYzPLU0ubc2s7YE1mV7dHZpaGxufh8Z7BcXgWkPSPzgxOzL+b+gAA
FwPjc1Dh7fAEwMDY9MDIZO/AaN/g+7GJeTCFPW+H+96ND4/PAvSNTL4eGO0e
GOmfmBmcmhuYnH37fqp3dOLN2OSrd2Ntbwe7Bkc6+t91D41Wt3ZWNLc1v35b
09YFANXgVl3Hq9Y3A2+gR2PT3YMTde1vnuaW5ZTVF1Q151bU5Vc1lDa8LK5r
yi6ryStvyK9szilreFpQmZZf8aKkNrOsPr245sfneU/yypt7h8uau59kl/7y
PP/XZ/k/Pc397UXh46ySp7nlAHDxe0YRwB+ZxT+m5cDPR0+y//FrelpOWWZx
LeRQ8jiz6PcXBb+l5/+anv/zs9xHT7K+/yPjuyeZafnl/3yc8W//9eh//e0f
f/v5yZOC8rTCin88yYDCfz5OB/g+LePHp5m/pOf8/iLvj4x8yH96lvUICp9n
/5Se8+hZ1g9PMyFPyy1+klPwODv/j6w8BLjGn79l5PySnvXri2y4hjoAv+fk
//gi54fnWd8/y4Qcrn/KyEVs30OLj9N/ePICmvgpLfOXZ9m/peeSRtOyf34K
NMDjRdDW47zCtILi9JLyp4UlAM8LSgDto8cv/vPHP/7rp7Sff8/67dec7//x
9NEP6b/8nPXdD89/+iUr7Vnx47TCp89LcvJqK6o6aupelRQ3v0gve/akKON5
WcbT8oLs+tK8hsKsGoCKwsaqwqbSnNrCjMr89PKC52WF6eWFzysBKrIaG4o6
Wiq6awtelmbUAFTlNtYUvKzKayrLqivNrC3NqS/Jrst5Xp71pCT7WVluekXu
s3KoU5VbD1CRXVuWWQ0AF/Czo+Y1QF1hc01+Y1ddb09TP+S9zf31xY0lWaVV
BdVl2ZUNJU3V+bXtNZ0dtV0d1Z2NxU3l6RUFfxQWPSmuzKiqz2toyG9sK2tv
r+porWiryastelZc+qLsZVlLX0t/b9MbKK8rqK/Nr2urbH/d0AN1KrIqe+pe
d1S0N+TXV2VWAsDdlvLWzrru1029fW0DLytaa4saXje/edXU21zRCvnbzqGu
5tftDV29rT3DPe/G+8fG+4bH3gwtjU9P9A2NvXo70Tsw1z+2PDI9P/D+XVvP
TP/w4vspmKUw4Ud73gy/6pnsH1ydmpoaGBjt6Rl+3T012L86Pbm9uLC9OLf5
YWZnY+nj+of1lbnF+Yn5mbG15dm9nbXPn9avzg+Pv+xsri0sf5iCHEqODrbP
T/ZPjj7v7Wx82lo7Ovj09XBvf/cjAFxcX3yVoxcAV+fH5ydfIIeSy7Mvx8db
Xw7Xj443zy92ryMHF5d7J6fbX0+2AI6/fgQ4+LL2eX8FfsKt07Odk+OPAOen
O5fnu5AffVk/PFg7PtyAa4Czk+2vR5sHn1d2tubXVyeXlt9vb3/Y2lrY2ljY
XJ/ZWp//tD63Pj8xN9a3ODm0vvh+e216e3P6087M0eHyyenG6dnm8eHa590l
eHz749zHjRm42N9bhpLdnQ+fthfgJ+R7nxahBGF3dxnIOzyCZ3dOz7aOjtcP
vqzsHywD5UDz2dnuxcXBJfT04gQhcnF6eXZ0erwPPDn+skthB1gHDPz8aRVg
fxdYB33cOj/9dHG2e36+d3Cw/mlrCWBvZwUqHO59PPny6frs8PP22uLU+PTI
0IfJ92vzM4sT4+P9fTCyMPQwuP3t3YOdr6cGyHCvTc/3tXWBsp4fGYcK04Mj
RN2/GyM1+0bGegZBF0/1j072jQ13Dwy0vwUY7Oh729Lzqr67p/H1u86h9z3j
ILQguuWZVSXp5aUvKmrzG9qrul7V93bWvHpZ1laVU1uTVw8A13UFjXBRmV1T
l9/UVvW6obgt+/ei5z/lFqVX5adXPvkx+/dHmT/94xnkL56W5GfXFBc0Vpa1
VZS2FubWZT8ryc+oqChsrq/orK3srC5vLy5oznhRmZVZnZFZ/ejn3L//97Mf
fyv49UnJf36X8X/+44//+/fH//+79L/995O/f5f2++P8tGeFaWl5WVllpcUN
eTmVz58VZWaU5ebU/fpb/nffZ/6RVvo8o/Lf/+Pnf/70IjO/Nj2nqqDsZU5R
3f/+f99fRagfThfEClnnE2t7FdXx4jqmXUXViER+KjR2EEPXUiIAFaAcQAI7
K5OnIpJxLRsXUQ1yWCyw9QJ6CmThAB4HLFsiKlSGOhGFVLiQCMCF6VBrpDxK
cULTkEPT0Ba0wuJPgAcdlkvNdPiuLc/vSjfOZBXyC5W4HicxGQAu4CcWshwW
NbCAgjXLmWR8jWiwXCLrJo1gQHcGqsEqBimEmlDtVCZwTtdQX2M6+u+4qjqL
GucxArgIwsURPAUAmOFZbA6WjejUm8s36qczwFbwqRPJbOsrPKWSBdoZXeUx
wMUdrstidM11KZvLPXjqDLBhNymXGLCSc0UDRiErkIFX9METCqeauaKEnGCT
dAbADdIQHdnDc+nwPHp8KZ3FlAtZA5yAEJ46U2DFKh9HYodXkf2Tq+2Dk639
092D84ODq63N4431w/W1Lx8WdpYWd9c2DlfWDhaX91bXv3zcPIbyudmP4++X
Z6c31lb2R4fm37waG+qbXpzbWlvam5taX5rd2N08XJ37uDi1Nj++Ovd+ZWFs
dXF8fW1me3txf2fpYHV6a3Z4CWBpYmN5emtxcnN2dGXzw+etlS+bS/tL8zug
uT/Mbq0u7q0vf95ahkf2txc/b4KOnN0GgIutD3uf146+bJ4sT24sjK0cbHw9
/HgK1Q53Tj+tfV6eXVmZW50dW1iaXJ4bnd9c+AgwNzy3OrX6cR4068b8u4XZ
wbmlseX1mXUoXBhdmBmamR+ZX5lcgZ8fxj5MD04T3Ty7gdeQQ82l8aXxt+Mz
A9OTbycm3oxP9E1MDYB5moLCkd7R0TdjCxNLE0PT/d1D73pHIQeYn1zaWf88
OTLb3tRdV17fVN3c2dz5pv1VX2dPc0XNy8ra3paOt21dXXUtQ51vZgbfj7zq
72p42VnfXJlXVJqV11JV115X31he0VpT+7a9ra22pra4qK6kuKW6sq22urG8
tKoov6m+qr6usg48lMqS8rJCuGhtaQAoLMguyM/Ky82AvKQ4Lz8v89nT33/7
9RH8LC3JLy7KhYuy0oKmxpqXzXW1NeXNTbWdHS872psb6qtqqssgh5LGxsqi
ItB6OfX1xQAlJRlZWb9nZv6Wm/skLe2HgoJnlZW5hYXP09N/zstLq6srammp
hLyhoeQlOAStVU1NZTU1BdXV+VAIOUBtbSHcbWwshRJAW1ycmZv7ND//eXFB
ZlV5XktDVWdrbVtDVX1FQXVJTkNlYVN1cU1FblnJi9Li9OKSZ0Ul6fn5T6uq
8pqby6Hpp08fPX78XXHxC2i3tDSzqCgdSAKAEvgJ1NKL7LKynKqqAmgX6IF2
yyuyioqfZ2f/AU0XFGQUFeaUFOeXFBcCFBcVZGY8KyzIqaut7Gh/2d3VCpwE
xhYVZVVXFyPU1gIrSpuaKpqbK1++rIJRgRJopaQkqwLIri5uqC1rbqhsb67v
eNnwsr6mqrSoNDcboKIgr6qooKawtLW6Hka2rri8obSyraYBAIQBxh3L4WIA
1jndvSAbcKupvLauuLK5oq63pWuou7+/401fe+9gV19P86vRnuHJ/vHhV0P9
YBk7Bvrb+3tf9rZVd4DX96qxB7yy4VejY73joz3v4WJqYGbk9djb1v6hrmHI
+9sH4WJmaK63ZWBxfG1tZgtymE0TQ/PvB2Y3lvaW57aW5rdXF3cBiM+1sD03
szE+8mF9cWdzeffz1smXvcv9T+d726eb64cLMK1WD0A/TM58HBpZHJ/aGJ/9
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
    "], {{0, 371}, {600, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageSize -> Automatic, Interleaving -> True, 
    Magnification -> Automatic],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{297.500012020269, Automatic},
  ImageSizeRaw->{600, 371},
  PlotRange->{{0, 600}, {0, 371}}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Customize your Plots II", "Subsubsection",
 CellChangeTimes->{{3.4649380105327997`*^9, 3.4649380222952003`*^9}, 
   3.4649705975162*^9}],

Cell[TextData[{
 StyleBox["Reproduce the following",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 " ",
 ButtonBox["Business Week",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.businessweek.com"], None},
  ButtonNote->"http://www.businessweek.com"],
 " ",
 StyleBox["plot as good as possible",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 ":"
}], "Text",
 CellChangeTimes->{{3.4649380251968*^9, 3.464938045508*^9}, {
  3.464970525491*^9, 3.464970525491*^9}, {3.4649705629309998`*^9, 
  3.4649705670025997`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQe4VcX19g+m91hjioXExF5AQGmigCWWaFQQsEsREBQxorQQFRBEqVYU
RTpSRCMIUiyJdAREFJAiqDEi1ZJEvffO93O/2e83nAtXIVfEP3ue+5zn3LP3
nlmzZq133jUze6bsVdedf9U3crncHnvkciPL5HKfff9kw6CCDcPD+lHhvdFF
/xxd9O64sO7psHFK2DAi+8v+sr/s72v9V/TeuIJ1Yws2jtLfZ0DH37qRYd2I
T9cPK1g/Iqzn+/CitYOL3nskbBgUNg8pem949pf9ZX/Z39f8b2TheyM/XTey
YP1j/CXQN1LQB+4VCfrWDi96d9hnf+uGhA1DIIHZX/aX/WV/X+u/wvcGF64d
WvDesIK1I8BAEO8zrAMD132Ge/+Fvs/uHAc/LFo3OmxI7sn+sr/sL/v7Ov8V
rhtSuG54wdrR/CXQN9ys7zPE43PDyKKNY8Om8YWbxxd9+Hjhh8M/XfdE9pf9
ZX/Z39f67zNA2zixcN3EoveeAPo+C2nXJVMbn0Ffwv02ji58f0rRRy+Ffy8p
+nhR4cezw3+yv+wv+8v+vuZ/Hy8OH74SNs8t2jC5cMOoog2DP4O+98Ym0DeU
7wWb/1r44Zzwn/fCp4WhoLCw8KNQGLK/7C/7y/6+3n/hw1CwKfx7TXh/etHm
MUUbHi1cN6xw7eOfQd/aYUBf4ftPFfx7/mf3hFAUQkH4pLDo4+wv+8v+sr+v
9V+REO2TDeFf8ws/GFu4SdA3TqN8hUDfxrHhX6+Fgo8KPrs/uTlLWcpSlr7u
qeDTz7gcpO6DOWHdmM+i3c/mcB/LoC9LWcrS/+WUQV+WspSl3TBl0JelLGVp
N0wZ9GUpS1naDVMGfVnKUpZ2w5RBX5aylKXdMGXQl6UsZWk3TBn0ZSlLWdoN
UwZ9WcpSlnbDlEFflrKUpd0wZdCXpSxlaTdMGfRlKUtZ2g1TBn1ZylKWdsOU
QV+WspSl3TBl0JelLGVpN0ylB32FhYWffvppUdH/v6OgoEBfPv7447ybP06T
HvQN+pFM+DHOli+ffPJJUZL8u77rBt3jp0j/+te/nD93+h4J9tFHH/373//m
uzLhkx//85//OHPn80mS+EX3k6fqxS8U4dt41lnFSoiz4h4e5xfnQM565MMP
P+SLJeSL9KA7+dQlviCGcnDOuocbyM0611VriU+V5avKJFa1m8Dy8wWZfUNR
lIrnI0lciiWJK6Uqo7eCJEmlcUO7Tf27ZLBsUqP1lldcrBn9YlGtQ5ci9fr+
uNWsBzWEbSOuu6XS7zYGvqteKo7vbiDLgPnJPq03ZyU714MuTi0rBcZFyzgL
0mRPCZGhyvJdhIwtzkfNpzrqNr7InKxzbrA3xU0vOS28lOlM4nYJu1oqVeiL
1RtS1163bt38+fPnzp07b968BQsWvPHGGxs3brRjhrSt1Xb6d9OmTdz22muv
vfLKKy+//PLixYuXL1++evXqzZs3/ydJdliBEundd99du3Ytj3Dzq0niy8qV
K9977z2aTK0gHODft99+mzsl1Zw5cxCM74sWLZqbJB6kLFmCmtvWuGzZMm6j
Fnpw1qxZPMsn31966SW+v/766+vXr7cRkj744AN+Wbp0KVVYkCRkU13sIAZ/
HuQLMq9Zs4asuJNseVYVwVkMZUrczFWEIVtqxFMCln/84x/IiTx8LlmyBAHk
gDzL9xUrVqBYZOaTtqCa3I94FCcNUCifCxcu5MuCNK1atSpuX32X2KqsBKO+
NB9SkRtPkQm65dk333wTfw8pXsmpjTzUjhteSxL653GEpE0RO+6/YntDgf/8
5z+XJEnVJL3zzjtU0MqkodU0VAcx+K5Gp8mQjYL45EeK46m8Pivux1VBFEtF
uBmbJBO0h9JQHTo0KBkQ9AhCUguakrJmz56NnJgQUvF73HnJPqksd8pNkJMv
1Oj999/XPUjI7xSNwLIHcpbp8guXyFyVJVEW3/lUwyE5RSC5VDFjxgy1C58I
Rp58wePQp7pg+6aRmTbFupBnfpIoC1FlxnGtlciEG2QAaOmtt97aJmp8halU
oS+Ph4SkvW655Za99977m9/85re+9a1cLle/fn3079vUq4ZUySgNm+/bt+/5
559/5JFH/vjHP/7BD37w29/+9pRTTiEfNGkW5EZRoU899dS1115bo0aNAw88
8Bvf+MbPf/7zChUqXHrppSNGjLDxqBPH7zp16sRtCINU5M/93/72t/XJv1Wr
Vr355ptffPHFPAZCC1auXBmRvpWk73znO2XKlOHLHnvswYN8khvPjh49OqRd
ITlgfjfddFPt2rV/97vf/fCHP9xvv/3Kly9/1VVXjRs3DqwOERdSWVhgnz59
zj777GOPPXbffffdc8890QPaGDx4MOCg6osw8OALL7xQs2ZNSYKSmzVrRj4U
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
52nenX5c0xh15X0mirHJ2Q6F5x432Jb+v/RUetBnX8hTvvuR2Ati//UjhjiH
Nnma36qiPDDrzG1FAquYpMWdbJ47i6LEtCGGlIJk4DFs6X1uTeegJhZwhdSW
vEoqFjvuWG2HhVuO3RVEr83G7mZHM82IiaIFtgHHR5xYEgOCc8jrL/I+C9M5
i3h0KERer2GxuI6uQjwRoKGz4tgVo4cwx0Omcd3dytxg2IypV0hdu3DLU9TF
w2MTcn2LknFg/WhiH1ckNmlZQh7vClEAGHejn8sts/SVpdJ+kS2eYsvrUvPo
t/E/HgsNxUzIM3ExpYnzjH1QBuwoQ7O3hk3NEeuNVEsbIjuXSEYG9/ixf3ke
RFLlDafrTmXyaXpQo/N33x2P4ViSvCDUYU7Yko661nnlOiiO9aM8NaGTV9MQ
TbXkDUwZVE1RQgS5IZ25dhViSYqiwcm8UTjbhuFF/NbEWylGRbdsQTQ/pWYt
TKcdQ4Te7mXcweXZSWE6QZYH3b7NDVoYjbkVpuvDw5ZoVhideBXScYyY1uZB
aJZ2oVSqS5plObKNTZs29ejRo02bNk2bNr3pppseeeSReCf2kNjJ4sWLR44c
2a1bt06dOl1//fXt2rXjEX7RW0t5XXkMkvr8+9//ftttt1133XWtW7fmcT51
rnezZs1uvfXW+++///HHH1+/fn3MakCAgQMH3njjjc2bN2/VqtWdd96pY75D
8rJk7969WyYJSYYPH+6h7BAxpVdffXX06NF33HFHx44dKfovf/lLz549x4wZ
s2rVKi9+WLNmTf/+/a+99toWLVqQG5Jo7wKhx8yZMymdq1zq0qXLlClTELJf
v37czI8U/dBDD3kQbOXKlRSHAimL+3mwffv2yCAP5eott9xCfakLJeow7pDE
LKbQL7744qOPPtq9e3cepC0Q++6776Z23Bz7rOlWzNNCggzPPPNMhw4dEIDH
keFPf/qTJNGp6Kia3BYsWOB+5JVXXmnbtq0qyCey8cmz5EBFaGsEWLJkyVYP
9kWH06dPHzRoEFqlUMri/nvvvXfChAlvv/22R5Il7ZtvvnnPPfdIHhVHEQgm
M8Ak+E4DaQ8cdEU+/I4kGADfJ06cyLPcrGe5mUeUG/Vq3LgxuXEJq3jhhRds
fuvWraMFH3zwQSouo+3cuTNizJgxQ/uS7aAnZmknp1Kd5vCOFiFZ1njkkUd+
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
X4pTeh/6nC/fMGb9Vk1X0g60ZECKl2v1/ZR0ZS5TpQnlSGpTjd4QyycrxNtP
td64W1v/PjFF2Ld5w7ZscE+i4Q6MzkSf29lnOzYNooATONIm7eP51j1nSQ0D
pWQJXVCSC8MqBCjo7N2eZtf3THkurPERm49Y7pBNng+IdJ30Cq2hWpt8mPnB
E8SQHF1EpVA12yefL0UqvQ991uqF+ozTVD5qCjEkXQgbXImYjtmpaosDZ/q3
ZMItXFBNlhvjavJTDmt9cTxZ9w5xTBWKn2nYtmwYhtJ5TZK6BrF1dU1Ddmh3
ot78edvLd+tCtLnxwHyir5HcR4wHcnXluUxNW7rn2fU9UxsXRJ0TPmoDfclA
ng9JKbpuUb6hVk+UKgtn2Plmx8gphKiK5I9y+FKs0gvRt/I9Y/ppckNlqzva
CIVKpSsnBrbWVLOTa8W5l+kfv2Sruuvdp9oO3dBJziB5m/YF2myUwi2+aViq
6wBjs++pTucm2cwppqqajmbCsnXXYaSBqTRiappjQd+DhkO/thSy5FH5lhN6
nFHdnPKpSFaI5WZfZHz4BPOadIjv3OJL0Urxo6+tMWrcfJgz9y9okoq0zmQu
x0b7qtkOK7O77Js7+qFImq6aFi4GNjHtrbc7fncVO8K8ZdqTSePwmTLB7jab
f2KTtUuMJ6+Vmw7ocRZ1N/r4UJYPS7ccq79+p6mJtGa65XnwxZcukeJHn8yV
ylxAbxxszTpdfffOvPglLaNhyIYi65psqoqt2B0oc2ydjk7SEAsWpZltuBMT
LBoVkHqvOPjSsvClZVqUjSYbz6WjHBId4pA22a/eJN186A7gv7e9KZsMiFzI
SJap/7zKXPshfb84pr88ry/FKsWPvlyyVGms1VMxNVkq3zFUe+duO/clMSyU
1nBHfmH9Mt3PodM9iKuumG6CwkcBSHFHo6HKrms0c2BmyQIqTd2w8lkjt9EQ
N5jLXpUfujSbjoqJoh/J3W70Jajfiz5mL/XW4fo797t6NJ3X4YsvRSnFjz55
wmBofXJ9uSFU0hn3N/1Ke07Q1n1EDI3159FuO+APEHPUrClqroueZwezDivH
Hbp1g+G7CceKG+2NS40v/228/7TyyhTrqTFkzgX2zQfJyRJwL5fe6bS+tmRM
wfuFC6qpav3x6/BWQJX6Xn2+FKsUP/okgQZWohN+k1FlzAA7McCYeoT08KXa
8pdIdllBl5RhEU0kCpt3D4vX9VNWiZRz2jZam9ZYn7xifvCM/uZMbcE47al/
6A9dZsy6wJx+rjPlOOWWo7SpQ41JR+Uz0Ryd41ArJffpcRZ1c8rxNZoQUxqG
4C2j3XmKsWaJo4s++nwpVil+9OnxfkoKOKrUuAq1fgBdTTtTbTRWZv95lbHk
ftK6wjJg0cL61YkumfkW0vwx+fJde+l844NHjTenG69M0l/gtWfGkEf+bs/+
g3Ln6PzEQ/IN1RIf1rmIw8X0sX1gSqMMcqICxUDmOJ1ct1ePs6ibk8jHjGQF
VD6Jj6gTDrVeSBviBt+3xZdileJHn8pVoz2qDZWiUJHnQ/l0jZwZrGYGtsUj
xpw/OB8+qK5+S1y1SPv8OfWDB3KL7nKg1D1Tl5t9Ucu00W2TD8mPr5LT/WV+
Dy0V1oQoSypaNyw7Lqgky1vSVVB1aHSCsXtofERvqFKEEqm+pMdZ1N2Ji5j1
/Y14qZgeLDcOIdNOUltW271wvShffPk2Uvzo21rKJ/rI6ag28RBr6on2rcON
yb8CHiWuX88zpDhT7rpf5Lky3I4sX5vn+ksTDiCfPktMzXRE3RJpd4JFO0vp
gJHtD/z60utlB0YfVyYKYSiB+cxgsWGImKmVUhFJKPqJZj2VNK5ESdFVNVGN
ohDMjxukPp8irWttompEc5gLOHG9vn30+dL7ZcdFn8RHRC6cS5S31Zdm42XY
oHHjhWiPM6RIk9YQ1PgaPR3RBBqHX8pUtt52kv3ZG4QoOluV2GSLs7jLEnf5
Y+KLL99PdmT00dn3Gh/Q+XIkbCAf9qWfvkOCCi0no3IyZPL9xXRMzYRAP3Ph
3UTbwOYCOoYb2dCdFONH8fOlt8uOiz4xVYbDzVSIpGJI2FCFAL7scYYUaWqL
R/DikOqDNleRFcrVVKnDB5QHLiNr3rEtgy6VQh0pXfQ5huLPcPOll8uOiz4l
XaaihXJhLRFR42zVjDJJ2PlGZjspSYmIlqlUEmGLC2e5frlkP5uP5Cce5rw5
g2Sp4meZCpsIYzuajz5fervsyOgLygJdWFaMB5GkRJB65fnDHN81GckKJTVI
46IaVyGnytsSJZJQiReK8eg1ZPVH1EHcltuD4ziq5g90+NLLZQdGXypKfY+F
iDsiGabGGh8WuZ1uAlpnJTsxIMftp/ERKdHPaqxs4yua01UkUa7d9Tvy+SI6
WcYR28OAObKPPl96u3Qq+kzTZGv+5vN5tuE4jqZpuq57O3xziToLfX7qltRy
4yDl2QS915btTo62Ld/R2ZfeL52HPlDOMAy24To5INv2FmC7QmgoKYMtkq6q
6lZL5KOvqFK+oVp96BKy6TPHjQdLHN3yB3h96f3SeegD0xjxCAsO4ArT96D4
MfQRFu992yXy0VdcCTfothOct+403KWQia5YuuTQlfF88aUXS2f39TGT1tP3
mBTiDts0Tqi1VZPIR19xJT1ZqTXUGg/9QVVyblhXzTQUm0jf56n0xZcul05F
H4AG9HlmL7Nz2QbpoCJTCD218Gsy8dFXVEkXBlEPoluPUtYsZh0bNg1/6M/n
8KV3S2ejj3Qgjo1uzJ8//8YbbxwzZgzHcTNnzly+fLkkSdiN4fHrM/HRV1RJ
TQ/W+IjSNFh9dYqRXWu6z4jtu/X50sul89DnDemyj/l8/qWXXjrrrLOqq6v7
9u271157DRky5Oabb162bBn5ikW8WYl89BVVEtNVeipGY9dPP1Vd/ppu0zUA
7G8eyffFlx6Vztb6PD+WXC538cUX9+/f/5BDDjnjjDOOP/74H/3oR0ccccSc
OXO27eLio6+4kigEjUxUTgTtTET5cK5O53QYRPHVPl96t3Qe+mDhsvELpvit
X78+EAiUlZWlUilsf/LJJyUlJbvuumtDQwPb3wMg83hh2zhWX/labuY5bUKt
ygVtIWCNq1UzoVbqkxzxUy9M67i+Er937vo9xEw1ee5KsupdIrmzOnz5TqLp
omJKLCIEXSiQtK8Xo5toJgZxOhbVcn/y69kTNqxAOkYZiOte4mx9TKFz/frY
hiRJOHVra+vkyZMnTJiwcOFCaIDPPfdcv379Bg4cePvtt7NSMdc+RVEKMfjo
o4+eNPS4kZU/HR79yfFVex0b+snQ2M9Oiu1yQmzXkTV+6o1p2OBfnFrzsxHV
u58waI+TDiw98ZjDho44efTo40f58p3klNGn4u/I0aOGjxp54qjhw0efNGLU
SKRhI046aST97pSRw900YvRI7HhyT5e3t8iwYcMuvPDCbDbrKVTbUvk6FX3Q
+hjBgDWgDx9XrFixfPnyzz77bP78+eeff/4+++yDsi1YsIC4pjF2IB2Ofx6u
QUjhyov40aHE0AF1w8pvOHaf+mH9uKG/qBu6l596Z7rhpD35Y3+RGN7v+hP3
uuGYPeJnHZ684e8Znkv48p2kfszV8frr6+I31HH1YzmuPp6M49+xY+M8l+Q5
jktwyXgqWZ9KJlJJjk/69dwuyWQSipYoioxCQB/TBrsBfexc7bm6go01a9bM
mzcP3OvTp8+JJ544d+7clpYWlM3Z3LXPQx8t9srX1BlnSnzY5Es1oTyfikqJ
fjI/gE3C9VNvS/nUIC1RpSYjbfWleS5qPnyJveY1+RveuL5sVfJsGqCTJ04r
cTTHdm1b90vqNQSzzjZtWL6WSZPtTxlsF/DHc6XDNoPMtg7oPPR5AxyMYCgA
LN8HH3xw6NChu+2226GHHvrUU0+tXLkSyl7hvA/S4Q3434xWvqFMP0PhwmYq
oKTCLekqMUEZqHIVfuqNia5SVIv7JdVVSEJUn3aS8+YM09ZsX76TmC7jFLFV
01rRKnSaZF2TSPuq0m6Pls2SRSdM++JKIVLw8ZvDBXSq1md3TNQl7gjvNddc
M3DgwF122SUcDl988cU33HBDPB5/+eWXCwc1DFfYgfheVVX705fl6edm+UEi
jQkcVtK1mhCTUzUiF/JTL0xSsqwtU5Kv76PXVyjpatw4dc41pG39Nzx4vmxN
HIPIYstH81s/fd7Kb7BszSSGBoXPVGxLo+uqumYcdR03LcvwvYg2ky285rYF
wE51bmHgZRxbu3btvvvu+5Of/GTXXXf9wQ9+UFlZGYlEgsHguHHjvB5Ihmuv
tO164+ol2szz88lqtb5Uq++n8REzUaFzEW+lSD/1qqTHw7oQ1Mf20erKdSGa
j/fP3XmK8fmL3+P53amFtoENn7c8/Lf8XcPIE/+w3plttXxCW4aRJ7bqDvyy
IV82vNvTxe1l4sVF+QZrl3Qy+ph/C/4Cbvl8vqmpCWpeKpVKJpNjx47leR4b
CxYssL8SwYAxkG2QdUvMmWcaqZDdFMk2Vq/ha9vqS0mqvMe9OPz0tSnPRZ3G
GkmoaE7EdGEQEUq0Ww7SnslYvnwnUVo3kf+8Kt1+ssz1scYd2HbHKdIL18tv
zjby6yy5xTZk2k8OENpEN4iimj1d3t4ihYMa2GB61LbGeXfgUKV+6paU58pk
rtxdrj0kJYKyEFWbasyJ+zkt7+e09VShp+tUmqynynK+IW7PziNZo43YOTRW
zXKjHsGStWldyVIbefii/KTDs1ylVd/HyNCw2OaUwzf983LljSn2qtcsaYNu
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
Tf3OFl5r8SuYf+Y+vzmpIUcq1MxcTWV4R31Ex+DITu5XL1dmPsF++G9ox1p2
cA8LhZi57qkSNLxBBovQ2oiWe7sWDs3ZBfWh/C+ZFhhzeSA73p2dYPZxZNZ+
wmvocOela3lJvsym/rGXeldMZ4EicxVTdvR0dEjqk8cxcjjbeB2t3NnJ7mxz
7J/HabZWlTjjzQXwHcn4VyCvdSAv1Z2b5hp+nn/stYH3+gTn9Av9/LK2dSFz
7/8f2ZF5c2g8NC2Fak2UM0LMvz/wZb4/r60/J84Fgs1L8dVhvc1NC+Snw4p2
De/smtxXP7DWbW6uLanvMGIkqU8eNXCUONq4zfVSEuCmKU78mgsAmnagM8Pn
iPc7mvlzUzwFHQ/mdS5ypJdktQjkpAWGdQi+dlno/XtCnw5SFr9jbPqC7V7O
Aj6mBsn51Q71cih6yA8nWN/6g3fGI/7sZF9+grmeakErM+TaTngNHWD1Ymcb
/7C27oK2nmHtQr+877c2K69xgqguSOqTx7FxlGQleXLi/XlxobzEkDMtlNMK
v0pucjA7CV6wyxEHuvNlNleyzan6Rc6UohycJOG/5gr5CGFMN33qA+zzTPbr
R2z9AmPXb4Z7t6H6aUlU0xRkauD7N31vXRscmuTLNdcYdOWl+bNa1HrCa+gw
peRo5StID+XGQbCuKfdrm78194c6WiCpTx7HxhHMSg86W/ny0oocqfuGpu0d
klqYnVCS29yVlxosyAjlt4UvXJwV581NDOUlh5wpem5bPS/d5MYc8FiyNyvJ
7YhzO5qFHO2CY671z3zGv3RyYPvKoPeARhtLG6p31mDfy+eHhpifCwxJKoHd
+FKzWk94DR2hYe18zlSUUOao785P2+Nsz1ZO8JbsqnGCqC5UH/V5vV7aYVy1
QDetvbH0UCgkbjuOS/4LBINBv99P52Zv2v4N7vE9Q45UV3aqf3BT5kz3O9OD
Oe35ntTykEctHnsdLc3lRp1tA84O7lEXeifdqy0axdZ9Etr0beGU+4ocLZX8
NN/wTiW5qf7seCMrtabjU1sHfPlgfmtYxQGzq7dNaEiy8dat7Pf5ftXnM/vA
Q0HGSszhjwGmmrM8NEWv0cPF3EGmhFlGN5fKVmmzqBqnPk07VPuZ+/FZ1Ady
W7hw4aBBg+6///677rpr6tSpe/bsITIkVqRfQ1g9HK8Et/3sfuuaUEFGyahO
xbmtfMPaFw/PCI5oW+t5LQ954IBzBztQg9mT1dKb1dyTnxF8/Uo26V7f+3e7
RrQPZjVTna082a3dQxP8Wc3MOby1HeEaOoqGxMHnRQJ9WQm49L3U1Dv6osCX
+cbezSZLBIoY81gbt6kaOEir+TZA1ZxKYlAjrGGtI2E1xlaIanV4wWmcABVF
Wbp06cMPP9y+ffv4+PgWLVpcfvnl8+bNKyoqMsxdWzR6nmiQv25e/rUyML43
c7b15bcryk4pyUo7kNkCFai5WKI85FHbhycn1YcaObcVXGP4v56s5n5z6HJb
n6NlwJGg5mf4Czq6ctLNrZTyW8MTrPUI19BxIDMFCdTyzLm9/vxUX3ZTT0Er
96Te7t9ngebM0d2aD0YXfDsvTBrF3CqlRg8WgKVp7oOswbZSrfGYTFFZxZuQ
Vh/1kaXHvd3i4uLnn38epHf11VcPGDDg1ltvPeGEE55++unff/+diBEEiCfp
l7MlfoM7fjk48TZvVpLf0dyX3cxs6MttoeTF+3MS5CGPWj+Kh8aXZCYUZSeV
5CTjcDkSXFmJriEJSmbLUHaGLyfD5YjzOpoqziQlJ82bXfsRrqFj/9Bkcz2r
nBbm+HBngj+7qTerqbugtXv6ffrBzZZlw5hft/YrZ9bCBjVLfoZuEkhI8cGw
UkMmkyiaGlQqXoy2+qiP2IwMP1zu3bv33HPPrV+/fk5OTmFh4fz585s1a3bJ
JZdMmTKFuJHTHTEeLnHi9Xr3rZixdVzPnS8l734pbvvguO0vpm4blPDXoNRt
LybJQx61fuwcFLfjxZbbB8ZtHxi/44WkbQMTtw5s+efzTfe+lL7rhTbbn0vY
/nzD3YPO3vViws7nEnc917jWI1xDx6YXUncNStr5Qvzm5xO3vpAKUex4PnHn
wKS9+dfs/W5K8a4dRa7g7v37PMW7C4sO7juwu7CGsau4pLDEZW2HZ463VMFD
iq76K27sq1aHl9iPWS14e/bsiYuLS0pKeuONN3Bnw4YN8Hnbtm07fvx4Fu7+
YFYfB34DgQBZjGPGjGmZ0bFlo+OTz6yXevbxLRueHH/maSkNT2p1dv34hv+Q
hzxq/zj7pISzjk9qUC+lfr2UM/+R2uC4lLPrpTSq16LhcfENTko687jWDeu1
anxyswZnNMJl43q1H+EaOhqdltbohKSzTkIhRQlNO/u0lLPPbH3WKThpGdek
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
1AUY5jTeEO3TYZIOuAk+sMoUne3fyibdD4fXNTxdzW7hzWsZym9wBFKfqqq6
NQ85MmWwZhWFn4tbkAcCgf99EM6+tXYN34s8GAzyJ5k56ltCQuJYQcDwB4NF
JdP/qQzLcOVmhHJbqfkZ3rz2sVJfYFgH39RHNPdeTTfZ1NwIUzeXiK5G6iNO
o2iDuMCEoDKQG0449Yl8SBRHtCaecCbkdyjAimlaQkKirgFmkKYHvN8MV8d2
c2cn+RyJAYc5m8Od2zqmQxvdLfjhE8y3TzdCZv8JU4PMUFmowg/bcnjBUSA6
TlPEb4fWIWSHHsAdnRapEX4jWI5DF8xIQ0JC4phBEKaZFvCu/SI4+U5XdnJJ
blt3QduSvAxvdkJMh6vgHPe0R1lgH7OoT2VaUTDkCVU/9SkWjLCjCiYkr1Y0
2yhpf/7557Jly/DLPWWc4Jf8XHJ4uWWol+dKS0hI1FWYXKCFtMKt2ifPWtvy
JgSdLRVHU29OSkyHO6+zb/pThucgaMbiNEMLLxFYPqrD6mMWa4HBxHMQo8vl
8nq9eXl5HTp0ePzxx4uLi/FfIkzu54pOrt/vB3/+7Y0NEhIStQZN0ZnfawRc
oYX/DQ7v6HWmmVv05ib6s2M7WMH5bPrTRslBTTc7kUOhgKr4jMCeaqQ+8k8N
oe1Ot+iL7vDmPp/PN3HixKeeeiojI6NZs2aPPPLIvn37cB/kZhjltD1GcKmE
hMQxAXPIS5DpSnDF9NCbN4D6XI4kd3aCz5ka08FGtVWn9GXF23TD3PNXM5v7
dEN1V/jd2KmPDLNyAwN9gfGIwYqKinJzc2+88cYUCwMGDCgsLNQtc5G7yXq4
ARD2Hr0ViuKbS0hI1DloFvkxLeBf/7U643Etv1UgO96Po6LVmys4XGMv3Pne
A0wrgv0VUoOMDyCs8MP2x/W53e4tW7YsX7580aJFCxYs+O677xZZWLJkCe7D
1f3ss88++OCDm2++OSEh4aGHHtq/fz+9CPIk45DoDgRI7YTgPQQyUkJC4pjB
8IJhecNefmXU8KzBA3Mfvrag+0nZV5055PoW+dedFdMx4vqmrz52zf5in8Wj
XpiRSjDEjOps6wNr8SF548ePf/LJJ2+//fZ77733rrvu6t27d58+feDkvvfe
e8RpsOiGDh0aHx8Ph7ekpET8siH0C1PHB+5Mnjy5u4SExDGD86+4oPtFF/S6
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
m7YWmOLVECqVxePieC25nfL/lStXrlq1Krvl7YI1zKJiqtVYq2IwaL+HP3Ok
wfANyfVCkp0yY+9VPx4R7pBuXgf9mvdqXxhUr/Cdrn6WqM4QauPW+I95c8za
qcvhAnpdGpQq8a65qHVUrZ+jl0hx4DvvvHPvvfdeddVV8+fPv/POOzds2KD+
iuhQZ3pJLLknADY98taU2sF71WOnNYHXLNcbnkZORPWrVqdMg+o1vK1UbfQk
WO2wda4bVqhVWqooPxg+kVfH05ZF4kN97S+Ww49qhQ+Gv3VV96mRUypc1aLW
9UhLhtEcaUb7nV9QX8fQ0b/ZIc7hJAByOVnopaETA0FByULx3svklhbx5uf6
NSmj9qpPjdbQqrvV/lhbJIzbeillcv5oKTFdvVC9hmUZeRNL+m/LZdJrRivN
AG0r6OdorXSxXm+dApUh3bVKswzlYY4UNXVVx5Q0WY6Q57hatihVRGPNPJvR
ErI+n5MT/TL8Va+EULpJr3o1TVq8TvtLlUXkO07jQ/0ysehfn72pW53G5Nuc
4kNd9ecqUoxa+amH+CG/lLnWQKTB2b/Ok0eTxiS9FC/tm1GvlRLkenMVZfg8
Ql2S1LhtxdacKP8dXX6tupgxUtb+8HTxqNOFRaaq19Pl+PX5gbqsqFF3mNb9
BHnXuta1E7B11Ne1rnXtBGwd9XWta107AVtHfV3rWtdOwNZRX9e61rUTsHXU
17Wude0EbB31da1rXTsBW0d9Xeta107AdmTq27dn04GJ9b/s/ef+5J/LwZ/K
dClTpfzcL6Xbuq3buu343v5afjw4PTV9cE/vwL/2J18bTKC+t8v+bajvp/HX
Dv74T9P7tg3+tnswPRkZ36B/iAK7rdu6rduO6+3nMtVDgT9PlgP/NpjcPJh4
o0xsLfveRH1T46/19r462PdWObC79PdPl/4vvx71S7d1W7d123G9DeR+vVIO
7i8H/ijZG4xvHoxv6R+qeRsOnNhUfvyXsv9P5ecfFMXT/cmpX34qvQPd1m3d
1m3H+TZRDv5Y/vpfZfKzsu8t1Nff82Z/fGNzmePtMr6p7HmrTHxSJv80+GnX
YP9Xg4nd5cC33dZt3dZtx/XW/2lnf9/O3sSn/fF3Gt7bhPp6Y28coj5l78Tr
Zcy2rUz8ATGWPVvK/2wb7N3Sbd3Wbd12XG+9iT9M7Xl7amwbuhvsOZTsYb9f
qW//5kPUt2ddGTt02be/b91gfG353/WH/u22buu2bjuuN5ne2IbeX173tyly
Nwf7Hfq8961D97r8ZcNgbGvvx63Tkxun927sjW0phy6FdFu3dVu3HdfbNvw2
GFtf9uC9LWWvIveNX8/1dVu3dVu3dVu3dVu3ddsJsP0f9g5rSg==
    "], {{0, 514}, {425, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageSize -> Automatic, Interleaving -> True, 
    Magnification -> Automatic],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{248.33334035343543`, Automatic},
  ImageSizeRaw->{425, 514},
  PlotRange->{{0, 425}, {0, 514}}]], "Input"],

Cell[TextData[StyleBox["The data points are: \
{2.9,2.45,2.5,3.5,3.7,3.0,1.75,0.75,0.3,0.2,1.9,1.6,0.5,-0.5,-2.8}",
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]], "Text",
 CellChangeTimes->{{3.4649380619816*^9, 3.4649381157860003`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["4D data visualization", "Subsubsection",
 CellChangeTimes->{{3.464940716737*^9, 3.4649407237882*^9}}],

Cell["\<\
Consider possibilities to plot a 4-dim dataset. Use the following data:\
\>", "Text",
 CellChangeTimes->{{3.4649407277974*^9, 3.4649407526326*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{
   RowBox[{"rad", ":=", 
    RowBox[{
     RowBox[{"2", 
      RowBox[{"Random", "[", "]"}]}], "-", "1"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"data", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"xvar", "=", "rad"}], ",", 
        RowBox[{"yvar", "=", "rad"}], ",", 
        RowBox[{"zvar", "=", "rad"}], ",", 
        RowBox[{"Abs", "[", 
         RowBox[{"xvar", " ", "yvar", " ", "zvar"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", "100", "}"}]}], "]"}]}], ";"}], ")"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Fourier-sine approximation to square wave", "Subsubsection",
 CellChangeTimes->{3.464286480743*^9}],

Cell[TextData[{
 "A square wave with unit amplitude and period ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "\[Pi]"}], TraditionalForm]]],
 " is defined by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"x", "+", 
      RowBox[{"m", " ", "\[Pi]"}]}], "]"}], "=", 
    RowBox[{"f", "[", "x", "]"}]}], TraditionalForm]]],
 " for any integer ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]]],
 StyleBox[" ",
  FontSlant->"Italic"],
 "and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "=", 
    RowBox[{"Sign", "[", "x", "]"}]}], TraditionalForm]]],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}], "<", 
    "\[Pi]"}], TraditionalForm]]],
 ".  This square wave can be approximated by a Fourier-sine series of the form"
}], "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox[
     OverscriptBox["f", "~"], "n"], "[", "x", "]"}], "=", " ", 
   RowBox[{
    FractionBox["4", "\[Pi]"], "  ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"k", "=", "1"}], "n"], 
     FractionBox[
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "k"}], "-", "1"}], ")"}], "x"}], "]"}], 
      RowBox[{
       RowBox[{"2", "k"}], "-", "1"}]]}]}]}], TraditionalForm]], "Text",
 TextAlignment->Left,
 TextJustification->0,
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "where ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is the order of approximation.  Produce a 2\[Times]3 graphics array which \
compares the first 6 approximations with the square-wave itself."
}], "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]],

Cell[CellGroupData[{

Cell["Antenna patterns", "Subsubsection",
 CellChangeTimes->{{3.4642864963114*^9, 3.4642865000162*^9}}],

Cell[TextData[{
 "The angular distribution  of intensity produced by an array of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " identical equally-spaced antennas which broadcast in phase at wave length ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]]],
 " has the form\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"n", ",", "d", ",", "\[Lambda]", ",", "\[Theta]"}], "]"}], "=", 
    FractionBox[
     SuperscriptBox[
      RowBox[{"Sin", "[", 
       RowBox[{"n", " ", "\[Pi]", " ", 
        FractionBox["d", "\[Lambda]"], 
        RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "]"}], "2"], 
     SuperscriptBox[
      RowBox[{"Sin", "[", 
       RowBox[{"\[Pi]", " ", 
        FractionBox["d", "\[Lambda]"], 
        RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "]"}], "2"]]}], 
   TraditionalForm]], "DisplayFormula",
  Evaluatable->False,
  TextAlignment->-0.5],
 "\nwhere ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]]],
 " is the spacing and ",
 Cell[BoxData[
  FormBox["\[Theta]", TraditionalForm]]],
 " the polar angle.  Use ",
 StyleBox["PolarPlot", "InlineInput",
  FontWeight->"Bold"],
 " to display antenna patterns for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "4"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"d", "/", "\[Lambda]"}], "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4"}], "}"}]}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{3.464286503027*^9},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]],

Cell[CellGroupData[{

Cell["Hydrogenic wave functions", "Subsubsection",
 CellChangeTimes->{{3.4642865422298*^9, 3.4642865462546*^9}}],

Cell[TextData[{
 "Wave functions for the hydrogen atom take the form\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Psi]", 
      RowBox[{
      "n", "\[InvisibleComma]", "\[ScriptL]", "\[InvisibleComma]", " ", 
       "m"}]], "(", 
     RowBox[{"r", ",", "\[Theta]", ",", "\[Phi]"}], ")"}], "\[Proportional]", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "\[Kappa]"}], " ", "r"}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"\[Kappa]", " ", "r"}], ")"}], "\[ScriptL]"], " ", 
     RowBox[{
      SubsuperscriptBox["L", 
       RowBox[{"n", "-", "\[ScriptL]", "-", "1"}], 
       RowBox[{
        RowBox[{"2", " ", "\[ScriptL]"}], "+", "1"}]], "(", 
      RowBox[{"2", " ", "\[Kappa]", " ", "r"}], ")"}], " ", 
     RowBox[{
      SubsuperscriptBox["Y", "\[ScriptL]", "m"], "(", 
      RowBox[{"\[Theta]", ",", "\[Phi]"}], ")"}]}]}], TraditionalForm]], 
  "DisplayFormula",
  Evaluatable->False,
  TextAlignment->-0.5],
 "\nwhere ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " is the principal (radial) quantum number, ",
 Cell[BoxData[
  FormBox["\[ScriptL]", TraditionalForm]]],
 " is the orbital angular momentum in units of ",
 Cell[BoxData[
  FormBox["\[HBar]", TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]]],
 " is the magnetic (azimuthal) quantum number, and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[HBar]", " ", "\[Kappa]"}], "=", 
    SqrtBox[
     RowBox[{"2", " ", "\[Mu]", " ", 
      SubscriptBox["E", "b"]}]]}], TraditionalForm]]],
 "is the wave number for positive binding energy ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["E", "b"], TraditionalForm]]],
 ".  The radial dependence involves generalized Laguerre functions and the \
angular dependence spherical harmonics.  Note that we are not interested in \
the normalization of these functions at this time.  The probability density \
is given by the absolute square of the wave function, namely ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"\[LeftBracketingBar]", "\[Psi]", "\[RightBracketingBar]"}], "2"],
    TraditionalForm]]],
 ".  Write a function that plots the probability density in the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[VeryThinSpace]", "y"}], TraditionalForm]]],
 " plane (",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Theta]", "=", 
    FractionBox["\[Pi]", "2"]}], TraditionalForm]]],
 ") given values of the quantum numbers ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[VeryThinSpace]", "\[ScriptL]", "\[VeryThinSpace]", "m"}], 
   TraditionalForm]]],
 "\[VeryThinSpace] using ",
 StyleBox["Plot3D", "InlineInput",
  FontWeight->"Bold"],
 ".   You will need to express the Cartesian coordinates in terms of \
spherical coordinates.  Write a similar function that uses ",
 StyleBox["DensityPlot", "InlineInput",
  FontWeight->"Bold"],
 ".  Show several cases of each."
}], "Text",
 CellChangeTimes->{
  3.4642865477366*^9, {3.4680004095074425`*^9, 3.4680004109738445`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]],

Cell[CellGroupData[{

Cell["Sampling points", "Subsubsection",
 CellChangeTimes->{3.4642865780006*^9}],

Cell[TextData[{
 "Write a function which displays the points sampled by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 's adaptive algorithm for ",
 StyleBox["Plot", "InlineInput",
  FontWeight->"Bold"],
 " as vertical bars between the x-axis and the points themselves."
}], "Text",
 CellChangeTimes->{3.4642865687497997`*^9},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]],

Cell[CellGroupData[{

Cell["Potential and field for uniform sphere", "Subsubsection",
 CellChangeTimes->{3.464286590309*^9}],

Cell[TextData[{
 "The electric field of a uniformly charged sphere or the gravitational field \
of a sphere of uniform density both have the same shape.  Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Phi]", "=", 
    RowBox[{
     FractionBox["3", "2"], "-", 
     FractionBox[
      SuperscriptBox["r", "2"], "2"]}]}], TraditionalForm]]],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "\[LessEqual]", "1"}], TraditionalForm]]],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Phi]", "=", 
    SuperscriptBox["r", 
     RowBox[{"-", "1"}]]}], TraditionalForm]]],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "\[GreaterEqual]", "1"}], TraditionalForm]]],
 " represent the normalized potential, where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"], "+", 
      SuperscriptBox["z", "2"]}]]}], TraditionalForm]]],
 " is the distance from the center in units of the radius of the sphere.  The \
field if then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["f", "\[RightVector]"], "=", 
    RowBox[{"-", 
     RowBox[{
      OverscriptBox["\[Del]", "\[RightVector]"], "\[Phi]"}]}]}], 
   TraditionalForm]]],
 ".\na) Use ",
 StyleBox["ContourPlot", "InlineInput",
  FontWeight->"Bold"],
 " to display equipotential lines in the ",
 StyleBox["xy",
  FontSlant->"Italic"],
 " plane (two-dimensions).\nb) Use ",
 StyleBox["VectorPlot", "InlineInput",
  FontWeight->"Bold"],
 " to display the force field in the ",
 StyleBox["xy",
  FontSlant->"Italic"],
 " plane.  Combine this plot with the equipotentials from the preceding \
exercise.\nc) Use ",
 StyleBox["ContourPlot3D", "InlineInput",
  FontWeight->"Bold"],
 " and ",
 StyleBox["VectorPlot3D", "InlineInput",
  FontWeight->"Bold"],
 " to display equipotential surfaces and the vector field within a \
representative volume of space. "
}], "Text",
 CellChangeTimes->{{3.4642866642998*^9, 3.4642866767953997`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Programming Intro", "Section",
 CellChangeTimes->{{3.467096301424638*^9, 3.4670963086630507`*^9}}],

Cell[TextData[{
 "Required Reading\n\n",
 ButtonBox["Mathematica Programming",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.mathprogramming-intro.org/"], None},
  ButtonNote->"http://www.mathprogramming-intro.org/"]
}], "Text",
 CellChangeTimes->{{3.468004446533141*^9, 3.468004470385583*^9}}],

Cell["\<\
Putting several commands together to accomplish some purpose beyond the \
capacity  of one individually means, you are programming. We already saw that \
parantheses () can be used to chain commands together:\
\>", "Text",
 CellChangeTimes->{{3.467099924171104*^9, 3.4671000053692465`*^9}, {
  3.4673814552710295`*^9, 3.4673814759722652`*^9}, {3.4680004436091022`*^9, 
  3.468000452033117*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"\"\<You entered:\>\"", ",", "x"}], "]"}], ";", 
    RowBox[{"Sin", "[", "x", "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.4673814831638784`*^9, 3.4673815562500067`*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.4673815517883987`*^9, 3.4673815527088003`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " offers many programming constructs also known in other languages."
}], "Text",
 CellChangeTimes->{{3.4673815746736393`*^9, 3.467381600210884*^9}}],

Cell[CellGroupData[{

Cell["Scoping - localizing variables", "Subsection",
 CellChangeTimes->{{3.4671002123816104`*^9, 3.4671002301500416`*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Modularity and the Naming of Things",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/ModularityAndTheNamingOfThingsOverview"]
}], "Text",
 CellChangeTimes->{{3.4673792460039253`*^9, 3.4673792582343464`*^9}}],

Cell[CellGroupData[{

Cell["Iterator localization", "Subsubsection",
 CellChangeTimes->{{3.46737492731038*^9, 3.4673749302899857`*^9}}],

Cell[TextData[{
 "When using a command that takes an iterator as argument, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will localize the iterator:"
}], "Text",
 CellChangeTimes->{{3.467374938136799*^9, 3.4673749688844533`*^9}, 
   3.4680004723755527`*^9}],

Cell[BoxData[{
 RowBox[{"Remove", "[", "n", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{"n", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", "n"}], "Input",
 CellChangeTimes->{{3.467374970428856*^9, 3.467374978993271*^9}, {
  3.4673750105989265`*^9, 3.467375034705378*^9}}],

Cell[BoxData[{
 RowBox[{"n", "=", "4"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{"n", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", "n", "\[IndentingNewLine]", 
 RowBox[{"Remove", "[", "n", "]"}]}], "Input",
 CellChangeTimes->{{3.4673749845468807`*^9, 3.4673750436441936`*^9}}],

Cell["\<\
Other commands, that take iterators are Sum, Product, Integrate, etc..\
\>", "Text",
 CellChangeTimes->{{3.467375060960224*^9, 3.4673750782762547`*^9}, {
  3.4673751084467077`*^9, 3.4673751232043333`*^9}, {3.467375520427831*^9, 
  3.467375535981058*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["With", "Subsubsection",
 CellChangeTimes->{{3.467375578600333*^9, 3.4673755797391353`*^9}, {
  3.467378705634576*^9, 3.467378727895815*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Local Constants",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/LocalConstants"]
}], "Text",
 CellChangeTimes->{{3.46737873081302*^9, 3.467378746491048*^9}}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["With",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/With"]], "InlineFormula"],
 " allows you to define local constants.  ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["With",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/With"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       StyleBox["x", "TI"], "=", 
       SubscriptBox[
        StyleBox["x", "TI"], 
        StyleBox["0", "TR"]]}], ",", 
      RowBox[{
       StyleBox["y", "TI"], "=", 
       SubscriptBox[
        StyleBox["y", "TI"], 
        StyleBox["0", "TR"]]}], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
    StyleBox["expr", "TI"]}], "]"}]], "InlineFormula"],
 " specifies that in ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 " occurrences of the symbols ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 ", \[Ellipsis]  should be replaced by ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x", "TI"], 
   StyleBox["0", "TR"]]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["y", "TI"], 
   StyleBox["0", "TR"]]], "InlineFormula"],
 ", \[Ellipsis] . "
}], "Text",
 CellChangeTimes->{{3.467378671220916*^9, 3.4673786843717384`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Graphics", "[", 
  RowBox[{"Line", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "t", "]"}], ",", 
       RowBox[{"Sin", "[", "t", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", 
       RowBox[{"2", "Pi"}], ",", 
       RowBox[{"2", 
        FractionBox["Pi", "n"]}]}], "}"}]}], "]"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.4671005120022764`*^9, 3.4671005513455453`*^9}}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"3", "n"}], "+", "1"}], "\[Equal]", "22"}], ",", "n"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4671005599255605`*^9, 3.4671005688331757`*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", "n", "]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "5"}], "}"}], ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"Line", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "t", "]"}], ",", 
         RowBox[{"Sin", "[", "t", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", 
         RowBox[{"2", "Pi"}], ",", 
         RowBox[{"2", 
          FractionBox["Pi", "n"]}]}], "}"}]}], "]"}], "]"}], "]"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.4671005777719917`*^9, 3.4671005917496166`*^9}, {
  3.4673788641776543`*^9, 3.467378895502509*^9}}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"3", "n"}], "+", "1"}], "\[Equal]", "22"}], ",", "n"}], 
  "]"}]], "Input"],

Cell[TextData[{
 "Definitions outside of the ",
 ButtonBox["With",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/With"],
 " construct are kept."
}], "Text",
 CellChangeTimes->{{3.4673789240505595`*^9, 3.4673789467641993`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "5"}], "}"}], ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"Line", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "t", "]"}], ",", 
         RowBox[{"Sin", "[", "t", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", 
         RowBox[{"2", "Pi"}], ",", 
         RowBox[{"2", 
          FractionBox["Pi", "n"]}]}], "}"}]}], "]"}], "]"}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", "n"}], "Input",
 CellChangeTimes->{{3.4671005777719917`*^9, 3.4671005917496166`*^9}, {
  3.4673788641776543`*^9, 3.4673789100885353`*^9}}],

Cell[TextData[{
 "The way ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["With",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/With"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       StyleBox["x", "TI"], "=", 
       SubscriptBox[
        StyleBox["x", "TI"], 
        StyleBox["0", "TR"]]}], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
    StyleBox["body", "TI"]}], "]"}]], "InlineFormula"],
 " works is to take ",
 Cell[BoxData[
  StyleBox["body", "TI"]], "InlineFormula"],
 ", and replace every occurrence of ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", etc. in it by ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x", "TI"], 
   StyleBox["0", "TR"]]], "InlineFormula"],
 ", etc. You can think of ",
 Cell[BoxData[
  ButtonBox["With",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/With"]], "InlineFormula"],
 " as a generalization of the ",
 Cell[BoxData["/."], "InlineFormula"],
 " operator, suitable for application to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " code instead of other expressions. "
}], "Text",
 CellChangeTimes->{3.4673789751874495`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Module", "Subsubsection",
 CellChangeTimes->{{3.467100498991853*^9, 3.467100499771855*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Modules and Local Variables\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/ModulesAndLocalVariables"],
 ButtonBox["How Modules Work",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/HowModulesWork"]
}], "Text",
 CellChangeTimes->{{3.4673791120308895`*^9, 3.4673791263985147`*^9}, {
  3.467379273319573*^9, 3.467379282585989*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " normally assumes that all your variables are ",
 StyleBox["global",
  FontSlant->"Italic"],
 ". This means that every time you use a name like ",
 Cell[BoxData["x"], "InlineFormula"],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " normally assumes that you are referring to the ",
 StyleBox["same",
  FontSlant->"Italic"],
 " object. "
}], "Text",
 CellChangeTimes->{3.4673791428721437`*^9}],

Cell[TextData[{
 "Particularly when you write programs, however, you may not want all your \
variables to be global. You may, for example, want to use the name ",
 Cell[BoxData["x"], "InlineFormula"],
 " to refer to two quite different variables in two different programs. In \
this case, you need the ",
 Cell[BoxData["x"], "InlineFormula"],
 " in each program to be treated as a ",
 StyleBox["local",
  FontSlant->"Italic"],
 " variable. "
}], "Text",
 CellChangeTimes->{3.4673791556329665`*^9}],

Cell[TextData[{
 "You can set up local variables in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using ",
 StyleBox["modules",
  FontSlant->"Italic"],
 ". Within each module, you can give a list of variables which are to be \
treated as local to the module. "
}], "Text",
 CellChangeTimes->{3.4673791620133777`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Module",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Module"], "[", "{", 
   StyleBox["x", "TI"], ",", 
   StyleBox["y", "TI"], ",", 
   StyleBox["\[Ellipsis]", "TR"], "}", ",", 
   StyleBox["body", "TI"], "]"}]]],
 " ",
 Cell[BoxData[Cell[TextData[{
   "a module with local variables ",
   Cell[BoxData[
    StyleBox["x", "TI"]], "InlineFormula"],
   ", ",
   Cell[BoxData[
    StyleBox["y", "TI"]], "InlineFormula"],
   ", \[Ellipsis]",
   " "
  }], "TableText"]]]
}], "Text",
 CellChangeTimes->{{3.4673791688461895`*^9, 3.4673791743997993`*^9}}],

Cell[BoxData[
 RowBox[{"t", "=", "17"}]], "Input"],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{
    RowBox[{"t", "=", "8"}], ";", 
    RowBox[{"Print", "[", "t", "]"}]}]}], "]"}]], "Input"],

Cell[BoxData["t"], "Input",
 CellChangeTimes->{3.467974942733514*^9}],

Cell[TextData[{
 "You can also give initial values to the localized variables: ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Module",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Module"], "[", "{", 
   StyleBox["x", "TI"], "=", 
   SubscriptBox[
    StyleBox["x", "TI"], 
    StyleBox["0", "TR"]], ",", 
   StyleBox["y", "TI"], "=", 
   SubscriptBox[
    StyleBox["y", "TI"], 
    StyleBox["0", "TR"]], ",", 
   StyleBox["\[Ellipsis]", "TR"], "}", ",", 
   StyleBox["body", "TI"], "]"}]]]
}], "Text",
 CellChangeTimes->{{3.4673792084546595`*^9, 3.4673792217926826`*^9}, {
  3.4673792981236167`*^9, 3.467379298373217*^9}}],

Cell["\<\
The way modules work in Mathematica is basically very simple. Every time any \
module is used, a new symbol is created to represent each of its local \
variables. The new symbol is given a unique name which cannot conflict with \
any other names. The name is formed by taking the name you specify for the \
local variable, followed by $, with a unique \"serial number\" appended. \
\>", "Text"],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{"Print", "[", "t", "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{"Print", "[", "t", "]"}]}], "]"}]], "Input"],

Cell[TextData[{
 "An important point to note is that ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Module",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Module"], "[", 
   RowBox[{
    StyleBox["vars", "TI"], ",", 
    StyleBox["body", "TI"]}], "]"}]], "InlineFormula"],
 " inserts generated symbols only into the actual expression ",
 Cell[BoxData[
  StyleBox["body", "TI"]], "InlineFormula"],
 ". It does not, for example, insert such symbols into code that is called \
from ",
 Cell[BoxData[
  StyleBox["body", "TI"]], "InlineFormula"],
 ", but does not explicitly appear in ",
 Cell[BoxData[
  StyleBox["body", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{3.467379475901529*^9}],

Cell[TextData[{
 "Since ",
 Cell[BoxData["x"], "InlineFormula"],
 " does not appear explicitly in the body of the module, the local value is \
not used. "
}], "Text",
 CellChangeTimes->{3.467379483373942*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"tmp", "=", 
   RowBox[{
    RowBox[{"x", "^", "2"}], "+", "1"}]}], ";", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", "=", "4"}], "}"}], ",", "tmp"}], "]"}]}]], "Input"],

Cell["\<\
Module is one of the main commands to built up complex commands.\
\>", "Text",
 CellChangeTimes->{{3.4673795686436915`*^9, 3.467379585756922*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "n_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "f", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", "1", "]"}], "=", 
      RowBox[{
       RowBox[{"f", "[", "2", "]"}], "=", "1"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"f", "[", "i_", "]"}], ":=", 
      RowBox[{
       RowBox[{"f", "[", "i", "]"}], "=", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"i", "-", "1"}], "]"}], "+", 
        RowBox[{"f", "[", 
         RowBox[{"i", "-", "2"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"f", "[", "n", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input"],

Cell[TextData[{
 "The following example is taken from Michael Trott's ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Guidebooks."
}], "Text",
 CellChangeTimes->{{3.4673799490503597`*^9, 3.4673799751492057`*^9}}],

Cell[TextData[{
 "The following routine ",
 StyleBox["linePicture", "MR"],
 " takes a list of ",
 StyleBox["n", "TI"],
 " points (",
 StyleBox["n", "TI"],
 " is even) and generates all polygons with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "2"}], TraditionalForm]], "InlineFormula"],
 " points that come from mirroring ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "/", "2"}], TraditionalForm]], "InlineFormula"],
 " points on the line through midpoints of opposite line segments. This \
process is iterated ",
 StyleBox["iter", "TI"],
 " times. "
}], "Text",
 CellChangeTimes->{3.4673799790024123`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"linePicture", "[", 
   RowBox[{
    RowBox[{"startPolitList_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"EvenQ", "[", 
        RowBox[{"Length", "[", "#", "]"}], "]"}], "&"}], ")"}]}], ",", 
    RowBox[{"iter_Integer", "?", "Positive"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"mirror", ",", "step"}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"mirror", "[", 
       RowBox[{"p_", ",", 
        RowBox[{"{", 
         RowBox[{"p1_", ",", "p2_"}], "}"}]}], "]"}], ":=", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"mirrors", " ", "p", " ", "on", " ", "line", " ", "p1p2"}], 
        " ", "*)"}], "CodeComment"], 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"d", ",", "e"}], "}"}], ",", 
         RowBox[{"p1", "-", "d", "+", 
          RowBox[{"2", 
           RowBox[{"(", 
            RowBox[{"d", ".", "e"}], ")"}], " ", "e"}]}]}], "]"}], "[", 
       RowBox[{
        RowBox[{"p", "-", "p1"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#", "/", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"#", ".", "#"}], "]"}]}], ")"}], "&"}], "[", 
         RowBox[{"p2", "-", "p1"}], "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{
      RowBox[{"step", "[", "pList1_", "]"}], ":=", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "mirrors", " ", "one", " ", "half", " ", "of", " ", "the", " ", 
          "n"}], "-", 
         RowBox[{
         "gon", " ", "on", " ", "line", "\n", "                  ", "through",
           " ", "two", " ", "midpoints", " ", "of", " ", "two", " ", "line", 
          " ", "segments"}]}], " ", "*)"}], "CodeComment"], 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"pList", ",", "pn1", ",", "pn2", ",", 
          RowBox[{"l", "=", 
           RowBox[{"Length", "[", "pList1", "]"}]}]}], "}"}], ",", 
        RowBox[{"Table", "[", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "go", " ", "through", " ", "all", " ", "line", " ", "segments"}], 
           " ", "*)"}], "CodeComment"], 
         RowBox[{
          RowBox[{
           RowBox[{"pList", "=", 
            RowBox[{"RotateRight", "[", 
             RowBox[{"pList1", ",", "i"}], "]"}]}], ";", "\n", 
           StyleBox[
            RowBox[{"(*", " ", 
             RowBox[{
             "the", " ", "points", " ", "for", " ", "the", " ", "mirror", " ",
               "line"}], " ", "*)"}], "CodeComment"], 
           RowBox[{"pn1", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"First", "[", "pList", "]"}], "+", 
               RowBox[{"Last", "[", "pList", "]"}]}], ")"}], "/", "2"}]}], 
           ";", "\n", 
           RowBox[{"pn2", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"pList", "[", 
                RowBox[{"[", 
                 RowBox[{"l", "/", "2"}], "]"}], "]"}], "+", 
               RowBox[{"pList", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"l", "/", "2"}], "+", "1"}], "]"}], "]"}]}], ")"}], 
             "/", "2"}]}], ";", "\n", 
           StyleBox[
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"the", " ", "new", " ", "n"}], "-", "gon"}], " ", 
             "*)"}], "CodeComment"], 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "pn1", "}"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"mirror", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"pn1", ",", "pn2"}], "}"}]}], "]"}], "&"}], "/@", 
              RowBox[{"Take", "[", 
               RowBox[{"pList", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"l", "/", "2"}]}], "}"}]}], "]"}]}], ",", 
             RowBox[{"{", "pn2", "}"}], ",", 
             RowBox[{"Take", "[", 
              RowBox[{"pList", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"l", "/", "2"}], "+", "1"}], ",", "l"}], "}"}]}], 
              "]"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "l"}], "}"}]}], "]"}]}], "]"}]}], ";", "\n", 
     StyleBox[
      RowBox[{"(*", " ", 
       RowBox[{"make", " ", "the", " ", "picture"}], " ", "*)"}], 
      "CodeComment"], 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.001", "]"}], ",", 
          StyleBox[
           RowBox[{"(*", " ", 
            RowBox[{
            "make", " ", "closed", " ", "line", " ", "by", " ", "appending", 
             " ", "first", " ", "point"}], " ", "*)"}], "CodeComment"], 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Line", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Append", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"First", "[", "#", "]"}]}], "]"}], "&"}], "[", "#", 
               "]"}], "]"}], "&"}], ",", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{"iterate", " ", "the", " ", "construction"}], " ", 
              "*)"}], "CodeComment"], 
            RowBox[{"NestList", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"step", "/@", "#"}], ",", "1"}], "]"}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{"N", "[", "startPolitList", "]"}], "}"}], ",", 
              "iter"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"-", "3"}], "}"}]}], "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.467379946257955*^9, 3.4673799466167555`*^9}, 
   3.4673799864280252`*^9}],

Cell["First simple example:", "Text",
 CellChangeTimes->{{3.4673799994228487`*^9, 3.4673800022932534`*^9}, {
  3.467380143286301*^9, 3.4673801440975027`*^9}}],

Cell[BoxData[
 RowBox[{"linePicture", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1."}], ",", " ", "0"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", 
       RowBox[{"-", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"1.", ",", " ", "0."}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0.", ",", " ", "4."}], "}"}]}], "}"}], ",", " ", "2"}], 
  "]"}]], "Input"],

Cell["\<\
The next example starts more complicated with a regular 22-gon\
\>", "Text",
 CellChangeTimes->{{3.4673801570455256`*^9, 3.4673801832535715`*^9}}],

Cell[BoxData[
 RowBox[{"linePicture", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"N", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", " ", 
        RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], "]"}], ",", " ", 
     "\n", "                  ", 
     RowBox[{"{", 
      RowBox[{"\[CurlyPhi]", ",", " ", "0", ",", " ", 
       RowBox[{"2", "Pi", " ", 
        RowBox[{"(", 
         RowBox[{"1", " ", "-", " ", 
          RowBox[{"1", "/", "22"}]}], ")"}]}], ",", " ", 
       RowBox[{"2", 
        RowBox[{"Pi", "/", "22"}]}]}], "}"}]}], "]"}], ",", " ", "2"}], 
  "]"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Block", "Subsubsection"]], "Subsubsection",
 CellChangeTimes->{{3.4671004961058483`*^9, 3.467100496683049*^9}, 
   3.467379188393024*^9, 3.467381009592637*^9}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Blocks and Local Values\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/BlocksAndLocalValues"],
 ButtonBox["Blocks Compared with Modules",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/BlocksComparedWithModules"]
}], "Text",
 CellChangeTimes->{{3.467381033445079*^9, 3.467381049419507*^9}, {
  3.467381293700336*^9, 3.4673813046683645`*^9}}],

Cell[TextData[{
 "Modules in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allow you to treat the ",
 StyleBox["names",
  FontSlant->"Italic"],
 " of variables as local. Sometimes, however, you want the names to be \
global, but ",
 StyleBox["values",
  FontSlant->"Italic"],
 " to be local. You can do this in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using ",
 Cell[BoxData[
  ButtonBox["Block",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Block"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{3.4673810599183254`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Block",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Block"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["x", "TI"], ",", 
      StyleBox["y", "TI"], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
    StyleBox["expr", "TI"]}], "]"}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 " is to be evaluated with local values for the symbols ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 ", ",
 StyleBox["\[Ellipsis]", "TR"],
 " \n",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Block",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Block"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       StyleBox["x", "TI"], "=", 
       SubscriptBox[
        StyleBox["x", "TI"], 
        StyleBox["0", "TR"]]}], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
    StyleBox["expr", "TI"]}], "]"}]], "InlineFormula"],
 " ",
 "defines initial local values for ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", ",
 StyleBox["\[Ellipsis]", "TR"],
 " ."
}], "Text",
 CellChangeTimes->{{3.4673810828815656`*^9, 3.467381105314405*^9}}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Block",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Block"]], "InlineFormula"],
 " allows you to set up an environment in which the values of variables can \
temporarily be changed. ",
 "When you execute a block, values assigned to ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData["\[Ellipsis]"], "InlineFormula"],
 " are cleared. When the execution of the block is finished, the original \
values of these symbols are restored. "
}], "Text",
 CellChangeTimes->{{3.4673811172640257`*^9, 3.4673811280124445`*^9}}],

Cell[BoxData[
 RowBox[{"t", "=", "17"}]], "Input"],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{"Print", "[", "t", "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{"Print", "[", "t", "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{
    RowBox[{"t", "=", "6"}], ";", 
    RowBox[{
     RowBox[{"t", "^", "4"}], "+", "1"}]}]}], "]"}]], "Input"],

Cell[BoxData["t"], "Input",
 CellChangeTimes->{3.467381165733311*^9}],

Cell[TextData[{
 "Most traditional computer languages use a so\[Hyphen]called \"lexical \
scoping\" mechanism for variables, which is analogous to the module mechanism \
in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Some symbolic computer languages such as LISP also allow \"dynamic \
scoping",
 "\"",
 ", analogous to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " blocks. "
}], "Text",
 CellID->9658],

Cell[TextData[{
 "When lexical scoping is used, variables are treated as local to a \
particular section of the ",
 StyleBox["code",
  FontSlant->"Italic"],
 " in a program. In dynamic scoping, the values of variables are local to a \
part of the ",
 StyleBox["execution history",
  FontSlant->"Italic"],
 " of the program. "
}], "Text",
 CellID->11293],

Cell["This defines m in terms of i", "Text",
 CellChangeTimes->{{3.4673813923093185`*^9, 3.467381400483733*^9}}],

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"i", "^", "2"}]}]], "Input"],

Cell[TextData[{
 "The local value for ",
 Cell[BoxData["i"], "InlineFormula"],
 " in the block is used throughout the evaluation of ",
 Cell[BoxData[
  RowBox[{"i", "+", "m"}]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{3.467381406832944*^9}],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", "=", "a"}], "}"}], ",", 
   RowBox[{"i", "+", "m"}]}], "]"}]], "Input"],

Cell[TextData[{
 "Here only the ",
 Cell[BoxData["i"], "InlineFormula"],
 " that appears explicitly in ",
 Cell[BoxData[
  RowBox[{"i", "+", "m"}]], "InlineFormula"],
 " is treated as a local variable. "
}], "Text",
 CellChangeTimes->{3.467381414008957*^9}],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", "=", "a"}], "}"}], ",", 
   RowBox[{"i", "+", "m"}]}], "]"}]], "Input"],

Cell[TextData[{
 "We finish with a beautiful example from the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Guidebooks."
}], "Text",
 CellChangeTimes->{{3.467381799002033*^9, 3.467381824976079*^9}}],

Cell[TextData[{
 "We define the recursive function:\n",
 Cell[BoxData[{
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["V", "r"], "(", "x", ")"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], 
      SuperscriptBox[
       RowBox[{
        SubscriptBox["V", 
         RowBox[{"r", "-", "1"}]], "(", "x", ")"}], "2"]}], "+", 
     FractionBox[
      RowBox[{
       SubscriptBox["V", 
        RowBox[{"r", "-", "1"}]], "(", 
       SuperscriptBox["x", "2"], ")"}], 
      RowBox[{"1", "-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"k", "=", "0"}], 
         RowBox[{"r", "-", "1"}]], 
        RowBox[{
         SubscriptBox["V", "k"], "(", "x", ")"}]}]}]]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["V", "0"], "(", "x", ")"}], "=", 
    RowBox[{"x", "."}]}], TraditionalForm]}],
  GeneratedCell->False]
}], "Text",
 CellChangeTimes->{{3.467381839265704*^9, 3.4673818487661204`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[ScriptCapitalV]", "[", 
   RowBox[{"n_Integer", ",", " ", "x_"}], "]"}], " ", ":=", " ", "\n", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "V", "}"}], ",", "\n", "      ", 
    RowBox[{
     RowBox[{
      RowBox[{"V", "[", 
       RowBox[{"0", ",", " ", "z_"}], "]"}], " ", ":=", " ", "z"}], ";", "\n",
      "      ", 
     RowBox[{
      RowBox[{"V", "[", 
       RowBox[{"r_", ",", " ", "z_"}], "]"}], " ", ":=", " ", 
      RowBox[{
       RowBox[{"V", "[", 
        RowBox[{"r", ",", " ", "z"}], "]"}], " ", "=", " ", "\n", "      ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"V", "[", 
             RowBox[{
              RowBox[{"r", " ", "-", " ", "1"}], ",", " ", "z"}], "]"}], "^", 
            "2"}], " ", "+", " ", 
           RowBox[{"V", "[", 
            RowBox[{
             RowBox[{"r", " ", "-", " ", "1"}], ",", " ", 
             RowBox[{"z", "^", "2"}]}], "]"}]}], ")"}], "/", "\n", 
         "                      ", 
         RowBox[{"(", 
          RowBox[{"1", " ", "-", " ", 
           RowBox[{"Sum", "[", 
            RowBox[{
             RowBox[{"V", "[", 
              RowBox[{"k", ",", " ", "z"}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"k", ",", " ", "0", ",", " ", 
               RowBox[{"r", " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], 
          ")"}]}]}]}]}], ";", "\n", "      ", 
     StyleBox[
      RowBox[{"(*", " ", 
       RowBox[{
       "calculate", " ", "value", " ", "with", " ", "actual", " ", "n", " ", 
        "and", " ", "V"}], " ", "*)"}], "CodeComment"], "\n", "      ", 
     RowBox[{"V", "[", 
      RowBox[{"n", ",", " ", "x"}], "]"}]}]}], "]"}]}]], "Input"],

Cell[TextData[{
 " After leaving the ",
 StyleBox["Block", "MR"],
 ", all definitions made for ",
 StyleBox["V", "MR"],
 " are no longer existent. ",
 "Avoiding too many cached values is sometimes of importance for memory \
reasons. Without the above ",
 StyleBox["Block[{", "MR"],
 StyleBox["...", "TI"],
 StyleBox["}, ", "MR"],
 StyleBox["localDefinitionsWithCaching", "TI"],
 StyleBox["]", "MR"],
 ", the following graphic displaying the phase of ",
 StyleBox["\[ScriptCapitalV][6, ", "MR"],
 StyleBox["z", "TI"],
 StyleBox["]", "MR"],
 " over the complex ",
 Cell[BoxData[
  FormBox["z", TraditionalForm]]],
 "\[Hyphen]plane would accumulate more than three million cached values."
}], "Text",
 CellChangeTimes->{
  3.4673818710741596`*^9, {3.467381947112302*^9, 3.4673819475335026`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ContourPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Arg", "[", 
       RowBox[{"\[ScriptCapitalV]", "[", 
        RowBox[{"6", ",", " ", 
         RowBox[{"x", " ", "+", " ", 
          RowBox[{"I", " ", "y"}]}]}], "]"}], "]"}], "^", "2"}], "/", 
     RowBox[{"Pi", "^", "2"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"y", ",", " ", 
      RowBox[{"-", "2"}], ",", " ", "2"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "2"}], ",", " ", "2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"ColorFunction", " ", "->", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"0.8", " ", "#"}], "]"}], "&"}], ")"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Contours", " ", "->", " ", "20"}], ",", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "->", "\"\<Speed\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"ColorFunctionScaling", " ", "->", " ", "False"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"ContourLines", " ", "->", " ", "False"}], ",", 
    RowBox[{"PlotPoints", "\[Rule]", "30"}]}], "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "CHANGE", " ", "THE", " ", "NUMBER", " ", "OF", " ", "PLOT", " ", 
    "POINTS"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.4673819546315155`*^9, 3.4673819860343704`*^9}, {
  3.4673823475962057`*^9, 3.4673823886710777`*^9}, {3.46797499750521*^9, 
  3.467975032293271*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Control Structures", "Subsection",
 CellChangeTimes->{{3.4671002341280484`*^9, 3.467100247996473*^9}, {
   3.46710030339217*^9, 3.467100305451374*^9}, 3.467396045895752*^9}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Loops and Control Structures",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/LoopsAndControlStructures"],
 "\n",
 ButtonBox["Conditionals tutorial\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/Conditionals"],
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{"Conditionals", " ", "Guide"}],
    BaseStyle->"Link",
    ButtonData->"paclet:guide/Conditionals"], TraditionalForm]]],
 "\n",
 ButtonBox["Piecewise Functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/PiecewiseFunctions"]
}], "Text",
 CellChangeTimes->{{3.4673944158956885`*^9, 3.467394458826964*^9}, {
  3.467395131437745*^9, 3.4673951464761715`*^9}, {3.4673955780197296`*^9, 
  3.4673955866465445`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " provides various ways to set up ",
 StyleBox["conditionals",
  FontSlant->"Italic"],
 ", which specify that particular expressions should be evaluated only if \
certain conditions hold. "
}], "Text",
 CellChangeTimes->{3.4673944692321825`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["If",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/If"], "[", 
   RowBox[{
    StyleBox["condition", "TI"], ",", 
    StyleBox["t", "TI"], ",", 
    StyleBox["f", "TI"]}], "]"}]]],
 " gives ",
 Cell[BoxData[
  StyleBox["t", "TI"]], "InlineFormula"],
 " if ",
 Cell[BoxData[
  StyleBox["condition", "TI"]], "InlineFormula"],
 " evaluates to ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 ", and ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " if it evaluates to ",
 Cell[BoxData[
  ButtonBox["False",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/False"]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["If",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/If"], "[", 
   RowBox[{
    StyleBox["condition", "TI"], ",", 
    StyleBox["t", "TI"], ",", 
    StyleBox["f", "TI"], ",", 
    StyleBox["u", "TI"]}], "]"}]]],
 " ",
 "gives ",
 Cell[BoxData[
  StyleBox["u", "TI"]], "InlineFormula"],
 " if ",
 Cell[BoxData[
  StyleBox["condition", "TI"]], "InlineFormula"],
 " evaluates to neither ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 " nor ",
 Cell[BoxData[
  ButtonBox["False",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/False"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4671003202402*^9, 3.4671003204586*^9}, {
  3.467394482679406*^9, 3.4673945030998416`*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["Pi", "2"], ">", 
    SuperscriptBox["\[ExponentialE]", "2"]}], ",", "\[Pi]", ",", 
   "\[ExponentialE]"}], "]"}]], "Input",
 CellChangeTimes->{{3.467394742934663*^9, 3.467394776911523*^9}, {
  3.4673949338633986`*^9, 3.4673949342065988`*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"\[Pi]", "\[Element]", "Reals"}], ",", "t", ",", "f"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4673947897191453`*^9, 3.467394800358364*^9}, {
  3.4673948369092283`*^9, 3.467394845520443*^9}, {3.4673948887793193`*^9, 
  3.4673949210089755`*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"\[Pi]", "\[Element]", "Rationals"}], ",", "t", ",", "f"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4673949104165573`*^9, 3.4673949238325806`*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"PrimeQ", "[", 
    RowBox[{
     RowBox[{"10", "^", "100"}], "+", "1"}], "]"}], ",", "t", ",", "f"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4673949510702286`*^9, 3.467394959899844*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", "<", "0"}], ",", " ", 
    RowBox[{"Cos", "[", "x", "]"}], ",", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], "/", 
     RowBox[{"(", 
      RowBox[{"Exp", "[", "x", "]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.467394615264039*^9, 3.4673947239182296`*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.467394665620927*^9, 3.4673947033729935`*^9}}],

Cell[TextData[{
 "The function ",
 Cell[BoxData[
  ButtonBox["If",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/If"]], "InlineFormula"],
 " provides a way to choose between two alternatives. Often, however, there \
will be more than two alternatives. One way to handle this is to use a nested \
set of ",
 Cell[BoxData[
  ButtonBox["If",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/If"]], "InlineFormula"],
 " functions. Usually, however, it is instead better to use functions like ",
 Cell[BoxData[
  ButtonBox["Which",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Which"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  ButtonBox["Switch",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Switch"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{3.4673950181191463`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Which",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Which"], "[", 
   RowBox[{
    SubscriptBox[
     StyleBox["test", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["value", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["test", "TI"], 
     StyleBox["2", "TR"]], ",", 
    SubscriptBox[
     StyleBox["value", "TI"], 
     StyleBox["2", "TR"]], ",", 
    StyleBox["\[Ellipsis]", "TR"]}], "]"}]], "InlineFormula"],
 "evaluates each of the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["test", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 " in turn, returning the value of the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["value", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 " corresponding to the first one that yields ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4671003224866037`*^9, 3.467100323001405*^9}, {
  3.467395035466377*^9, 3.467395039537984*^9}}],

Cell[TextData[{
 "This defines a function with three regions. Using ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 " as the third test makes this the default case. "
}], "Text",
 CellChangeTimes->{3.4673950639052267`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "[", "x_", "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"x", "<", "0"}], ",", 
    RowBox[{"x", "^", "2"}], ",", 
    RowBox[{"x", ">", "5"}], ",", 
    RowBox[{"x", "^", "3"}], ",", "True", ",", "0"}], "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{"h", "[", 
  RowBox[{"-", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"h", "[", "2", "]"}]}], "Input",
 CellChangeTimes->{{3.4673950751684465`*^9, 3.4673950804412556`*^9}}],

Cell[TextData[{
 "If you want to construct a conditional that does not depend on conditions \
but on forms/patterns you can use ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Switch",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Switch"], "[", 
   RowBox[{
    StyleBox["expr", "TI"], ",", 
    SubscriptBox[
     StyleBox["form", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["value", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["form", "TI"], 
     StyleBox["2", "TR"]], ",", 
    SubscriptBox[
     StyleBox["value", "TI"], 
     StyleBox["2", "TR"]], ",", 
    StyleBox["\[Ellipsis]", "TR"]}], "]"}]], "InlineFormula"],
 "which ",
 "evaluates ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 ", then compares it with each of the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["form", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 " in turn, evaluating and returning the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["value", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 " corresponding to the first match found. "
}], "Text",
 CellChangeTimes->{{3.4671003297406163`*^9, 3.467100330551818*^9}, {
  3.4673956199838037`*^9, 3.4673956618386765`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
   "x", ",", "_Integer", ",", "\"\<Integer\>\"", ",", "_Rational", ",", 
    "\"\<Rational\>\"", ",", "_Real", ",", "\"\<Real\>\"", ",", "_Complex", 
    ",", "\"\<Complex\>\"", ",", "_Symbol", ",", "\"\<Symbol\>\"", ",", "_", 
    ",", "\"\<something else\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4673957602280498`*^9, 3.467395822440959*^9}, {
  3.4673959295195475`*^9, 3.4673959496903825`*^9}}],

Cell[BoxData[{
 RowBox[{"f", "[", "x", "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", "1", "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", "\[Pi]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  FractionBox["3", "2"], "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"2", "+", 
   RowBox[{"I", " ", "4"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.4673958242349625`*^9, 3.4673958284781694`*^9}, {
  3.4673958893962765`*^9, 3.467395973277624*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Loops", "Subsection",
 CellChangeTimes->{{3.4673960514961615`*^9, 3.4673960521045623`*^9}, {
  3.467400243993227*^9, 3.4674002482052345`*^9}}],

Cell[TextData[{
 "I want to start this section with a quote from the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Guidebooks by Michael Trott:"
}], "Text",
 CellChangeTimes->{{3.467396717944932*^9, 3.4673967395197697`*^9}}],

Cell[TextData[{
 StyleBox["Constructions that use ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["For", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["While", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", and ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["Do", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[" in other programming languages can often be implemented in \
Mathematica in a cleaner, more elegant, and faster\[Hyphen]executing way \
using list operations like ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["Map", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["Thread", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", (all to be discussed in the next chapter) and so on and ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["Fold", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["FoldList", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["Nest", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["NestList", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["FixedPointList", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox[", and ",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["FixedPoint", "MR",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 StyleBox["....",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0.6, 0.4, 0.2]]
}], "Text",
 CellChangeTimes->{{3.4673967421561747`*^9, 3.4673967591602044`*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Loops and Control Structures\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/LoopsAndControlStructures"],
 ButtonBox["Repetitive Operations",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/RepetitiveOperations"]
}], "Text",
 CellChangeTimes->{
  3.467396070044594*^9, {3.4673961745803776`*^9, 3.4673961845955954`*^9}}],

Cell[TextData[{
 "The execution of a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " program involves the evaluation of a sequence of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions. In simple programs, the expressions to be evaluated may be \
separated by semicolons, and evaluated one after another. Often, however, you \
need to evaluate expressions several times, in some kind of \"loop\". "
}], "Text",
 CellChangeTimes->{3.467396508358564*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Do",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Do"], "[", 
   RowBox[{
    StyleBox["expr", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["i", "TI"], ",", 
      SubscriptBox[
       StyleBox["i", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["i", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"],
 " evaluates ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 " with the variable ",
 Cell[BoxData[
  StyleBox["i", "TI"]], "InlineFormula"],
 " successively taking on the values ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["i", "TI"], 
   StyleBox["min", "TI"]]]],
 " through ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["i", "TI"], 
   StyleBox["max", "TI"]]], "InlineFormula"],
 " (in steps of ",
 Cell[BoxData["1"], "InlineFormula"],
 "). ",
 Cell[BoxData[
  ButtonBox["Do",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Do"]], "InlineFormula"],
 " uses the standard ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " iteration specification. "
}], "Text",
 CellChangeTimes->{{3.467396521665387*^9, 3.4673965656106644`*^9}}],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"n", "^", "2"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "4"}], "}"}]}], "]"}]], "Input"],

Cell[TextData[{
 "This loops over values of ",
 Cell[BoxData["i"], "InlineFormula"],
 " from ",
 Cell[BoxData["1"], "InlineFormula"],
 " to ",
 Cell[BoxData["4"], "InlineFormula"],
 ", and for each value of ",
 Cell[BoxData["i"], "InlineFormula"],
 ", loops over ",
 Cell[BoxData["j"], "InlineFormula"],
 " from ",
 Cell[BoxData["1"], "InlineFormula"],
 " to ",
 Cell[BoxData[
  RowBox[{"i", "-", "1"}]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{3.4673965994627237`*^9}],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"{", 
     RowBox[{"i", ",", "j"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", 
     RowBox[{"i", "-", "1"}]}], "}"}]}], "]"}]], "Input"],

Cell[TextData[{
 "Sometimes you may want to repeat a particular operation a certain number of \
times, without changing the value of an iteration variable. You can specify \
this kind of repetition in ",
 Cell[BoxData[
  ButtonBox["Do",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Do"]], "InlineFormula"],
 " just as you can in ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 " and other iteration functions. "
}], "Text",
 CellChangeTimes->{3.467396628541175*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"t", "=", "x"}], ";", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"t", "=", 
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"1", "+", "t"}], ")"}]}]}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}], ";", "t"}]], "Input"],

Cell[TextData[{
 "As in other programming languages, a calculation can be repeated based on a \
test using ",
 StyleBox["While", "MR"],
 " and ",
 StyleBox["For", "MR"],
 ". "
}], "Text",
 CellChangeTimes->{3.4673960955038385`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["While",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/While"], "[", 
   RowBox[{
    StyleBox["test", "TI"], ",", 
    StyleBox["body", "TI"]}], "]"}]]],
 "evaluates ",
 Cell[BoxData[
  StyleBox["test", "TI"]], "InlineFormula"],
 ", then ",
 Cell[BoxData[
  StyleBox["body", "TI"]], "InlineFormula"],
 ", repetitively, until ",
 Cell[BoxData[
  StyleBox["test", "TI"]], "InlineFormula"],
 " first fails to give ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 ". Example: ",
 "Print and increment ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 " while the condition ",
 Cell[BoxData[
  RowBox[{
   StyleBox["n", "TI"], "<", "4"}]], "InlineFormula"],
 " is satisfied:"
}], "Text",
 CellChangeTimes->{{3.467396115315873*^9, 3.4673961290438976`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"n", "=", "1"}], ";", 
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{"n", "<", "4"}], ",", 
    RowBox[{
     RowBox[{"Print", "[", "n", "]"}], ";", 
     RowBox[{"n", "++"}]}]}], "]"}]}]], "Input"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Break",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Break"]], "InlineFormula"],
 " breaks out of the ",
 Cell[BoxData[
  ButtonBox["While",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/While"]], "InlineFormula"],
 ":"
}], "Text",
 CellChangeTimes->{3.4673961479199305`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "1"}], ";", 
  RowBox[{"While", "[", 
   RowBox[{"True", ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", ">", "10"}], ",", 
       RowBox[{"Break", "[", "]"}]}], "]"}], ";", 
     RowBox[{"n", "++"}]}]}], "]"}]}], "\[IndentingNewLine]", "n"}], "Input",
 CellChangeTimes->{{3.467396156671546*^9, 3.4673961567651463`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["For",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/For"], "[", 
   RowBox[{
    StyleBox["start", "TI"], ",", 
    StyleBox["test", "TI"], ",", 
    StyleBox["incr", "TI"], ",", 
    StyleBox["body", "TI"]}], "]"}]], "InlineFormula"],
 "executes ",
 Cell[BoxData[
  StyleBox["start", "TI"]], "InlineFormula"],
 ", then repeatedly evaluates ",
 Cell[BoxData[
  StyleBox["body", "TI"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  StyleBox["incr", "TI"]], "InlineFormula"],
 " until ",
 Cell[BoxData[
  StyleBox["test", "TI"]], "InlineFormula"],
 " fails to give ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 ". ",
 "The sequence of evaluation is ",
 Cell[BoxData[
  StyleBox["test", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["body", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["incr", "TI"]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  ButtonBox["For",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/For"]], "InlineFormula"],
 " exits as soon as ",
 Cell[BoxData[
  StyleBox["test", "TI"]], "InlineFormula"],
 " fails. "
}], "Text",
 CellChangeTimes->{{3.467396341687871*^9, 3.4673963641207104`*^9}}],

Cell[TextData[{
 "This is a very common form for a ",
 Cell[BoxData[
  ButtonBox["For",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/For"]], "InlineFormula"],
 " loop. ",
 Cell[BoxData[
  RowBox[{"i", "++"}]], "InlineFormula"],
 " increments the value of ",
 Cell[BoxData["i"], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{3.467396323264239*^9}],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "<", "4"}], ",", 
   RowBox[{"i", "++"}], ",", 
   RowBox[{"Print", "[", "i", "]"}]}], "]"}]], "Input"],

Cell[TextData[{
 "Here is a more complicated ",
 Cell[BoxData[
  ButtonBox["For",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/For"]], "InlineFormula"],
 " loop. Notice that the loop terminates as soon as the test ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"i", "^", "2"}], "<", "10"}]], "InlineFormula"],
 " fails. "
}], "Text",
 CellChangeTimes->{3.4673963306118517`*^9}],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"i", "=", "1"}], ";", 
    RowBox[{"t", "=", "x"}]}], ",", 
   RowBox[{
    RowBox[{"i", "^", "2"}], "<", "10"}], ",", 
   RowBox[{"i", "++"}], ",", 
   RowBox[{
    RowBox[{"t", "=", 
     RowBox[{
      RowBox[{"t", "^", "2"}], "+", "i"}]}], ";", 
    RowBox[{"Print", "[", "t", "]"}]}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell["Example: Calculating the square root - Babylonian method ", \
"Subsubsection",
 CellChangeTimes->{{3.4679707653352757`*^9, 3.46797076769088*^9}, {
  3.4679708004319525`*^9, 3.467970811414372*^9}}],

Cell[TextData[{
 "To calculate the value of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SqrtBox["a"], " "}], TraditionalForm]]],
 " of a positive number ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]]],
 ", we will use the Babylonian method, going back to Heron of Alexandria \
(10-70 AD). This is a quadratically convergent algorithm, which means that \
the number of correct digits of the approximation roughly doubles with each \
iteration. It proceeds as follows:"
}], "Text",
 CellChangeTimes->{{3.4679708294636035`*^9, 3.467970910799961*^9}, {
  3.467970946243223*^9, 3.4679709565392413`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Let x be an estimate of ",
 Cell[BoxData[
  FormBox[
   SqrtBox["a"], TraditionalForm]]],
 " "
}], "ItemParagraph",
 CellChangeTimes->{{3.4679709716556683`*^9, 3.467970988784498*^9}}],

Cell[TextData[{
 "Then, the real value ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 " will lie between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "/", "x"}], TraditionalForm]]],
 " and x  (why?)"
}], "ItemParagraph",
 CellChangeTimes->{{3.4679709894864993`*^9, 3.4679710495154047`*^9}}],

Cell[TextData[{
 "Taking  the mean between those will get us closer to ",
 Cell[BoxData[
  FormBox["X", TraditionalForm]]],
 ": ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"(", 
     RowBox[{"x", "+", 
      FractionBox["a", "x"]}], ")"}]}], TraditionalForm]]]
}], "ItemParagraph",
 CellChangeTimes->{{3.4679710618706264`*^9, 3.467971088999074*^9}}]
}, Open  ]],

Cell[TextData[{
 "As an example we take ",
 Cell[BoxData[
  FormBox[
   SqrtBox["2"], TraditionalForm]]],
 ", ourt initial guess ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", "=", 
    RowBox[{"1.5", ":"}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.4679711039283004`*^9, 3.4679711108079123`*^9}, {
  3.4679711503227816`*^9, 3.467971161352001*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "=", "2"}], ",", "x"}], "}"}], ",", 
   RowBox[{
    RowBox[{"x", "=", "1.5"}], ";", 
    RowBox[{"x", "=", 
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{"(", 
       RowBox[{"x", "+", 
        FractionBox["a", "x"]}], ")"}]}]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.467971114785919*^9, 3.467971212738491*^9}, 
   3.4679712507557583`*^9, {3.467971328116294*^9, 3.467971334777506*^9}}],

Cell[BoxData["1.4166666666666665`"], "Output",
 CellChangeTimes->{{3.467971185220043*^9, 3.4679711920372553`*^9}, {
  3.467971332203501*^9, 3.4679713351519065`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sqrt", "[", 
  RowBox[{"N", "[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{3.467971215218896*^9}],

Cell[BoxData["1.4142135623730951`"], "Output",
 CellChangeTimes->{{3.467971203581275*^9, 3.4679712171532993`*^9}}]
}, Open  ]],

Cell["If we repeat the last step we come closer to the real value:", "Text",
 CellChangeTimes->{{3.4679712303509226`*^9, 3.4679712469025517`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "=", "2"}], ",", "x"}], "}"}], ",", 
   RowBox[{
    RowBox[{"x", "=", "1.5"}], ";", 
    RowBox[{"x", "=", 
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{"(", 
       RowBox[{"x", "+", 
        FractionBox["a", "x"]}], ")"}]}]}], ";", 
    RowBox[{"x", "=", 
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{"(", 
       RowBox[{"x", "+", 
        FractionBox["a", "x"]}], ")"}]}]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.467971254624565*^9, 3.467971260833376*^9}, {
  3.467971314076269*^9, 3.467971337928711*^9}}],

Cell[BoxData["1.4142156862745097`"], "Output",
 CellChangeTimes->{3.4679712638597813`*^9, 3.467971322469084*^9}]
}, Open  ]],

Cell["The iteration method is easily implemented in a loop. ", "Text",
 CellChangeTimes->{{3.4679712774318047`*^9, 3.4679713047474527`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "=", "2"}], ",", "x"}], "}"}], ",", 
   RowBox[{
    RowBox[{"x", "=", "1.5"}], ";", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"x", "=", 
       RowBox[{
        RowBox[{"1", "/", "2"}], 
        RowBox[{"(", 
         RowBox[{"x", "+", 
          RowBox[{"a", "/", "x"}]}], ")"}]}]}], ",", 
      RowBox[{"{", "3", "}"}]}], "]"}], ";", 
    RowBox[{"x", "//", "N"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.467971254624565*^9, 3.467971260833376*^9}, 
   3.4679712977898407`*^9, 3.4679713483807297`*^9, {3.4679713862107964`*^9, 
   3.467971431263675*^9}}],

Cell[BoxData["1.4142135623746899`"], "Output",
 CellChangeTimes->{{3.4679714167556496`*^9, 3.467971431653676*^9}}]
}, Open  ]],

Cell[TextData[{
 "The exact value of the initial guess makes no big difference. We can start \
with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "initial"], "=", "a"}], TraditionalForm]]],
 " and only loose one iteration step. To iterate until a given accuracy is \
met we use ",
 ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"],
 ":"
}], "Text",
 CellChangeTimes->{{3.4679714654589353`*^9, 3.4679715834107423`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mySqrt", "[", "a_", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "=", "a"}], ","}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"x", "-", 
          FractionBox["a", "x"]}], "]"}], ">", 
        RowBox[{"10", "^", 
         RowBox[{"(", 
          RowBox[{"-", "10"}], ")"}]}]}], ",", 
       RowBox[{"x", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "+", 
           FractionBox["a", "x"]}], ")"}], "/", "2"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", "x"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4679715891203527`*^9, 3.4679716490556574`*^9}, {
  3.4679717036557536`*^9, 3.46797172432579*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mySqrt", "[", "2.", "]"}]], "Input",
 CellChangeTimes->{{3.46797165598207*^9, 3.467971683484918*^9}, 
   3.4679717334986057`*^9}],

Cell[BoxData["1.4142135623746899`"], "Output",
 CellChangeTimes->{{3.467971659492076*^9, 3.4679716840621195`*^9}, {
  3.4679717272429953`*^9, 3.4679717349494085`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Excercise", "Subsubsection",
 CellChangeTimes->{{3.4673968591320057`*^9, 3.4673968604056077`*^9}}],

Cell["\<\
Create a loop that prints the first 20 positive integers. Find one \
realisation for each loop command from this section \
\>", "Text",
 CellChangeTimes->{{3.467396866817219*^9, 3.467396916518906*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Create a loop that prints the first 20 Powers of base 2. Find one realisation \
for each loop command from this section \
\>", "Text",
 CellChangeTimes->{{3.467396866817219*^9, 3.467396916518906*^9}, {
  3.4673969609633923`*^9, 3.467396995455053*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Create a loop that prints the following sequence 1,2,4,7,11,16,22,29,...\
\>", "Text",
 CellChangeTimes->{{3.467396866817219*^9, 3.467396916518906*^9}, {
  3.4673969609633923`*^9, 3.467396995455053*^9}, {3.467397053783555*^9, 
  3.467397093392025*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Create a loop thatfinds all pairs {n,m} such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "+", 
    SuperscriptBox["m", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "is a square ",
 Cell[BoxData[
  FormBox["numb", TraditionalForm]],
  FormatType->"TraditionalForm"],
 "er (e.g. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["3", "2"], "+", 
      SuperscriptBox["4", "2"]}], "=", 
     SuperscriptBox["5", "2"]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " "
}], "Text",
 CellChangeTimes->{{3.467396866817219*^9, 3.467396916518906*^9}, {
  3.4673969609633923`*^9, 3.467396995455053*^9}, {3.467397053783555*^9, 
  3.467397093392025*^9}, {3.4679868285742435`*^9, 3.467986884921542*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Find the first prime number consisting only of ones and is bigger than 11.\
\>", "Text",
 CellChangeTimes->{{3.467396866817219*^9, 3.467396916518906*^9}, {
   3.4673969609633923`*^9, 3.467396995455053*^9}, {3.467397053783555*^9, 
   3.467397093392025*^9}, {3.4680007878861065`*^9, 3.4680008395533977`*^9}, 
   3.4680014031667876`*^9},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Find the sum of the sequence\[LineSeparator]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      FractionBox["1", 
       RowBox[{"1", "+", "2"}]], "+", 
      FractionBox["2", 
       RowBox[{"2", "+", "3"}]], "+"}], "..."}], "+", 
    FractionBox["10", 
     RowBox[{"10", "+", "11"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.4680015139605956`*^9, 3.468001546455453*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 StyleBox["Euclidean algorithm",
  FontSize->14,
  FontVariations->{"Underline"->True}],
 "\n\nIn mathematics, the Euclidean algorithm (also called Euclid's \
algorithm) is an efficient method for computing the greatest common divisor \
(GCD), also known as the greatest common factor (GCF) or highest common \
factor (HCF). It is named after the Greek mathematician Euclid, who described \
it in Books VII and X of his Elements.\n\nThe GCD of two numbers ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", ",", " ", "b"}], TraditionalForm]]],
 "  is calculated by subtracting the smaller from the larger one, until both \
are the same. That number is the GCD.\n\nExample a = 1071 and b = 462\n\
1071-462 = 609\n609 - 462 = 147\n462 - 147 = 315\n315 - 147 = 168\n168 - 147 \
= 21\n147 - 21 = 126\nrepeat 6 more times\n-> 21-21=0\n---> GCD(1071,462) = 21"
}], "Text",
 CellChangeTimes->{{3.467974094684824*^9, 3.46797412075247*^9}, {
  3.4679741814209766`*^9, 3.4679744827511053`*^9}, {3.4679745150743628`*^9, 
  3.4679745449952145`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GCD", "[", 
  RowBox[{"1071", ",", "462"}], "]"}]], "Input",
 CellChangeTimes->{{3.4679745337943954`*^9, 3.467974551999627*^9}}],

Cell[BoxData["21"], "Output",
 CellChangeTimes->{3.467974552358428*^9}]
}, Open  ]],

Cell["Write a programm to calculate the GCD of two given integers", "Text",
 CellChangeTimes->{{3.467974733849147*^9, 3.467974756625187*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Debugging - Trace", "Subsection",
 CellChangeTimes->{{3.4671110010838604`*^9, 3.467111004344266*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Tracing Evaluation",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/TracingEvaluation"]
}], "Text",
 CellChangeTimes->{{3.4673979790991907`*^9, 3.4673979916728125`*^9}}],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " the two most important commands for debugging are ",
 ButtonBox["On",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/On"],
 " and ",
 ButtonBox["Trace",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Trace"],
 "."
}], "Text",
 CellChangeTimes->{{3.467397608292138*^9, 3.4673976543846207`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["On",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/On"], "[", 
   RowBox[{
    StyleBox["symbol", "TI"], "::", 
    StyleBox["tag", "TI"]}], "]"}]]],
 " switches on a message, so that it can be printed.  ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["On",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/On"], "[", "]"}]], "InlineFormula", 
  "TemplateInclusion"],
 " is equivalent to ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["On",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/On"], "[", 
   RowBox[{
    StyleBox["s", "TI"], "::", "trace"}], "]"}]], "InlineFormula"],
 " for all symbols. Let's see an example:"
}], "Text",
 CellChangeTimes->{{3.467397683697072*^9, 3.4673977085323153`*^9}}],

Cell[BoxData[{
 RowBox[{"On", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{"x", "=", 
  RowBox[{"\[Pi]", "/", "3"}]}], "\[IndentingNewLine]", 
 RowBox[{"Sin", "[", 
  RowBox[{"\[Pi]", "+", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Off", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.46739771110632*^9, 3.467397740153571*^9}, {
   3.4673977994336753`*^9, 3.467397799776876*^9}, 3.4673978770282116`*^9}],

Cell[TextData[{
 "On will give very long output. Often, ",
 StyleBox["Trace", "MR"],
 " is much more appropriate than is ",
 StyleBox["On[]", "MR"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Trace",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Trace"], "[", 
   StyleBox["expr", "TI"], "]"}]], "InlineFormula"],
 " ",
 "generates a list of all expressions used in the evaluation of ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4673978857330265`*^9, 3.467397920489888*^9}}],

Cell[BoxData[{
 RowBox[{"Trace", "[", 
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{"\[Pi]", "/", "3"}]}], ";", 
   RowBox[{"Sin", "[", 
    RowBox[{"\[Pi]", "+", "x"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FullForm", "[", "%", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Remove", "[", "x", "]"}]}], "Input",
 CellChangeTimes->{{3.4673979323147087`*^9, 3.467397942688727*^9}, {
  3.467398329741007*^9, 3.467398361658663*^9}}],

Cell[TextData[{
 "One advantage of Trace is that the output is a syntactically correct \
mathematica expression. We see in the FullForm of the Trace above that the \
subexpressions are enclosed in HoldForm. We can use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to analyse the output of Trace."
}], "Text",
 CellChangeTimes->{{3.4673983707066784`*^9, 3.4673984666468472`*^9}}],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"Trace", "[", 
   RowBox[{"integral", "=", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], "*", 
       RowBox[{"Cosh", "[", 
        RowBox[{"x", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}], "*", 
       RowBox[{"Log", "[", "x", "]"}]}], ",", "x"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.467398171837529*^9, 3.467398192835166*^9}, 
   3.46739827492251*^9, {3.467398475086462*^9, 3.467398475616863*^9}, {
   3.4673985094533224`*^9, 3.4673985112629256`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Depth", "[", "tr", "]"}], ",", 
   RowBox[{"ByteCount", "[", "tr", "]"}], ",", 
   RowBox[{"StringLength", "[", 
    RowBox[{"ToString", "[", 
     RowBox[{"FullForm", "[", "tr", "]"}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.4673984901248884`*^9, 3.4673985183765383`*^9}, 
   3.467399261998644*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["TracePrint",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/TracePrint"], "[", 
   StyleBox["expr", "TI"], "]"}]], "InlineFormula"],
 " ",
 "prints all expressions used in the evaluation of ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4673986018522844`*^9, 3.4673986061734924`*^9}}],

Cell[BoxData[
 RowBox[{"TracePrint", "[", 
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{"\[Pi]", "/", "3"}]}], ";", 
   RowBox[{"Sin", "[", 
    RowBox[{"\[Pi]", "+", "x"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4673985651610203`*^9, 3.467398567267024*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Trace", "[", 
   RowBox[{
    RowBox[{"y", "=", "6"}], ";", 
    RowBox[{"Plus", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"y", "=", 
         RowBox[{"y", "+", "1"}]}], ")"}], ";", "5"}], ",", "y"}], "]"}]}], 
   "]"}], "//", "TableForm"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Trace", "[", 
   RowBox[{
    RowBox[{"y", "=", "6"}], ";", 
    RowBox[{"Plus", "[", 
     RowBox[{"y", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"y", "=", 
         RowBox[{"y", "+", "1"}]}], ")"}], ";", "5"}]}], "]"}]}], "]"}], "//",
   "TableForm"}]], "Input"],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"t", "=", "6"}], ",", 
     RowBox[{"u", "=", "t"}]}], "}"}], ",", 
   RowBox[{"u", "^", "2"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"t", "=", "6"}], ",", 
      RowBox[{"u", "=", "t"}]}], "}"}], ",", 
    RowBox[{"u", "^", "2"}]}], "]"}], "]"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Application: Newton's Method", "Subsection",
 CellChangeTimes->{{3.4674002015143523`*^9, 3.467400209844767*^9}}],

Cell[TextData[{
 "We want to apply the new information from this section to a well known \
method: finding a function's root using Newton's method. We will use the \
function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], "-", "30"}], TraditionalForm]]],
 ". The built in command to do this is ",
 ButtonBox["FindRoot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FindRoot"],
 ":"
}], "Text",
 CellChangeTimes->{{3.467400213042773*^9, 3.4674003420861993`*^9}, {
  3.4674004410371733`*^9, 3.4674004573236017`*^9}}],

Cell[BoxData[{
 RowBox[{"Remove", "[", "x", "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "-", "30"}], "\[Equal]", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "20"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.467400366562642*^9, 3.467400435826764*^9}, {
  3.467400835281066*^9, 3.4674008375274696`*^9}}],

Cell[TextData[{
 "Newton's algorithm works as follows: given a function ",
 StyleBox["f",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.4674004892412577`*^9, 3.467400513873701*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "give an initial estimate of the root, say ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "0"], TraditionalForm]]]
}], "ItemParagraph",
 CellChangeTimes->{{3.4674005362441406`*^9, 3.4674005614225845`*^9}, {
  3.467400604650261*^9, 3.4674006104066706`*^9}}],

Cell[TextData[{
 "use the following rule to compute better ",
 Cell[BoxData[
  FormBox["estimates", TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "2"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "3"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "4"], TraditionalForm]]],
 ",... until you are done:\[LineSeparator]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"i", "+", "1"}]], "=", 
    RowBox[{
     SubscriptBox["x", "i"], "-", 
     FractionBox[
      RowBox[{"f", "(", 
       SubscriptBox["x", "i"], ")"}], 
      RowBox[{
       RowBox[{"f", "'"}], 
       RowBox[{"(", 
        SubscriptBox["x", "i"], ")"}]}]]}]}], TraditionalForm]]]
}], "ItemParagraph",
 CellChangeTimes->{{3.467400573309806*^9, 3.46740067263518*^9}}]
}, Open  ]],

Cell["\<\
Doing it manually shows that already after 5 iterations we are quite close to \
the root:\
\>", "Text",
 CellChangeTimes->{{3.4674008927359667`*^9, 3.467400907774393*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "-", "30"}]}]], "Input",
 CellChangeTimes->{{3.467400706331239*^9, 3.4674007210888653`*^9}, 
   3.467400841177876*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["x", "0"], "=", "20"}], ";"}]], "Input",
 CellChangeTimes->{{3.4674007308700824`*^9, 3.467400750806917*^9}, 
   3.467400845670684*^9}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["x", "1"], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["x", "0"], "-", 
    FractionBox[
     RowBox[{"f", "[", 
      SubscriptBox["x", "0"], "]"}], 
     RowBox[{
      RowBox[{"f", "'"}], "[", 
      SubscriptBox["x", "0"], "]"}]]}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.4674007623197374`*^9, 3.4674007796201677`*^9}}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["x", "2"], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["x", "1"], "-", 
    FractionBox[
     RowBox[{"f", "[", 
      SubscriptBox["x", "1"], "]"}], 
     RowBox[{
      RowBox[{"f", "'"}], "[", 
      SubscriptBox["x", "1"], "]"}]]}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.4674007623197374`*^9, 3.467400792895791*^9}}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["x", "3"], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["x", "2"], "-", 
    FractionBox[
     RowBox[{"f", "[", 
      SubscriptBox["x", "2"], "]"}], 
     RowBox[{
      RowBox[{"f", "'"}], "[", 
      SubscriptBox["x", "2"], "]"}]]}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.4674007623197374`*^9, 3.467400800196604*^9}}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["x", "4"], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["x", "3"], "-", 
    FractionBox[
     RowBox[{"f", "[", 
      SubscriptBox["x", "3"], "]"}], 
     RowBox[{
      RowBox[{"f", "'"}], "[", 
      SubscriptBox["x", "3"], "]"}]]}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.4674007623197374`*^9, 3.467400807091816*^9}}],

Cell[BoxData[
 RowBox[{
  SubscriptBox["x", "5"], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["x", "4"], "-", 
    FractionBox[
     RowBox[{"f", "[", 
      SubscriptBox["x", "4"], "]"}], 
     RowBox[{
      RowBox[{"f", "'"}], "[", 
      SubscriptBox["x", "4"], "]"}]]}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.4674007623197374`*^9, 3.46740081493863*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xi", "=", "20"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"xi", "=", 
     RowBox[{"N", "[", 
      RowBox[{"xi", "-", 
       FractionBox[
        RowBox[{"f", "[", "xi", "]"}], 
        RowBox[{
         RowBox[{"f", "'"}], "[", "xi", "]"}]]}], "]"}]}], ";", 
    RowBox[{"Print", "[", "xi", "]"}]}], ",", 
   RowBox[{"{", "10", "}"}]}], "]"}], "\[IndentingNewLine]", "xi"}], "Input",
 CellChangeTimes->{{3.467400927804828*^9, 3.467400928428829*^9}, {
  3.467400963918892*^9, 3.46740103730142*^9}}],

Cell["\<\
If we don't know how many iterations we will need to come sufficiently close \
to the root we coudl use While to build the loop:\
\>", "Text",
 CellChangeTimes->{{3.4674010759114885`*^9, 3.467401105754341*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[CurlyEpsilon]", "=", 
   SuperscriptBox["10", 
    RowBox[{"-", "15"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xi", "=", "20"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"While", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Abs", "[", 
     RowBox[{"f", "[", "xi", "]"}], "]"}], ">", "\[CurlyEpsilon]"}], ",", 
   RowBox[{
    RowBox[{"xi", "=", 
     RowBox[{"N", "[", 
      RowBox[{"xi", "-", 
       FractionBox[
        RowBox[{"f", "[", "xi", "]"}], 
        RowBox[{
         RowBox[{"f", "'"}], "[", "xi", "]"}]]}], "]"}]}], ";", 
    RowBox[{"Print", "[", "xi", "]"}]}]}], 
  "]"}], "\[IndentingNewLine]", "xi"}], "Input",
 CellChangeTimes->{{3.467401108687146*^9, 3.467401117173561*^9}, {
  3.4674011671404486`*^9, 3.467401278836645*^9}}],

Cell["Finally we can pluf it all together:", "Text",
 CellChangeTimes->{{3.467401292751869*^9, 3.4674013115187025`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"newton", "[", 
   RowBox[{"function_", ",", "xinitial_", ",", "\[CurlyEpsilon]_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xi", "=", "xinitial"}], "}"}], ",", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"function", "[", "xi", "]"}], "]"}], ">", 
        "\[CurlyEpsilon]"}], ",", 
       RowBox[{"xi", "=", 
        RowBox[{"N", "[", 
         RowBox[{"xi", "-", 
          FractionBox[
           RowBox[{"function", "[", "xi", "]"}], 
           RowBox[{
            RowBox[{"function", "'"}], "[", "xi", "]"}]]}], "]"}]}]}], "]"}], 
     ";", "xi"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4674013150911083`*^9, 3.467401403808464*^9}}],

Cell[BoxData[
 RowBox[{"newton", "[", 
  RowBox[{"f", ",", "40", ",", 
   SuperscriptBox["10", 
    RowBox[{"-", "5"}]]}], "]"}]], "Input",
 CellChangeTimes->{{3.467401408800473*^9, 3.4674014342129173`*^9}, {
  3.4674014774405937`*^9, 3.4674015155046606`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Excercise", "Subsection",
 CellChangeTimes->{{3.4673996978514194`*^9, 3.467399699598623*^9}}],

Cell["\<\
Compute the square roots of 50 and 60 simultaneously, i.e. with a single Do \
loop.\
\>", "Text",
 CellChangeTimes->{{3.4674015895267906`*^9, 3.467401610976828*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Do is closely related to Table. The difference is that Do does not return any \
values, whereas Table does. Use Table instead of Do for the above excercise.\
\>", "Text",
 CellChangeTimes->{{3.4674016223960485`*^9, 3.467401663751721*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Improve the function newton. Try to reduce the number of function calls to f \
and the number of times that the derivative has to be calculated.\
\>", "Text",
 CellChangeTimes->{{3.4674016846245575`*^9, 3.467401752328676*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 StyleBox["The Sieve of Eratosthenes",
  FontSlant->"Italic"],
 "\[LineSeparator]One of the oldes algorithms in computing history is the \
Sieve of Eratosthenes. This method is used to find all prime numbers below a \
given number n. The big advantage of this method is that it find primes \
without division. The algorithm can be summarized as \
follows:\[LineSeparator]to find all prime numbers less than an integer n:\n\n\
1) create a list of the integers 1 through n\n2) starting with p=2, cross out \
all multiples of p\n3) increment p by 1 and cross out all multiples of p\n4) \
repeat the previous step until ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", ">", 
    SqrtBox["n"]}], TraditionalForm]]],
 "\n\nCreate a short program to realize the Sieve of Eratosthenes. "
}], "Text",
 CellChangeTimes->{{3.4674019031965413`*^9, 3.467402212404684*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{704, 718},
WindowMargins->{{17, Automatic}, {Automatic, 11}},
ShowSelection->True,
Magnification->1.100000023841858,
FrontEndVersion->"7.0 for Microsoft Windows (64-bit) (February 18, 2009)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "NaturalColor.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 187, 5, 138, "Title"],
Cell[757, 29, 551, 12, 131, "Subtitle"],
Cell[CellGroupData[{
Cell[1333, 45, 229, 4, 83, "Section"],
Cell[1565, 51, 607, 18, 140, "Text"],
Cell[CellGroupData[{
Cell[2197, 73, 99, 1, 44, "Subsection"],
Cell[2299, 76, 712, 20, 183, "Text"],
Cell[3014, 98, 878, 28, 100, "Text"],
Cell[3895, 128, 222, 7, 47, "Input"],
Cell[4120, 137, 119, 1, 34, "Text"],
Cell[4242, 140, 408, 13, 47, "Input"],
Cell[4653, 155, 861, 26, 92, "Input"],
Cell[5517, 183, 254, 7, 47, "Input"],
Cell[5774, 192, 248, 6, 56, "Text"],
Cell[6025, 200, 445, 11, 160, "Input"],
Cell[6473, 213, 213, 4, 47, "Input"],
Cell[6689, 219, 364, 9, 79, "Text"],
Cell[7056, 230, 278, 7, 47, "Input"],
Cell[7337, 239, 361, 8, 77, "Text"],
Cell[CellGroupData[{
Cell[7723, 251, 1045, 33, 70, "Input"],
Cell[8771, 286, 21501, 369, 174, "Output"]
}, Open  ]],
Cell[30287, 658, 218, 7, 34, "Text"],
Cell[30508, 667, 892, 27, 70, "Input"],
Cell[31403, 696, 139, 1, 34, "Text"],
Cell[31545, 699, 657, 23, 35, "Text"],
Cell[32205, 724, 888, 32, 58, "Text"],
Cell[33096, 758, 768, 25, 59, "Text"],
Cell[33867, 785, 2217, 63, 224, "Input"],
Cell[CellGroupData[{
Cell[36109, 852, 102, 1, 31, "Subsubsection"],
Cell[36214, 855, 242, 4, 34, "Text"],
Cell[36459, 861, 302, 5, 56, "Text"],
Cell[36764, 868, 251, 6, 56, "Text"],
Cell[37018, 876, 190, 3, 34, "Text"],
Cell[37211, 881, 270, 6, 34, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[37530, 893, 105, 1, 33, "Subsection"],
Cell[37638, 896, 459, 15, 56, "Text"],
Cell[38100, 913, 252, 9, 47, "Input"],
Cell[38355, 924, 775, 23, 70, "Input"],
Cell[39133, 949, 527, 17, 57, "Text"],
Cell[39663, 968, 604, 19, 70, "Input"],
Cell[40270, 989, 513, 10, 97, "Text"],
Cell[CellGroupData[{
Cell[40808, 1003, 270, 6, 47, "Input"],
Cell[41081, 1011, 12667, 259, 304, "Output"]
}, Open  ]],
Cell[53763, 1273, 174, 4, 34, "Text"],
Cell[53940, 1279, 292, 7, 49, "Input"],
Cell[54235, 1288, 294, 7, 49, "Input"],
Cell[54532, 1297, 146, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[54703, 1304, 290, 7, 49, "Input"],
Cell[54996, 1313, 17168, 331, 302, "Output"]
}, Open  ]],
Cell[72179, 1647, 355, 11, 34, "Text"],
Cell[CellGroupData[{
Cell[72559, 1662, 723, 16, 49, "Input"],
Cell[73285, 1680, 1041, 19, 247, "Output"]
}, Open  ]],
Cell[74341, 1702, 248, 8, 37, "Text"],
Cell[CellGroupData[{
Cell[74614, 1714, 177, 4, 49, "Input"],
Cell[74794, 1720, 114, 1, 47, "Output"]
}, Open  ]],
Cell[74923, 1724, 203, 4, 56, "Text"],
Cell[CellGroupData[{
Cell[75151, 1732, 722, 17, 49, "Input"],
Cell[75876, 1751, 17359, 336, 302, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93272, 2092, 102, 1, 31, "Subsubsection"],
Cell[93377, 2095, 219, 5, 34, "Text"],
Cell[93599, 2102, 176, 3, 34, "Text"],
Cell[93778, 2107, 174, 3, 34, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[94001, 2116, 128, 1, 33, "Subsection"],
Cell[94132, 2119, 392, 12, 119, "Text"],
Cell[94527, 2133, 347, 9, 56, "Text"],
Cell[94877, 2144, 823, 23, 92, "Input"],
Cell[95703, 2169, 310, 6, 77, "Text"],
Cell[96016, 2177, 1767, 66, 75, "Text"],
Cell[97786, 2245, 456, 14, 70, "Input"],
Cell[98245, 2261, 229, 4, 56, "Text"],
Cell[98477, 2267, 345, 11, 47, "Input"],
Cell[98825, 2280, 460, 13, 70, "Input"],
Cell[99288, 2295, 158, 3, 34, "Text"],
Cell[99449, 2300, 370, 12, 47, "Input"],
Cell[99822, 2314, 446, 13, 47, "Input"],
Cell[100271, 2329, 1201, 46, 62, "Text"],
Cell[CellGroupData[{
Cell[101497, 2379, 96, 1, 31, "Subsubsection"],
Cell[101596, 2382, 620, 21, 56, "Text"],
Cell[102219, 2405, 844, 29, 80, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[103112, 2440, 101, 1, 33, "Subsection"],
Cell[103216, 2443, 218, 6, 77, "Text"],
Cell[103437, 2451, 1380, 49, 83, "Text"],
Cell[104820, 2502, 123, 1, 34, "Text"],
Cell[104946, 2505, 356, 10, 47, "Input"],
Cell[105305, 2517, 128, 1, 34, "Text"],
Cell[105436, 2520, 1153, 29, 136, "Input"],
Cell[106592, 2551, 105, 1, 34, "Text"],
Cell[106700, 2554, 663, 21, 70, "Input"],
Cell[107366, 2577, 1033, 35, 53, "Text"],
Cell[108402, 2614, 526, 15, 70, "Input"],
Cell[108931, 2631, 952, 25, 92, "Input"],
Cell[109886, 2658, 252, 5, 56, "Text"],
Cell[110141, 2665, 170, 3, 47, "Input"],
Cell[110314, 2670, 849, 30, 37, "Text"],
Cell[111166, 2702, 767, 24, 70, "Input"],
Cell[111936, 2728, 106, 1, 34, "Text"],
Cell[112045, 2731, 436, 8, 77, "Text"],
Cell[112484, 2741, 1598, 44, 203, "Input"],
Cell[114085, 2787, 70, 1, 47, "Input"],
Cell[114158, 2790, 191, 6, 34, "Text"],
Cell[114352, 2798, 2481, 72, 224, "Input"],
Cell[116836, 2872, 756, 26, 57, "Text"],
Cell[117595, 2900, 291, 8, 49, "Input"],
Cell[117889, 2910, 703, 24, 35, "Text"],
Cell[118595, 2936, 984, 28, 92, "Input"],
Cell[119582, 2966, 103, 2, 47, "Input"],
Cell[119688, 2970, 102, 2, 47, "Input"],
Cell[119793, 2974, 685, 21, 57, "Text"],
Cell[120481, 2997, 276, 7, 47, "Input"],
Cell[120760, 3006, 895, 30, 57, "Text"],
Cell[121658, 3038, 343, 9, 47, "Input"],
Cell[122004, 3049, 948, 33, 58, "Text"],
Cell[122955, 3084, 269, 8, 47, "Input"],
Cell[123227, 3094, 129, 1, 34, "Text"],
Cell[123359, 3097, 1882, 55, 202, "Input"],
Cell[125244, 3154, 894, 31, 57, "Text"],
Cell[126141, 3187, 677, 22, 70, "Input"],
Cell[126821, 3211, 138, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[126984, 3216, 229, 5, 47, "Input"],
Cell[127216, 3223, 21154, 363, 504, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[148407, 3591, 97, 1, 24, "Subsubsection"],
Cell[148507, 3594, 372, 11, 34, "Text"],
Cell[148882, 3607, 390, 14, 34, "Text"],
Cell[149275, 3623, 337, 10, 34, "Text"],
Cell[149615, 3635, 313, 11, 44, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[149977, 3652, 111, 1, 33, "Subsection"],
Cell[150091, 3655, 395, 12, 73, "Text"],
Cell[150489, 3669, 402, 9, 77, "Text"],
Cell[150894, 3680, 1223, 33, 180, "Input"],
Cell[152120, 3715, 354, 8, 56, "Text"],
Cell[152477, 3725, 119, 3, 47, "Input"],
Cell[152599, 3730, 119, 1, 34, "Text"],
Cell[152721, 3733, 999, 27, 158, "Input"],
Cell[153723, 3762, 361, 9, 34, "Text"],
Cell[154087, 3773, 774, 22, 92, "Input"],
Cell[154864, 3797, 406, 13, 34, "Text"],
Cell[155273, 3812, 240, 7, 47, "Input"],
Cell[CellGroupData[{
Cell[155538, 3823, 104, 1, 31, "Subsubsection"],
Cell[155645, 3826, 294, 6, 56, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[155988, 3838, 151, 2, 33, "Subsection"],
Cell[156142, 3842, 77, 1, 47, "Input"],
Cell[156222, 3845, 240, 7, 119, "Text"],
Cell[156465, 3854, 268, 7, 56, "Text"],
Cell[156736, 3863, 529, 16, 47, "Input"],
Cell[157268, 3881, 120, 4, 56, "Text"],
Cell[157391, 3887, 778, 21, 70, "Input"],
Cell[158172, 3910, 1734, 45, 202, "Input"],
Cell[159909, 3957, 531, 14, 57, "Text"],
Cell[160443, 3973, 726, 21, 92, "Input"],
Cell[161172, 3996, 786, 22, 114, "Input"],
Cell[CellGroupData[{
Cell[161983, 4022, 102, 1, 31, "Subsubsection"],
Cell[162088, 4025, 132, 1, 143, "Text"],
Cell[162223, 4028, 1799, 47, 1173, "Input"],
Cell[164025, 4077, 305, 9, 212, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[164367, 4091, 106, 1, 24, "Subsubsection"],
Cell[164476, 4094, 120, 1, 143, "Text"],
Cell[164599, 4097, 1298, 35, 883, "Input"],
Cell[165900, 4134, 793, 24, 499, "Input"],
Cell[166696, 4160, 16, 0, 143, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[166761, 4166, 118, 1, 33, "Subsection"],
Cell[166882, 4169, 192, 4, 34, "Text"],
Cell[167077, 4175, 344, 9, 47, "Input"],
Cell[167424, 4186, 648, 12, 97, "Text"],
Cell[168075, 4200, 444, 9, 97, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[168556, 4214, 98, 1, 33, "Subsection"],
Cell[CellGroupData[{
Cell[168679, 4219, 107, 1, 31, "Subsubsection"],
Cell[168789, 4222, 479, 14, 34, "Text"],
Cell[169271, 4238, 210999, 3464, 251, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[380307, 7707, 142, 2, 24, "Subsubsection"],
Cell[380452, 7711, 549, 18, 34, "Text"],
Cell[381004, 7731, 112857, 1855, 392, "Input"],
Cell[493864, 9588, 243, 4, 34, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[494144, 9597, 107, 1, 24, "Subsubsection"],
Cell[494254, 9600, 209, 5, 34, "Text"],
Cell[494466, 9607, 587, 18, 92, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[495090, 9630, 105, 1, 24, "Subsubsection"],
Cell[495198, 9633, 907, 33, 77, "Text"],
Cell[496108, 9668, 614, 22, 63, "Text"],
Cell[496725, 9692, 274, 8, 56, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[497036, 9705, 103, 1, 24, "Subsubsection"],
Cell[497142, 9708, 1530, 51, 149, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[498709, 9764, 112, 1, 24, "Subsubsection"],
Cell[498824, 9767, 3081, 89, 309, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[501942, 9861, 80, 1, 24, "Subsubsection"],
Cell[502025, 9864, 386, 11, 56, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[502448, 9880, 102, 1, 24, "Subsubsection"],
Cell[502553, 9883, 2037, 67, 233, "Text"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[504651, 9957, 104, 1, 50, "Section"],
Cell[504758, 9960, 310, 8, 77, "Text"],
Cell[505071, 9970, 404, 7, 77, "Text"],
Cell[505478, 9979, 307, 8, 47, "Input"],
Cell[505788, 9989, 125, 2, 47, "Input"],
Cell[505916, 9993, 214, 5, 34, "Text"],
Cell[CellGroupData[{
Cell[506155, 10002, 122, 1, 44, "Subsection"],
Cell[506280, 10005, 266, 6, 77, "Text"],
Cell[CellGroupData[{
Cell[506571, 10015, 113, 1, 31, "Subsubsection"],
Cell[506687, 10018, 266, 7, 34, "Text"],
Cell[506956, 10027, 351, 8, 92, "Input"],
Cell[507310, 10037, 354, 8, 114, "Input"],
Cell[507667, 10047, 264, 5, 34, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[507968, 10057, 146, 2, 24, "Subsubsection"],
Cell[508117, 10061, 217, 6, 77, "Text"],
Cell[508337, 10069, 1298, 47, 58, "Text"],
Cell[509638, 10118, 562, 16, 86, "Input"],
Cell[510203, 10136, 232, 7, 47, "Input"],
Cell[510438, 10145, 734, 21, 117, "Input"],
Cell[511175, 10168, 162, 6, 47, "Input"],
Cell[511340, 10176, 227, 7, 34, "Text"],
Cell[511570, 10185, 774, 22, 140, "Input"],
Cell[512347, 10209, 1131, 40, 79, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[513515, 10254, 97, 1, 24, "Subsubsection"],
Cell[513615, 10257, 396, 10, 97, "Text"],
Cell[514014, 10269, 471, 16, 57, "Text"],
Cell[514488, 10287, 497, 12, 79, "Text"],
Cell[514988, 10301, 325, 10, 56, "Text"],
Cell[515316, 10313, 611, 22, 35, "Text"],
Cell[515930, 10337, 50, 1, 47, "Input"],
Cell[515983, 10340, 189, 6, 47, "Input"],
Cell[516175, 10348, 69, 1, 47, "Input"],
Cell[516247, 10351, 625, 19, 35, "Text"],
Cell[516875, 10372, 404, 6, 97, "Text"],
Cell[517282, 10380, 139, 4, 47, "Input"],
Cell[517424, 10386, 139, 4, 47, "Input"],
Cell[517566, 10392, 703, 22, 78, "Text"],
Cell[518272, 10416, 208, 6, 35, "Text"],
Cell[518483, 10424, 233, 8, 47, "Input"],
Cell[518719, 10434, 156, 3, 34, "Text"],
Cell[518878, 10439, 742, 21, 158, "Input"],
Cell[519623, 10462, 219, 6, 34, "Text"],
Cell[519845, 10470, 611, 20, 78, "Text"],
Cell[520459, 10492, 6228, 167, 576, "Input"],
Cell[526690, 10661, 158, 2, 34, "Text"],
Cell[526851, 10665, 462, 15, 47, "Input"],
Cell[527316, 10682, 156, 3, 34, "Text"],
Cell[527475, 10687, 662, 19, 70, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[528174, 10711, 183, 2, 24, "Subsubsection"],
Cell[528360, 10715, 409, 10, 97, "Text"],
Cell[528772, 10727, 558, 21, 78, "Text"],
Cell[529333, 10750, 1285, 48, 79, "Text"],
Cell[530621, 10800, 657, 18, 79, "Text"],
Cell[531281, 10820, 50, 1, 47, "Input"],
Cell[531334, 10823, 139, 4, 47, "Input"],
Cell[531476, 10829, 138, 4, 47, "Input"],
Cell[531617, 10835, 205, 7, 47, "Input"],
Cell[531825, 10844, 69, 1, 47, "Input"],
Cell[531897, 10847, 423, 14, 77, "Text",
 CellID->9658],
Cell[532323, 10863, 353, 11, 77, "Text",
 CellID->11293],
Cell[532679, 10876, 112, 1, 34, "Text"],
Cell[532794, 10879, 72, 2, 47, "Input"],
Cell[532869, 10883, 255, 8, 35, "Text"],
Cell[533127, 10893, 154, 5, 47, "Input"],
Cell[533284, 10900, 257, 8, 35, "Text"],
Cell[533544, 10910, 155, 5, 47, "Input"],
Cell[533702, 10917, 207, 6, 34, "Text"],
Cell[533912, 10925, 997, 34, 101, "Text"],
Cell[534912, 10961, 1808, 49, 202, "Input"],
Cell[536723, 11012, 792, 23, 102, "Text"],
Cell[537518, 11037, 1556, 38, 202, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[539123, 11081, 179, 2, 33, "Subsection"],
Cell[539305, 11085, 749, 22, 137, "Text"],
Cell[540057, 11109, 311, 9, 56, "Text"],
Cell[540371, 11120, 1524, 60, 58, "Text"],
Cell[541898, 11182, 320, 8, 49, "Input"],
Cell[542221, 11192, 304, 7, 47, "Input"],
Cell[542528, 11201, 206, 5, 47, "Input"],
Cell[542737, 11208, 247, 7, 47, "Input"],
Cell[542987, 11217, 390, 11, 47, "Input"],
Cell[543380, 11230, 259, 7, 47, "Input"],
Cell[543642, 11239, 793, 25, 80, "Text"],
Cell[544438, 11266, 1101, 38, 58, "Text"],
Cell[545542, 11306, 289, 8, 57, "Text"],
Cell[545834, 11316, 278, 8, 47, "Input"],
Cell[546115, 11326, 199, 4, 70, "Input"],
Cell[546317, 11332, 1237, 40, 100, "Text"],
Cell[547557, 11374, 506, 10, 92, "Input"],
Cell[548066, 11386, 469, 10, 154, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[548572, 11401, 148, 2, 33, "Subsection"],
Cell[548723, 11405, 233, 6, 34, "Text"],
Cell[548959, 11413, 2756, 96, 101, "Text"],
Cell[551718, 11511, 385, 10, 97, "Text"],
Cell[552106, 11523, 475, 11, 97, "Text"],
Cell[552584, 11536, 1190, 45, 58, "Text"],
Cell[553777, 11583, 185, 6, 47, "Input"],
Cell[553965, 11591, 484, 18, 35, "Text"],
Cell[554452, 11611, 296, 10, 47, "Input"],
Cell[554751, 11623, 538, 15, 79, "Text"],
Cell[555292, 11640, 266, 9, 47, "Input"],
Cell[555561, 11651, 231, 8, 58, "Text"],
Cell[555795, 11661, 888, 33, 58, "Text"],
Cell[556686, 11696, 235, 8, 47, "Input"],
Cell[556924, 11706, 326, 12, 35, "Text"],
Cell[557253, 11720, 396, 11, 70, "Input"],
Cell[557652, 11733, 1264, 48, 58, "Text"],
Cell[558919, 11783, 359, 13, 35, "Text"],
Cell[559281, 11798, 200, 6, 47, "Input"],
Cell[559484, 11806, 374, 12, 58, "Text"],
Cell[559861, 11820, 379, 13, 47, "Input"],
Cell[CellGroupData[{
Cell[560265, 11837, 202, 3, 31, "Subsubsection"],
Cell[560470, 11842, 603, 15, 122, "Text"],
Cell[CellGroupData[{
Cell[561098, 11861, 201, 7, 29, "ItemParagraph"],
Cell[561302, 11870, 297, 10, 26, "ItemParagraph"],
Cell[561602, 11882, 386, 13, 39, "ItemParagraph"]
}, Open  ]],
Cell[562003, 11898, 359, 12, 45, "Text"],
Cell[CellGroupData[{
Cell[562387, 11914, 501, 15, 77, "Input"],
Cell[562891, 11931, 165, 2, 57, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[563093, 11938, 127, 3, 57, "Input"],
Cell[563223, 11943, 114, 1, 57, "Output"]
}, Open  ]],
Cell[563352, 11947, 146, 1, 40, "Text"],
Cell[CellGroupData[{
Cell[563523, 11952, 639, 21, 77, "Input"],
Cell[564165, 11975, 112, 1, 57, "Output"]
}, Open  ]],
Cell[564292, 11979, 140, 1, 40, "Text"],
Cell[CellGroupData[{
Cell[564457, 11984, 667, 20, 57, "Input"],
Cell[565127, 12006, 114, 1, 57, "Output"]
}, Open  ]],
Cell[565256, 12010, 460, 14, 67, "Text"],
Cell[565719, 12026, 854, 25, 176, "Input"],
Cell[CellGroupData[{
Cell[566598, 12055, 153, 3, 57, "Input"],
Cell[566754, 12060, 167, 2, 57, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[566970, 12068, 104, 1, 24, "Subsubsection"],
Cell[567077, 12071, 263, 6, 56, "Text"],
Cell[567343, 12079, 313, 7, 56, "Text"],
Cell[567659, 12088, 314, 7, 34, "Text"],
Cell[567976, 12097, 865, 28, 59, "Text"],
Cell[568844, 12127, 396, 8, 34, "Text"],
Cell[569243, 12137, 513, 17, 61, "Text"],
Cell[569759, 12156, 1099, 21, 440, "Text"],
Cell[CellGroupData[{
Cell[570883, 12181, 152, 3, 47, "Input"],
Cell[571038, 12186, 71, 1, 47, "Output"]
}, Open  ]],
Cell[571124, 12190, 193, 3, 34, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[571366, 12199, 107, 1, 33, "Subsection"],
Cell[571476, 12202, 228, 6, 77, "Text"],
Cell[571707, 12210, 369, 14, 34, "Text"],
Cell[572079, 12226, 758, 26, 58, "Text"],
Cell[572840, 12254, 406, 8, 114, "Input"],
Cell[573249, 12264, 541, 18, 57, "Text"],
Cell[573793, 12284, 435, 10, 92, "Input"],
Cell[574231, 12296, 387, 8, 77, "Text"],
Cell[574621, 12306, 576, 15, 61, "Input"],
Cell[575200, 12323, 366, 9, 47, "Input"],
Cell[575569, 12334, 400, 13, 35, "Text"],
Cell[575972, 12349, 267, 7, 47, "Input"],
Cell[576242, 12358, 316, 11, 47, "Input"],
Cell[576561, 12371, 315, 11, 47, "Input"],
Cell[576879, 12384, 207, 7, 47, "Input"],
Cell[577089, 12393, 245, 8, 47, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[577371, 12406, 118, 1, 33, "Subsection"],
Cell[577492, 12409, 540, 15, 92, "Text"],
Cell[578035, 12426, 397, 10, 86, "Input"],
Cell[578435, 12438, 192, 5, 40, "Text"],
Cell[CellGroupData[{
Cell[578652, 12447, 276, 7, 26, "ItemParagraph"],
Cell[578931, 12456, 926, 36, 64, "ItemParagraph"]
}, Open  ]],
Cell[579872, 12495, 181, 4, 40, "Text"],
Cell[580056, 12501, 222, 6, 57, "Input"],
Cell[580281, 12509, 185, 5, 57, "Input"],
Cell[580469, 12516, 372, 12, 79, "Input"],
Cell[580844, 12530, 370, 12, 79, "Input"],
Cell[581217, 12544, 370, 12, 79, "Input"],
Cell[581590, 12558, 370, 12, 79, "Input"],
Cell[581963, 12572, 369, 12, 79, "Input"],
Cell[582335, 12586, 583, 16, 135, "Input"],
Cell[582921, 12604, 220, 4, 67, "Text"],
Cell[583144, 12610, 798, 23, 161, "Input"],
Cell[583945, 12635, 120, 1, 40, "Text"],
Cell[584068, 12638, 797, 23, 144, "Input"],
Cell[584868, 12663, 260, 6, 59, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[585165, 12674, 99, 1, 33, "Subsection"],
Cell[585267, 12677, 227, 6, 34, "Text"],
Cell[585497, 12685, 300, 6, 56, "Text"],
Cell[585800, 12693, 288, 6, 56, "Text"],
Cell[586091, 12701, 923, 19, 292, "Text"]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
