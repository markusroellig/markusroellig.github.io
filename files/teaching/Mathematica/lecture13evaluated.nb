(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[   1144464,      24481]
NotebookOptionsPosition[   1113761,      23511]
NotebookOutlinePosition[   1114779,      23543]
CellTagsIndexPosition[   1114629,      23537]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a Tool for Astronomy and Physics"
}], "Title",
 CellChangeTimes->{{3.4631492689871325`*^9, 3.4631492808119326`*^9}}],

Cell["\<\
Lecture 13
Wintersemester 2009/10

Markus R\[ODoubleDot]llig\
\>", "Subtitle",
 CellChangeTimes->{{3.4631492844155326`*^9, 3.463149301715933*^9}, {
   3.463149446339533*^9, 3.4631494500679326`*^9}, {3.463150895378133*^9, 
   3.4631508957369328`*^9}, {3.4631509331145325`*^9, 
   3.4631509348461323`*^9}, {3.4633918330178003`*^9, 3.4633918441094*^9}, {
   3.4633924180713997`*^9, 3.4633924208326*^9}, 3.4633925658190002`*^9, 
   3.464937683525*^9, 3.4654667940002003`*^9, 3.4661610144728003`*^9, 
   3.466824617671341*^9, 3.46772120193779*^9, {3.469855652163376*^9, 
   3.4698556523033752`*^9}, {3.472295674747834*^9, 3.4722956749038343`*^9}, {
   3.4728923814640903`*^9, 3.4728923817136908`*^9}}],

Cell[CellGroupData[{

Cell["Matrices and Linear Algebra", "Section",
 CellChangeTimes->{3.4673655508115454`*^9}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Linear Algebra in Mathematica",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/LinearAlgebraInMathematicaOverview"],
 "\n",
 ButtonBox["Matrices and Linear Algebra\n",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/guide/MatricesAndLinearAlgebra"],
 ButtonBox["Parts of Matrices",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/PartsOfMatrices"],
 "\n",
 ButtonBox["Basic Matrix Operations\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/BasicMatrixOperations"],
 ButtonBox["Advanced Matrix Operations",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/AdvancedMatrixOperations"]
}], "Text",
 CellChangeTimes->{{3.4673655552731533`*^9, 3.4673656083288465`*^9}, {
  3.467373111954713*^9, 3.467373120550328*^9}, {3.4673735363010674`*^9, 
  3.4673735469530954`*^9}, {3.467373697526572*^9, 3.467373709304593*^9}}],

Cell[CellGroupData[{

Cell["Standard Operations", "Subsection",
 CellChangeTimes->{{3.472893529532507*^9, 3.4728935340565147`*^9}}],

Cell[TextData[{
 "We already made the identification ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["\"\<list\>\"", "TI"], " ", 
    OverscriptBox["=", "^"], 
    StyleBox["\"\<vector\>\"", "TI"]}], TraditionalForm]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"\"\<listOfLists\>\"", "OfEqualLength"}], "TI"], " ", 
    OverscriptBox["=", "^"], 
    StyleBox["\"\<matrix\>\"", "TI"]}], TraditionalForm]], "InlineFormula"],
 ", etc. and worked with lists and lists of lists. In this section we will \
show how to apply ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " on standard problems from linear algebra."
}], "Text",
 CellChangeTimes->{{3.4673657728155355`*^9, 3.467365880830125*^9}}],

Cell[TextData[{
 "The rank of a matrix is the number of linearly independent rows or columns. \
 ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["MatrixRank",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/MatrixRank"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 " ",
 "gives the rank of the matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4673733577487445`*^9, 3.4673733672335615`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixRank", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.4734391809493046`*^9}]
}, Open  ]],

Cell[TextData[{
 "We turn now to the typical problems of linear algebra: inverting a matrix, \
computing its determinant, calculating the eigenvalues and eigenvectors in ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["A",
      FontWeight->"Bold",
      FontSlant->"Plain"], 
     StyleBox[".",
      FontSlant->"Plain"], 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold",
       FontSlant->"Plain"], "i"]}], " ", "=", 
    RowBox[{"\[Lambda]", " ", 
     SubscriptBox[
      StyleBox["x",
       FontWeight->"Bold",
       FontSlant->"Plain"], "i"]}]}], TraditionalForm]], "InlineFormula"],
 ", and solving systems of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{
      StyleBox["A",
       FontWeight->"Bold"], ".", 
      StyleBox["x",
       FontWeight->"Bold"]}],
     FontSlant->"Plain"], " ", "=", " ", 
    StyleBox["b",
     FontWeight->"Bold",
     FontSlant->"Plain"]}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{3.4673658948545494`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Diagonal",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Diagonal"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 " gives the list of elements on the leading diagonal of the matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Diagonal",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Diagonal"], "[", 
   RowBox[{
    StyleBox["m", "TI"], ",", 
    StyleBox["k", "TI"]}], "]"}]], "InlineFormula"],
 " ",
 "gives the elements on the ",
 Cell[BoxData[
  StyleBox["k", "TI"]], "InlineFormula"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Null]", "th"], TraditionalForm]]],
 " diagonal of ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.467373607202414*^9, 3.46737362208484*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Remove", "[", 
  RowBox[{"a", ",", "b", ",", "c"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"g", ",", "h", ",", "i"}], "}"}]}], "}"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Diagonal", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"g", ",", "h", ",", "i"}], "}"}]}], "}"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Diagonal", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"g", ",", "h", ",", "i"}], "}"}]}], "}"}], ",", "1"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Diagonal", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"g", ",", "h", ",", "i"}], "}"}]}], "}"}], ",", 
   RowBox[{"-", "1"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.46737362779445*^9, 3.4673736752809334`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", "b", "c"},
     {"d", "e", "f"},
     {"g", "h", "i"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.473439180964905*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "e", ",", "i"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391809805045`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", ",", "f"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391809805045`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"d", ",", "h"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391809805045`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Inverse",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Inverse"], "[", 
   StyleBox["m", "TI"], "]"}]]],
 " ",
 "gives the inverse of a square matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.467365904432966*^9, 3.467365908878974*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inverse", "[", 
  RowBox[{"(", GridBox[{
     {"1", "2", "3"},
     {"4", "2", "2"},
     {"5", "1", "7"}
    }], ")"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["2", "7"]}], ",", 
     FractionBox["11", "42"], ",", 
     FractionBox["1", "21"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "7"], ",", 
     FractionBox["4", "21"], ",", 
     RowBox[{"-", 
      FractionBox["5", "21"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "7"], ",", 
     RowBox[{"-", 
      FractionBox["3", "14"]}], ",", 
     FractionBox["1", "7"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391810117044`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   StyleBox["a", "TI"], ".", 
   StyleBox["b", "TI"], ".", 
   StyleBox["c", "TI"]}]], "InlineFormula"],
 " or ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Dot",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Dot"], "[", 
   RowBox[{
    StyleBox["a", "TI"], ",", 
    StyleBox["b", "TI"], ",", 
    StyleBox["c", "TI"]}], "]"}]], "InlineFormula"],
 " gives products of vectors, matrices and tensors. Accordingly the product \
of a matrix m and its inverse ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["m", 
    RowBox[{"-", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " produces the identity matrix:"
}], "Text",
 CellChangeTimes->{{3.4673659477542424`*^9, 3.4673659921675205`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", GridBox[{
     {"1", "2", "3"},
     {"4", "2", "2"},
     {"5", "1", "7"}
    }], ")"}], ".", 
  RowBox[{"Inverse", "[", 
   RowBox[{"(", GridBox[{
      {"1", "2", "3"},
      {"4", "2", "2"},
      {"5", "1", "7"}
     }], ")"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4673659952563257`*^9, 3.4673660159887624`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439181042905*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "===", 
  RowBox[{"IdentityMatrix", "[", "3", "]"}]}]], "Input",
 CellChangeTimes->{{3.467366023523576*^9, 3.4673660427584095`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.473439181058505*^9}]
}, Open  ]],

Cell[TextData[{
 "A further important matrix operation is Det. ",
 ButtonBox["Det[m] ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Det"],
 "gives the determinant of the square matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4673661273261576`*^9, 3.467366170819034*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       SubscriptBox["a", 
        RowBox[{"1", ",", "1"}]], 
       SubscriptBox["a", 
        RowBox[{"1", ",", "2"}]]},
      {
       SubscriptBox["a", 
        RowBox[{"2", ",", "1"}]], 
       SubscriptBox["a", 
        RowBox[{"2", ",", "2"}]]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    SubscriptBox["a", 
     RowBox[{"1", ",", "2"}]]}], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "1"}]]}], "+", 
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"1", ",", "1"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "2"}]]}]}]], "Output",
 CellChangeTimes->{3.473439181074105*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       SubscriptBox["a", 
        RowBox[{"1", ",", "1"}]], 
       SubscriptBox["a", 
        RowBox[{"1", ",", "2"}]], 
       SubscriptBox["a", 
        RowBox[{"1", ",", "3"}]]},
      {
       SubscriptBox["a", 
        RowBox[{"2", ",", "1"}]], 
       SubscriptBox["a", 
        RowBox[{"2", ",", "2"}]], 
       SubscriptBox["a", 
        RowBox[{"2", ",", "3"}]]},
      {
       SubscriptBox["a", 
        RowBox[{"3", ",", "1"}]], 
       SubscriptBox["a", 
        RowBox[{"3", ",", "2"}]], 
       SubscriptBox["a", 
        RowBox[{"3", ",", "3"}]]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    SubscriptBox["a", 
     RowBox[{"1", ",", "3"}]]}], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "2"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"3", ",", "1"}]]}], "+", 
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"1", ",", "2"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "3"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"3", ",", "1"}]]}], "+", 
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"1", ",", "3"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "1"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"3", ",", "2"}]]}], "-", 
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"1", ",", "1"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "3"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"3", ",", "2"}]]}], "-", 
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"1", ",", "2"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "1"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"3", ",", "3"}]]}], "+", 
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"1", ",", "1"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"2", ",", "2"}]], " ", 
   SubscriptBox["a", 
    RowBox[{"3", ",", "3"}]]}]}]], "Output",
 CellChangeTimes->{3.4734391810897045`*^9}]
}, Open  ]],

Cell[TextData[{
 "As an example let us calculate the ",
 ButtonBox["Wronskian",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Wronskian"],
 " of a function. The Wronskian can be used to determine whether a set of \
differentiable functions is linearly independant on a given interval."
}], "Text",
 CellChangeTimes->{{3.4673665644175577`*^9, 3.4673666216696577`*^9}, 
   3.4673666555685177`*^9, {3.46736673648586*^9, 3.46736673648586*^9}}],

Cell[TextData[{
 "Applying ",
 "the Wronskian ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["W", "z"], "(", 
    StyleBox["ws",
     FontSlant->"Italic"], ")"}], TraditionalForm]]],
 " on the functions  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"sin", "(", "z", ")"}], ",", " ", 
     RowBox[{"sin", "(", 
      RowBox[{"2", "z"}], ")"}], ",", "\[Ellipsis]", ",", 
     RowBox[{"sin", "(", 
      RowBox[{"n", " ", "z"}], ")"}]}], "}"}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.4673666613093276`*^9, 3.4673666866593723`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Wronskian", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"k", " ", "z"}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"k", ",", " ", "n"}], "}"}]}], "]"}], ",", " ", "z"}], "]"}], 
   ",", " ", 
   RowBox[{"{", 
    RowBox[{"n", ",", "2", ",", "8"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4673669736998763`*^9, 3.4673670057423325`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "2"}], " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", "z", "]"}], "3"]}], ",", 
   RowBox[{
    RowBox[{"-", "16"}], " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", "z", "]"}], "6"]}], ",", 
   RowBox[{"768", " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", "z", "]"}], "10"]}], ",", 
   RowBox[{"294912", " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", "z", "]"}], "15"]}], ",", 
   RowBox[{
    RowBox[{"-", "1132462080"}], " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", "z", "]"}], "21"]}], ",", 
   RowBox[{
    RowBox[{"-", "52183852646400"}], " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", "z", "]"}], "28"]}], ",", 
   RowBox[{"33664847019245568000", " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", "z", "]"}], "36"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391824001074`*^9}]
}, Open  ]],

Cell[TextData[{
 "Another function often needed in matrix calculations is ",
 StyleBox["Tr", "MR"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Tr",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Tr"], "[", 
   StyleBox["list", "TI"], "]"}]], "InlineFormula"],
 " finds the trace of the matrix or tensor ",
 Cell[BoxData[
  StyleBox["list", "TI"]], "InlineFormula"],
 ", i.e. ",
 "sums the diagonal elements ",
 Cell[BoxData[
  RowBox[{
   StyleBox["list", "TI"], "[", 
   RowBox[{"[", 
    RowBox[{
     StyleBox["i", "TI"], ",", 
     StyleBox["i", "TI"], ",", 
     StyleBox["\[Ellipsis]", "TR"]}], "]"}], "]"}]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4673670253047667`*^9, 3.467367051824814*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tr", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData["15"], "Output",
 CellChangeTimes->{3.4734391824625072`*^9}]
}, Open  ]],

Cell[TextData[{
 "Transposing a matrix interchanges the rows and columns in the matrix. If \
you transpose an ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 "\[Times]",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 " matrix, you get an ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 "\[Times]",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 " matrix as the result. ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Transpose",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Transpose"], "[", 
   StyleBox["m", "TI"], "]"}]]],
 " transposes the first two levels in ",
 Cell[BoxData[
  StyleBox["list", "TI"]], "InlineFormula"],
 ", i.e. ",
 Cell[BoxData[
  SuperscriptBox[
   StyleBox["m", "TI"], "\[Transpose]"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.467373151032781*^9, 3.467373185586842*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"ap", ",", "bp", ",", "cp"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{
  3.4673731447615705`*^9, {3.4673731905788507`*^9, 3.467373192825255*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "ap"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "bp"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "cp"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391824781075`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["ConjugateTranspose",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ConjugateTranspose"], "[", 
   StyleBox["m", "TI"], "]"}]]],
 "or ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["m", "\[ConjugateTranspose]"], TraditionalForm]], 
  "InlineMath"],
 " gives the conjugate transpose of ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]], "InlineMath"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ConjugateTranspose",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ConjugateTranspose"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 " is equivalent to ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Conjugate",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Conjugate"], "[", 
   RowBox[{
    ButtonBox["Transpose",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Transpose"], "[", 
    StyleBox["m", "TI"], "]"}], "]"}]], "InlineFormula"],
 ". Enter using \[EscapeKey]",
 StyleBox["ct", "InlineCode"],
 "\[EscapeKey]",
 ":"
}], "Text",
 CellChangeTimes->{{3.467373209954085*^9, 3.4673732673465853`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ConjugateTranspose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"2", " ", "I"}], ",", "3"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "+", 
        RowBox[{"4", " ", "I"}]}], ",", "5", ",", "I"}], "}"}]}], "}"}], 
   "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.4673733161434712`*^9, 3.467373326127489*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", 
      RowBox[{"3", "-", 
       RowBox[{"4", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{
       RowBox[{"-", "2"}], " ", "\[ImaginaryI]"}], "5"},
     {"3", 
      RowBox[{"-", "\[ImaginaryI]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.473439182493707*^9}]
}, Open  ]],

Cell[TextData[{
 "To compute eigenvalues and eigenvectors, we have ",
 ButtonBox["Eigenvalues",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Eigenvalues"],
 ". (Note that ",
 StyleBox["values", "MR"],
 " and ",
 StyleBox["system", "MR"],
 " in ",
 StyleBox["Eigenvalues", "MR"],
 " and ",
 StyleBox["Eigenvectors", "MR"],
 " are not capitalized.) "
}], "Text",
 CellChangeTimes->{{3.4673672881408534`*^9, 3.467367301681677*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Eigenvalues",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Eigenvalues"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 " gives a list of the eigenvalues of the square matrix ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]], "InlineMath"],
 ". \n",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Eigenvectors",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Eigenvectors"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 " gives a list of the eigenvectors of the square matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". \n",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Eigensystem",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Eigensystem"], "[", 
   StyleBox["m", "TI"], "]"}]]],
 " ",
 "gives a list ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["values", "TI"], ",", 
    StyleBox["vectors", "TI"]}], "}"}]], "InlineFormula"],
 " of the eigenvalues and eigenvectors of the square matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.467367326735321*^9, 3.4673673642533875`*^9}}],

Cell[TextData[{
 StyleBox["As an example we take the Pauli matrices. (Taken from the ", 
  "ReaderAnnotation"],
 StyleBox["Mathematica", "ReaderAnnotation",
  FontSlant->"Italic"],
 StyleBox[" Guidebooks by Michael Trott)", "ReaderAnnotation"]
}], "Text",
 CellChangeTimes->{{3.4673674482751346`*^9, 3.4673674532827435`*^9}, {
  3.4673737466042585`*^9, 3.4673737722039037`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"\[Sigma]", "[", "1", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Sigma]", "[", "2", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", " ", 
       RowBox[{"-", "I"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"I", ",", " ", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Sigma]", "[", "3", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", " ", "0"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}]}], "Input"],

Cell["They have the following properties: ", "Text",
 CellChangeTimes->{{3.467367459834755*^9, 3.4673674800367904`*^9}}],

Cell["Their square is the identity matrix", "Item",
 CellChangeTimes->{{3.4673674816123934`*^9, 3.467367487337603*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", " ", "/@", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "i", "]"}], ".", 
     RowBox[{"\[Sigma]", "[", "i", "]"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "3"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "0"},
       {"0", "1"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "0"},
       {"0", "1"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "0"},
       {"0", "1"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.473439182524907*^9}]
}, Open  ]],

Cell["Their eigenvalues are +1 and -1", "Item",
 CellChangeTimes->{{3.4673674915808105`*^9, 3.4673674970876207`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Eigenvalues", "[", 
    RowBox[{"\[Sigma]", "[", "i", "]"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"i", ",", " ", "3"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391825717077`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Sigma]", "i"], ".", 
     SubscriptBox["\[Sigma]", "j"]}], "=", 
    RowBox[{"\[ImaginaryI]", " ", 
     SubscriptBox["\[Sigma]", "k"]}]}], TraditionalForm]]],
 " with ",
 StyleBox["i", "TI"],
 ", ",
 StyleBox["j", "TI"],
 ", ",
 StyleBox["k", "TI"],
 " cyclic. "
}], "Item",
 CellChangeTimes->{
  3.4673675068532376`*^9, {3.467367610359419*^9, 3.467367615195428*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "1", "]"}], ".", 
     RowBox[{"\[Sigma]", "[", "2", "]"}]}], " ", "==", " ", 
    RowBox[{"I", " ", 
     RowBox[{"\[Sigma]", "[", "3", "]"}]}]}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "2", "]"}], ".", 
     RowBox[{"\[Sigma]", "[", "3", "]"}]}], " ", "==", " ", 
    RowBox[{"I", " ", 
     RowBox[{"\[Sigma]", "[", "1", "]"}]}]}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "3", "]"}], ".", 
     RowBox[{"\[Sigma]", "[", "1", "]"}]}], " ", "==", " ", 
    RowBox[{"I", " ", 
     RowBox[{"\[Sigma]", "[", "2", "]"}]}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.473439182587308*^9}]
}, Open  ]],

Cell[TextData[{
 "They are anticommutative, that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Sigma]", "i"], ".", 
     SubscriptBox["\[Sigma]", "j"]}], "=", 
    RowBox[{
     RowBox[{"-", 
      SubscriptBox["\[Sigma]", "j"]}], 
     SubscriptBox["\[Sigma]", "i"]}]}], TraditionalForm]]],
 "."
}], "Item",
 CellChangeTimes->{3.46736751393565*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "1", "]"}], ".", 
     RowBox[{"\[Sigma]", "[", "2", "]"}]}], " ", "==", " ", 
    RowBox[{"-", 
     RowBox[{
      RowBox[{"\[Sigma]", "[", "2", "]"}], ".", 
      RowBox[{"\[Sigma]", "[", "1", "]"}]}]}]}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "2", "]"}], ".", 
     RowBox[{"\[Sigma]", "[", "3", "]"}]}], " ", "==", " ", 
    RowBox[{"-", 
     RowBox[{
      RowBox[{"\[Sigma]", "[", "3", "]"}], ".", 
      RowBox[{"\[Sigma]", "[", "2", "]"}]}]}]}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "3", "]"}], ".", 
     RowBox[{"\[Sigma]", "[", "1", "]"}]}], " ", "==", " ", 
    RowBox[{"-", 
     RowBox[{
      RowBox[{"\[Sigma]", "[", "1", "]"}], ".", 
      RowBox[{"\[Sigma]", "[", "3", "]"}]}]}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391826029077`*^9}]
}, Open  ]],

Cell[TextData[{
 "Here is the eigensystem for a spin in an arbitrary direction using \
direction cosines ",
 StyleBox["\[ScriptD][1]", "MR"],
 ", ",
 StyleBox["\[ScriptD][2]", "MR"],
 ", and ",
 StyleBox["\[ScriptD][3]", "MR"],
 ". This eigensystem corresponds to the matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "3"], 
    RowBox[{
     SubscriptBox["\[Sigma]", "i"], 
     SubscriptBox["\[ScriptD]", "i"]}]}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{3.4673676473002844`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigensystem", "[", "\n", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[ScriptD]", "[", "i", "]"}], " ", 
      RowBox[{"\[Sigma]", "[", "i", "]"}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "3"}], "}"}]}], "]"}], "]"}], " ", "/.", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"\[ScriptD]", "[", "1", "]"}], "^", "2"}], " ", "+", " ", 
     RowBox[{
      RowBox[{"\[ScriptD]", "[", "2", "]"}], "^", "2"}], " ", "+", " ", 
     RowBox[{
      RowBox[{"\[ScriptD]", "[", "3", "]"}], "^", "2"}]}], " ", "->", " ", 
    "1"}], "}"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox[
         RowBox[{"1", "-", 
          RowBox[{"\[ScriptD]", "[", "3", "]"}]}], 
         RowBox[{
          RowBox[{"\[ScriptD]", "[", "1", "]"}], "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           RowBox[{"\[ScriptD]", "[", "2", "]"}]}]}]]}], ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox[
         RowBox[{
          RowBox[{"-", "1"}], "-", 
          RowBox[{"\[ScriptD]", "[", "3", "]"}]}], 
         RowBox[{
          RowBox[{"\[ScriptD]", "[", "1", "]"}], "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           RowBox[{"\[ScriptD]", "[", "2", "]"}]}]}]]}], ",", "1"}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439182649708*^9}]
}, Open  ]],

Cell[TextData[{
 "In many applications, the following situation occurs. We have more \
equations than unknowns, and all the equations together have to be fulfilled \
\[OpenCurlyDoubleQuote]as well as possible\[CloseCurlyDoubleQuote]. The tool \
(in the linear case) for achieving this result is the function ",
 ButtonBox["PseudoInverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PseudoInverse"],
 ". In mathematics and in particular linear algebra, the pseudoinverse ",
 StyleBox["A",
  FontSlant->"Italic"],
 StyleBox["+",
  FontVariations->{"CompatibilityType"->Superscript}],
 " of an ",
 StyleBox["m",
  FontSlant->"Italic"],
 " \[Times] ",
 StyleBox["n",
  FontSlant->"Italic"],
 " matrix ",
 StyleBox["A",
  FontSlant->"Italic"],
 " is a generalization of the inverse matrix. A common use of the \
pseudoinverse is to compute a 'best fit' (least squares) solution to a system \
of linear equations that lacks a unique solution (see below under \
Applications). The pseudoinverse is defined and unique for all matrices whose \
entries are real or complex numbers. For a square matrix, ",
 Cell[BoxData[
  ButtonBox["PseudoInverse",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/PseudoInverse"]], "InlineFormula"],
 " gives the Moore\[Dash]Penrose inverse."
}], "Text",
 CellChangeTimes->{{3.4673696286577864`*^9, 3.4673697354243736`*^9}, {
  3.4673697703996353`*^9, 3.467369783425658*^9}}],

Cell[TextData[{
 "The Moore\[Dash]Penrose inverse of a matrix ",
 Cell[BoxData[
  FormBox[
   OverscriptBox[
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    StyleBox["~",
     FontWeight->"Bold"]], TraditionalForm]]],
 " of a matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["A",
    FontWeight->"Bold",
    FontSlant->"Plain"], TraditionalForm]]],
 " is uniquely defined by the following four properties:"
}], "Text",
 CellChangeTimes->{3.4673698033624935`*^9}],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"], ".", 
    StyleBox[
     OverscriptBox[
      StyleBox["A",
       FontWeight->"Bold",
       FontSlant->"Plain"], 
      StyleBox["~",
       FontWeight->"Bold"]],
     FontWeight->"Bold",
     FontSlant->"Plain"], ".", 
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"]}], "=", 
   StyleBox["A",
    FontWeight->"Bold",
    FontSlant->"Plain"]}], TraditionalForm]]]], "Item",
 CellChangeTimes->{{3.467369825951333*^9, 3.4673698343441477`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    OverscriptBox[
     StyleBox["A",
      FontWeight->"Bold",
      FontSlant->"Plain"], 
     StyleBox["~",
      FontWeight->"Bold"]], ".", 
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"], ".", 
    OverscriptBox[
     StyleBox["A",
      FontWeight->"Bold",
      FontSlant->"Plain"], 
     StyleBox["~",
      FontWeight->"Bold"]], "."}], "=", 
   OverscriptBox[
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"], 
    StyleBox["~",
     FontWeight->"Bold"]]}], TraditionalForm]]]], "Item",
 CellChangeTimes->{3.4673698444665737`*^9}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      StyleBox["A",
       FontWeight->"Bold",
       FontSlant->"Plain"], ".", 
      OverscriptBox[
       StyleBox["A",
        FontWeight->"Bold",
        FontSlant->"Plain"], 
       StyleBox["~",
        FontWeight->"Bold"]]}], ")"}], 
    StyleBox["T",
     FontSlant->"Plain"]], "=", 
   RowBox[{
    StyleBox["A",
     FontWeight->"Bold",
     FontSlant->"Plain"], ".", 
    OverscriptBox[
     StyleBox["A",
      FontWeight->"Bold",
      FontSlant->"Plain"], 
     StyleBox["~",
      FontWeight->"Bold"]]}]}], TraditionalForm]]]], "Item",
 CellChangeTimes->{3.4673698512993855`*^9}],

Cell[TextData[{
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       StyleBox[
        OverscriptBox[
         StyleBox["A",
          FontWeight->"Bold",
          FontSlant->"Plain"], 
         StyleBox["~",
          FontWeight->"Bold"]],
        FontWeight->"Bold",
        FontSlant->"Plain"], ".", 
       StyleBox["A",
        FontWeight->"Bold",
        FontSlant->"Plain"]}], ")"}], 
     StyleBox["T",
      FontSlant->"Plain"]], "=", 
    RowBox[{
     StyleBox[
      OverscriptBox[
       StyleBox["A",
        FontWeight->"Bold",
        FontSlant->"Plain"], 
       StyleBox["~",
        FontWeight->"Bold"]],
      FontWeight->"Bold",
      FontSlant->"Plain"], ".", 
     StyleBox["A",
      FontWeight->"Bold",
      FontSlant->"Plain"]}]}], TraditionalForm]]]
}], "Item",
 CellChangeTimes->{3.467369855667393*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["As an application of ",
  Evaluatable->False],
 ButtonBox["PseudoInverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PseudoInverse"],
 StyleBox[" let us calculate the ",
  Evaluatable->False],
 "\[OpenCurlyDoubleQuote]",
 StyleBox["best",
  Evaluatable->False],
 "\[CloseCurlyDoubleQuote] approximation of an intersection of a bunch of \
lines that nearly intersect in one point. ",
 StyleBox[" (Taken from the ", "ReaderAnnotation"],
 StyleBox["Mathematica", "ReaderAnnotation",
  FontSlant->"Italic"],
 StyleBox[" Guidebook by Michael Trott)", "ReaderAnnotation"]
}], "Text",
 CellChangeTimes->{{3.46737000174605*^9, 3.4673700206688833`*^9}, {
  3.467373782219121*^9, 3.467373782624722*^9}}],

Cell[TextData[{
 "The implicit equation of a line going through a given point ",
 StyleBox["{p0x, p0y}", "MR"],
 " with a given direction ",
 StyleBox["{dx, dy}", "MR"],
 " is given by the following expression."
}], "Text",
 CellChangeTimes->{{3.4673700358321095`*^9, 3.4673700421345205`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Subtract", " ", "@@", " ", 
   RowBox[{"Eliminate", "[", "\n", "   ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "\[Equal]", 
        RowBox[{"p0x", "+", 
         RowBox[{"dx", " ", "t"}]}]}], ",", 
       RowBox[{"y", "\[Equal]", 
        RowBox[{"p0y", "+", 
         RowBox[{"dy", " ", "t"}]}]}]}], "}"}], ",", " ", 
     RowBox[{"{", "t", "}"}]}], "]"}]}], " ", "//", " ", 
  "Simplify"}]], "Input",
 CellChangeTimes->{3.467369955055168*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dy", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "p0x"}], "+", "x"}], ")"}]}], "+", 
  RowBox[{"dx", " ", 
   RowBox[{"(", 
    RowBox[{"p0y", "-", "y"}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.4734391826809072`*^9}]
}, Open  ]],

Cell["Here are the steps singled out:", "Text",
 CellChangeTimes->{{3.4673700888410025`*^9, 3.4673700989654207`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eliminate", "[", "\n", "   ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Equal]", 
      RowBox[{"p0x", "+", 
       RowBox[{"dx", " ", "t"}]}]}], ",", 
     RowBox[{"y", "\[Equal]", 
      RowBox[{"p0y", "+", 
       RowBox[{"dy", " ", "t"}]}]}]}], "}"}], ",", " ", 
   RowBox[{"{", "t", "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dx", " ", "p0y"}], "+", 
   RowBox[{"dy", " ", "x"}], "-", 
   RowBox[{"dx", " ", "y"}]}], "\[Equal]", 
  RowBox[{"dy", " ", "p0x"}]}]], "Output",
 CellChangeTimes->{3.4734391826965075`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subtract", "@@", "%"}]], "Input",
 CellChangeTimes->{{3.4673699724959984`*^9, 3.4673699765208054`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "dy"}], " ", "p0x"}], "+", 
  RowBox[{"dx", " ", "p0y"}], "+", 
  RowBox[{"dy", " ", "x"}], "-", 
  RowBox[{"dx", " ", "y"}]}]], "Output",
 CellChangeTimes->{3.4734391827121077`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "@", "%"}]], "Input",
 CellChangeTimes->{{3.467370100665824*^9, 3.467370103146228*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dy", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "p0x"}], "+", "x"}], ")"}]}], "+", 
  RowBox[{"dx", " ", 
   RowBox[{"(", 
    RowBox[{"p0y", "-", "y"}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.473439182727708*^9}]
}, Open  ]],

Cell["\<\
Now we create a set of 'random' lines, all going nearly through the point \
{1/2, 1/2}. The lines are given in the form {point, direction}.\
\>", "Text",
 CellChangeTimes->{{3.4673701330202804`*^9, 3.467370178853161*^9}, {
  3.4673702205832343`*^9, 3.4673702230168386`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tab", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Abs", "[", 
           RowBox[{"Sin", "[", "k", "]"}], "]"}], ",", " ", 
          RowBox[{"Abs", "[", 
           RowBox[{"Cos", "[", "k", "]"}], "]"}]}], "}"}], "/", "10."}]}], 
      ",", " ", "\n", "             ", 
      RowBox[{"1.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"k", " ", "E"}], "]"}], ",", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"k", " ", "GoldenRatio"}], "]"}]}], "}"}]}]}], "}"}], ",", 
    " ", 
    RowBox[{"{", 
     RowBox[{"k", ",", " ", "12"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5841470984807897`", ",", "0.554030230586814`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.41078129050290885`", ",", 
       RowBox[{"-", "0.04722009625435989`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5909297426825681`", ",", "0.5416146836547142`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.7490464682229172`"}], ",", 
       RowBox[{"-", "0.995540525019458`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5141120008059867`", ",", "0.5989992496600446`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.9550808471575517`", ",", "0.14123913508742947`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5756802495307929`", ",", "0.5653643620863612`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9925127312110942`"}], ",", "0.9822018739120361`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5958924274663139`", ",", "0.5283662185463226`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.8547341886484354`", ",", 
       RowBox[{"-", "0.23399846914210745`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5279415498198926`", ",", "0.5960170286650366`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.5660675646263036`"}], ",", 
       RowBox[{"-", "0.9601030134395097`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.565698659871879`", ",", "0.5753902254343305`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.17747180481288957`", ",", "0.32467078255953674`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5989358246623382`", ",", "0.5145500033808613`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.2424534378935757`", ",", "0.9294410422326304`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5412118485241757`", ",", "0.5911130261884677`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.6195778489814256`"}], ",", 
       RowBox[{"-", "0.4124473735134915`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.554402111088937`", ",", "0.5839071529076453`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.8873268376406684`", ",", 
       RowBox[{"-", "0.8904894328783004`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5999990206550704`", ",", "0.5004425697988051`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9984340937739028`"}], ",", "0.49654536698150037`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5536572918000435`", ",", "0.5843853958732492`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.9332856123058448`", ",", "0.8435955928312547`"}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391827433076`*^9}]
}, Open  ]],

Cell["This is how it looks like:", "Text",
 CellChangeTimes->{{3.467370238164465*^9, 3.467370243265674*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Line", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", 
             RowBox[{"200", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], ",", " ", "\n", 
            "                     ", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], " ", "+", " ", 
             RowBox[{"200", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], "]"}], "&"}], "[", 
        RowBox[{"tab", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "@", "tab"}]}], "}"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"PlotRange", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1"}], "}"}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Frame", " ", "->", " ", "True"}]}], "\[IndentingNewLine]", "]"}],
   "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.467370263046509*^9, 3.467370366942691*^9}, 
   3.4673704024015536`*^9, {3.467370514768551*^9, 3.4673706302555537`*^9}, {
   3.4673707018752794`*^9, 3.4673707255873213`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{-81.57211100210098, 9.998049481458793}, {
    82.74040519906255, -8.889989020285164}}], 
   LineBox[{{150.400223387266, 
    199.64971968754634`}, {-149.2183639019009, -198.56649032023688`}}], 
   LineBox[{{-190.50205743070435`, -27.64882776782585}, {191.53028143231634`, 
    28.846826267145936`}}], 
   LineBox[{{
    199.07822649174963`, -195.87501042032085`}, {-197.92686599268805`, 
    197.0057391444936}}], 
   LineBox[{{-170.35094530222077`, 47.32806004696781}, {
    171.5427301571534, -46.271327609875165`}}], 
   LineBox[{{113.7414544750806, 
    192.616619716567}, {-112.68557137544083`, -191.4245856592369}}], 
   LineBox[{{-34.92866230270604, -64.35876628647301}, {36.06005962244979, 
    65.50954673734168}}], 
   LineBox[{{-47.8917517540528, -185.37365844314522`}, {49.08962340337748, 
    186.40275844990694`}}], 
   LineBox[{{124.4567816448093, 
    83.08058772888675}, {-123.37435794776096`, -81.89836167650982}}], 
   LineBox[{{-176.91096541704476`, 178.68179372856773`}, {
    178.01976963922263`, -177.51397942275244`}}], 
   LineBox[{{200.28681777543562`, -98.80863082650127}, {-199.08681973412547`, 
    99.80951596609889}}], 
   LineBox[{{-186.10346516936892`, -168.1347331703777}, {187.21077975296902`, 
    169.3035039621242}}]},
  Frame->True,
  PlotRange->{{0, 1}, {0, 1}}]], "Output",
 CellChangeTimes->{3.4734391827745075`*^9}]
}, Open  ]],

Cell["The next line composes the 12 line equations", "Text",
 CellChangeTimes->{{3.4673708286723022`*^9, 3.4673708454735317`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lines", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "2"}], "]"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "x"}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "1"}], "]"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{"y", "-", 
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ")"}]}]}], "\[Equal]", 
       "0"}], "&"}], "[", 
     RowBox[{"tab", "[", 
      RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "@", "tab"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.467370761685785*^9, 3.4673708082518663`*^9}, {
   3.4673710658551188`*^9, 3.46737106641672*^9}, 3.467371250887044*^9, {
   3.4673717679967523`*^9, 3.467371768402353*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.04722009625435989`"}], " ", 
      RowBox[{"(", 
       RowBox[{"0.5841470984807897`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "+", 
     RowBox[{"0.41078129050290885`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.554030230586814`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.995540525019458`"}], " ", 
      RowBox[{"(", 
       RowBox[{"0.5909297426825681`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "-", 
     RowBox[{"0.7490464682229172`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5416146836547142`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"0.14123913508742947`", " ", 
      RowBox[{"(", 
       RowBox[{"0.5141120008059867`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "+", 
     RowBox[{"0.9550808471575517`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5989992496600446`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"0.9822018739120361`", " ", 
      RowBox[{"(", 
       RowBox[{"0.5756802495307929`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "-", 
     RowBox[{"0.9925127312110942`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5653643620863612`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.23399846914210745`"}], " ", 
      RowBox[{"(", 
       RowBox[{"0.5958924274663139`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "+", 
     RowBox[{"0.8547341886484354`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5283662185463226`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.9601030134395097`"}], " ", 
      RowBox[{"(", 
       RowBox[{"0.5279415498198926`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "-", 
     RowBox[{"0.5660675646263036`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5960170286650366`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"0.32467078255953674`", " ", 
      RowBox[{"(", 
       RowBox[{"0.565698659871879`", "\[InvisibleSpace]", "-", "x"}], ")"}]}],
      "+", 
     RowBox[{"0.17747180481288957`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5753902254343305`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"0.9294410422326304`", " ", 
      RowBox[{"(", 
       RowBox[{"0.5989358246623382`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "+", 
     RowBox[{"0.2424534378935757`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5145500033808613`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.4124473735134915`"}], " ", 
      RowBox[{"(", 
       RowBox[{"0.5412118485241757`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "-", 
     RowBox[{"0.6195778489814256`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5911130261884677`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.8904894328783004`"}], " ", 
      RowBox[{"(", 
       RowBox[{"0.554402111088937`", "\[InvisibleSpace]", "-", "x"}], ")"}]}],
      "+", 
     RowBox[{"0.8873268376406684`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5839071529076453`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"0.49654536698150037`", " ", 
      RowBox[{"(", 
       RowBox[{"0.5999990206550704`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "-", 
     RowBox[{"0.9984340937739028`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5004425697988051`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"0.8435955928312547`", " ", 
      RowBox[{"(", 
       RowBox[{"0.5536572918000435`", "\[InvisibleSpace]", "-", "x"}], 
       ")"}]}], "+", 
     RowBox[{"0.9332856123058448`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "0.5843853958732492`"}], "+", "y"}], ")"}]}]}], 
    "\[Equal]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391827901077`*^9}]
}, Open  ]],

Cell["\<\
Solve can not find a solution since there is no common intersection point:\
\>", "Text",
 CellChangeTimes->{{3.467371904481392*^9, 3.4673719213606215`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{"lines", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.467371779275572*^9, 3.4673717886823883`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.473439182821308*^9}]
}, Open  ]],

Cell["LinearSolve is not helping either", "Text",
 CellChangeTimes->{{3.467371966616301*^9, 3.467371991030344*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coeffs", "=", 
  RowBox[{"Normal", "[", 
   RowBox[{"CoefficientArrays", "[", 
    RowBox[{"lines", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4673715552747784`*^9, 3.467371619328491*^9}, {
  3.467371672898985*^9, 3.4673717005578337`*^9}, {3.4673718149840345`*^9, 
  3.467371873515338*^9}, {3.4673720530872526`*^9, 3.467372054148055*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.2551687353150436`"}], ",", 
     RowBox[{"-", "0.1825999403505809`"}], ",", 
     RowBox[{"-", "0.49947997648014775`"}], ",", "1.1265655470070457`", ",", 
     RowBox[{"-", "0.5910505869189246`"}], ",", 
     RowBox[{"-", "0.16949236500978088`"}], ",", "0.08155028481395812`", ",", 
     "0.4319211198167828`", ",", "0.1430191318325741`", ",", 
     RowBox[{"-", "1.011805708955427`"}], ",", "0.7975856575626659`", ",", 
     RowBox[{"-", "0.07833563070875421`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.04722009625435989`", ",", "0.41078129050290885`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0.995540525019458`", ",", 
       RowBox[{"-", "0.7490464682229172`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.14123913508742947`"}], ",", "0.9550808471575517`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9822018739120361`"}], ",", 
       RowBox[{"-", "0.9925127312110942`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.23399846914210745`", ",", "0.8547341886484354`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0.9601030134395097`", ",", 
       RowBox[{"-", "0.5660675646263036`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.32467078255953674`"}], ",", "0.17747180481288957`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9294410422326304`"}], ",", "0.2424534378935757`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.4124473735134915`", ",", 
       RowBox[{"-", "0.6195778489814256`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.8904894328783004`", ",", "0.8873268376406684`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.49654536698150037`"}], ",", 
       RowBox[{"-", "0.9984340937739028`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.8435955928312547`"}], ",", "0.9332856123058448`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391831333084`*^9}]
}, Open  ]],

Cell["\<\
This transforms the system of equations to the coefficient matrix A and the \
right hand side b to form
 A {x,y}=b\
\>", "Text",
 CellChangeTimes->{{3.46737199458715*^9, 3.4673720429628353`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LinearSolve", "[", 
  RowBox[{
   RowBox[{"coeffs", "[", 
    RowBox[{"[", "2", "]"}], "]"}], ",", 
   RowBox[{"coeffs", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.467370930415681*^9, 3.4673709579965296`*^9}, {
  3.467370996232197*^9, 3.467370996980998*^9}, {3.4673710536714973`*^9, 
  3.467371054435899*^9}, {3.467371465621421*^9, 3.467371486338258*^9}, {
  3.467371942826259*^9, 3.4673719520302753`*^9}, {3.467372059108864*^9, 
  3.467372062119669*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"LinearSolve", "::", "\<\"nosol\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Linear equation encountered \
that has no solution.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/LinearSolve\\\", ButtonNote -> \
\\\"LinearSolve::nosol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4734391833361087`*^9}],

Cell[BoxData[
 RowBox[{"LinearSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.04722009625435989`", ",", "0.41078129050290885`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0.995540525019458`", ",", 
       RowBox[{"-", "0.7490464682229172`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.14123913508742947`"}], ",", "0.9550808471575517`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9822018739120361`"}], ",", 
       RowBox[{"-", "0.9925127312110942`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.23399846914210745`", ",", "0.8547341886484354`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0.9601030134395097`", ",", 
       RowBox[{"-", "0.5660675646263036`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.32467078255953674`"}], ",", "0.17747180481288957`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9294410422326304`"}], ",", "0.2424534378935757`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.4124473735134915`", ",", 
       RowBox[{"-", "0.6195778489814256`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.8904894328783004`", ",", "0.8873268376406684`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.49654536698150037`"}], ",", 
       RowBox[{"-", "0.9984340937739028`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.8435955928312547`"}], ",", "0.9332856123058448`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.2551687353150436`"}], ",", 
     RowBox[{"-", "0.1825999403505809`"}], ",", 
     RowBox[{"-", "0.49947997648014775`"}], ",", "1.1265655470070457`", ",", 
     RowBox[{"-", "0.5910505869189246`"}], ",", 
     RowBox[{"-", "0.16949236500978088`"}], ",", "0.08155028481395812`", ",", 
     "0.4319211198167828`", ",", "0.1430191318325741`", ",", 
     RowBox[{"-", "1.011805708955427`"}], ",", "0.7975856575626659`", ",", 
     RowBox[{"-", "0.07833563070875421`"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.473439183351709*^9}]
}, Open  ]],

Cell["\<\
The coordinates for the \[OpenCurlyDoubleQuote]best\[CloseCurlyDoubleQuote] \
crossing point:\
\>", "Text",
 CellChangeTimes->{{3.467372086720912*^9, 3.467372092477322*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{
   RowBox[{"PseudoInverse", "[", 
    RowBox[{"coeffs", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}], ".", 
   RowBox[{"coeffs", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.4673721153001623`*^9, 3.4673721187477684`*^9}, {
  3.467372206716323*^9, 3.467372207418324*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.5617851127683904`"}], ",", 
   RowBox[{"-", "0.5671212837083595`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391833673086`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"GrayLevel", "[", 
         RowBox[{"1", "/", "2"}], "]"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Circle", "[", 
           RowBox[{
            RowBox[{"-", "sol"}], ",", "r"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"r", ",", "0", ",", "0.1", ",", "0.01"}], "}"}]}], "]"}]}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", 
               RowBox[{"200", " ", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], ",", " ", "\n", 
              "                     ", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "+", " ", 
               RowBox[{"200", " ", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], "]"}], "&"}], 
          "[", 
          RowBox[{"tab", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "@", "tab"}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.3", ",", "0.7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.3", ",", "0.7"}], "}"}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Frame", " ", "->", " ", "True"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.4673721863114867`*^9, 3.4673722024575152`*^9}, {
  3.4673722528300037`*^9, 3.467372253079604*^9}, {3.46737229638528*^9, 
  3.467372430701516*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[
     NCache[
      Rational[1, 2], 0.5]], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.01], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.02], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.03], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.04], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.05], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.06], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.07], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.08], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.09], 
    CircleBox[{0.5617851127683904, 0.5671212837083595}, 0.1]}, {
    LineBox[{{-81.57211100210098, 9.998049481458793}, {
     82.74040519906255, -8.889989020285164}}], 
    LineBox[{{150.400223387266, 
     199.64971968754634`}, {-149.2183639019009, -198.56649032023688`}}], 
    LineBox[{{-190.50205743070435`, -27.64882776782585}, {191.53028143231634`,
      28.846826267145936`}}], 
    LineBox[{{
     199.07822649174963`, -195.87501042032085`}, {-197.92686599268805`, 
     197.0057391444936}}], 
    LineBox[{{-170.35094530222077`, 47.32806004696781}, {
     171.5427301571534, -46.271327609875165`}}], 
    LineBox[{{113.7414544750806, 
     192.616619716567}, {-112.68557137544083`, -191.4245856592369}}], 
    LineBox[{{-34.92866230270604, -64.35876628647301}, {36.06005962244979, 
     65.50954673734168}}], 
    LineBox[{{-47.8917517540528, -185.37365844314522`}, {49.08962340337748, 
     186.40275844990694`}}], 
    LineBox[{{124.4567816448093, 
     83.08058772888675}, {-123.37435794776096`, -81.89836167650982}}], 
    LineBox[{{-176.91096541704476`, 178.68179372856773`}, {
     178.01976963922263`, -177.51397942275244`}}], 
    LineBox[{{200.28681777543562`, -98.80863082650127}, {-199.08681973412547`,
      99.80951596609889}}], 
    LineBox[{{-186.10346516936892`, -168.1347331703777}, {187.21077975296902`,
      169.3035039621242}}]}},
  Frame->True,
  PlotRange->{{0.3, 0.7}, {0.3, 0.7}}]], "Output",
 CellChangeTimes->{3.473439183398509*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["MatrixPower",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/MatrixPower"], "[", 
   RowBox[{
    StyleBox["m", "TI"], ",", 
    StyleBox["n", "TI"]}], "]"}]]],
 "gives the ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    StyleBox["n", "TI"], "\[Null]"}]]], "InlineFormula"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Null]", "th"], TraditionalForm]]],
 " matrix power of the matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"]
}], "Text",
 CellChangeTimes->{{3.467372554269333*^9, 3.467372561164545*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPower", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", "10"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4181", ",", "6765"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6765", ",", "10946"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439183460909*^9}]
}, Open  ]],

Cell["This is not the same as ", "Text",
 CellChangeTimes->{{3.4673725638477497`*^9, 3.4673725675293565`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "10"]], "Input",
 CellChangeTimes->{{3.4673725342700977`*^9, 3.4673725350656996`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1024"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439183476509*^9}]
}, Open  ]],

Cell["but", "Text",
 CellChangeTimes->{{3.467372588854594*^9, 3.4673725891665945`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.4673725762185717`*^9, 3.467372585172988*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4181", ",", "6765"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6765", ",", "10946"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391834921093`*^9}]
}, Open  ]],

Cell[TextData[{
 "It is also possible to define ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", "matrix"], " "}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (using the Taylor series ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["matrix", "n"], "/", 
     RowBox[{"n", "!"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")."
}], "Text",
 CellChangeTimes->{{3.4673726555135107`*^9, 3.4673726951219807`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["MatrixExp",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/MatrixExp"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 "gives the matrix exponential of ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["MatrixExp",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/MatrixExp"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 " effectively evaluates the power series for the exponential function, with \
ordinary powers replaced by matrix powers. ",
 Cell[BoxData[
  ButtonBox["MatrixExp",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/MatrixExp"]], "InlineFormula"],
 " works only on square matrices."
}], "Text",
 CellChangeTimes->{{3.467372709130805*^9, 3.467372730128442*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixExp", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.", ",", " ", "2."}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"3.", ",", " ", "4."}], "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"51.96895619870502`", ",", "74.73656456700324`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"112.10484685050486`", ",", "164.07380304920986`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4734391835077095`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixExp", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "\[Theta]"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.4673727656497045`*^9, {3.467372813136188*^9, 3.467372828096614*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
     RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
     RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439183523309*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["CharacteristicPolynomial",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/CharacteristicPolynomial"], "[", 
   RowBox[{
    StyleBox["m", "TI"], ",", 
    StyleBox["x", "TI"]}], "]"}]], "InlineFormula"],
 "gives the characteristic polynomial for the matrix ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 " must be a square matrix. ",
 Cell[BoxData[
  RowBox[{"CharacteristicPolyonomial", "[", 
   RowBox[{
    StyleBox["m", "TI"], ",", 
    StyleBox["x", "TI"]}], "]"}]], "InlineFormula"],
 " is essentially equivalent to ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Det",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Det"], "[", 
   RowBox[{
    StyleBox["m", "TI"], "-", 
    RowBox[{
     StyleBox["id", "TI"], " ", 
     StyleBox["x", "TI"]}]}], "]"}]], "InlineFormula"],
 " where ",
 Cell[BoxData[
  StyleBox["id", "TI"]], "InlineFormula"],
 " is the identity matrix of appropriate size"
}], "Text",
 CellChangeTimes->{{3.467373050615405*^9, 3.4673730843894644`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CharacteristicPolynomial", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "d"}], "}"}]}], "}"}], ",", "x"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "b"}], " ", "c"}], "+", 
  RowBox[{"a", " ", "d"}], "-", 
  RowBox[{"a", " ", "x"}], "-", 
  RowBox[{"d", " ", "x"}], "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.473439183554509*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sparse Arrays", "Subsection",
 CellChangeTimes->{{3.472893539329324*^9, 3.472893556255354*^9}}],

Cell[TextData[{
 "Many large-scale applications of linear algebra involve matrices that have \
many elements, but comparatively few that are nonzero. You can represent such \
sparse matrices efficiently in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using ",
 Cell[BoxData[
  ButtonBox["SparseArray",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/SparseArray"]], "InlineFormula"],
 " objects, as discussed in ",
 ButtonBox["\"Sparse Arrays: Manipulating Lists\"",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/SparseArrays-ManipulatingLists"],
 ". ",
 Cell[BoxData[
  ButtonBox["SparseArray",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/SparseArray"]], "InlineFormula"],
 " objects work by having lists of rules that specify where nonzero values \
appear."
}], "Text",
 CellChangeTimes->{3.472893599217829*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["SparseArray",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/SparseArray"], "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox[
       StyleBox["pos", "TI"], 
       StyleBox["1", "TR"]], "->", 
      SubscriptBox[
       StyleBox["val", "TI"], 
       StyleBox["1", "TR"]]}], ",", 
     RowBox[{
      SubscriptBox[
       StyleBox["pos", "TI"], 
       StyleBox["2", "TR"]], "->", 
      SubscriptBox[
       StyleBox["val", "TI"], 
       StyleBox["2", "TR"]]}], ",", 
     StyleBox["\[Ellipsis]", "TR"]}], "}"}], "]"}]], "InlineFormula"],
 " ",
 "yields a sparse array in which values ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["val", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 " appear at positions ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["pos", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4728936105590487`*^9, 3.4728936160502586`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "=", 
  RowBox[{"SparseArray", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", "2"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", "3"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", "4"}]}], "}"}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"SparseArray", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{"\<\"<\"\>", "\[InvisibleSpace]", "4", 
      "\[InvisibleSpace]", "\<\">\"\>"}],
     SequenceForm["<", 4, ">"],
     Editable->False], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}]}], "]"}],
  False,
  Editable->False]], "Output",
 CellChangeTimes->{3.4734391836013093`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["s"], "Input",
 CellChangeTimes->{3.4728936287642813`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"SparseArray", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{"\<\"<\"\>", "\[InvisibleSpace]", "4", 
      "\[InvisibleSpace]", "\<\">\"\>"}],
     SequenceForm["<", 4, ">"],
     Editable->False], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}]}], "]"}],
  False,
  Editable->False]], "Output",
 CellChangeTimes->{3.473439183616909*^9}]
}, Open  ]],

Cell["View it as a matrix:", "Text",
 CellChangeTimes->{3.472893634817092*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "s", "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "4"},
     {"0", "2", "0"},
     {"0", "0", "3"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {3, 3}, 0, {
     1, {{0, 2, 3, 4}, {{1}, {3}, {2}, {3}}}, {1, 4, 2, 3}}]]]]], "Output",
 CellChangeTimes->{3.473439183632509*^9}]
}, Open  ]],

Cell["Convert it to an ordinary dense matrix :", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "s", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391836481094`*^9}]
}, Open  ]],

Cell["\<\
This makes a 50\[Times]50 sparse numerical matrix, with 148 nonzero elements. \
\>", "Text",
 CellChangeTimes->{3.4728936707639537`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"SparseArray", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"30", ",", "_"}], "}"}], "->", "11.5"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "30"}], "}"}], "->", "21.5"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i_", ",", "i_"}], "}"}], "->", "i"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"50", ",", "50"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"SparseArray", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{"\<\"<\"\>", "\[InvisibleSpace]", "148", 
      "\[InvisibleSpace]", "\<\">\"\>"}],
     SequenceForm["<", 148, ">"],
     Editable->False], ",", 
    RowBox[{"{", 
     RowBox[{"50", ",", "50"}], "}"}]}], "]"}],
  False,
  Editable->False]], "Output",
 CellChangeTimes->{3.4734391836637096`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", "m", "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[SparseArray[
   Automatic, {50, 50}, 50., {
    1, {{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 
      36, 38, 40, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 
      116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 
      144, 146, 148}, {{50}, {30}, {49}, {30}, {48}, {30}, {30}, {47}, {30}, {
      46}, {45}, {30}, {30}, {44}, {30}, {43}, {30}, {42}, {41}, {30}, {40}, {
      30}, {30}, {39}, {38}, {30}, {37}, {30}, {36}, {30}, {35}, {30}, {34}, {
      30}, {33}, {30}, {32}, {30}, {30}, {31}, {30}, {10}, {46}, {37}, {6}, {
      38}, {4}, {9}, {50}, {7}, {17}, {45}, {15}, {47}, {48}, {19}, {36}, {
      28}, {8}, {5}, {13}, {49}, {14}, {44}, {26}, {18}, {16}, {27}, {43}, {
      34}, {12}, {3}, {33}, {25}, {32}, {35}, {23}, {11}, {42}, {22}, {41}, {
      24}, {39}, {20}, {2}, {1}, {40}, {31}, {29}, {21}, {30}, {29}, {28}, {
      30}, {30}, {27}, {26}, {30}, {25}, {30}, {30}, {24}, {23}, {30}, {30}, {
      22}, {21}, {30}, {30}, {20}, {30}, {19}, {18}, {30}, {30}, {17}, {30}, {
      16}, {15}, {30}, {14}, {30}, {13}, {30}, {12}, {30}, {11}, {30}, {10}, {
      30}, {9}, {30}, {8}, {30}, {7}, {30}, {30}, {6}, {30}, {5}, {4}, {30}, {
      3}, {30}, {2}, {30}, {30}, {1}}}, CompressedData["
1:eJztkTkOwjAQRYeOkoKCggIQQgghxCL2JQ5rao6ARM0VfAgOyhEoMrHkp0xP
QZqX9//Yluz243V/VkTkLfj8zuU/nyR2cZGHvAqvKevGfAPehLeUHeRdY7+e
so98AB/CR/AxfAKfGufPcrrTn7/E8D5z5SLOQ79UrpCvjfmNcmv0BfdGf4An
Slc+75FLqp4iP2IdXHAvnvd0Rg+XC3p6MXdFri435HDJyvfzmfsCTR9zpA==

     "]}], {{0, 0}, {50, 50}}, {0, 50}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}}]], "Output",
 CellChangeTimes->{3.4734391837261095`*^9}]
}, Open  ]],

Cell["Here are the four largest Eigenvalues:", "Text",
 CellChangeTimes->{{3.4728936928223925`*^9, 3.4728936996708045`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvalues", "[", 
  RowBox[{"m", ",", "4"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"129.8464828045342`", ",", 
   RowBox[{"-", "92.68783328158462`"}], ",", "49.78670161397873`", ",", 
   "48.74780765073335`"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391837417097`*^9}]
}, Open  ]],

Cell["Calculating with sparse arrays yields again sparse arrays.", "Text",
 CellChangeTimes->{{3.472893716425234*^9, 3.4728937328832626`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", ".", "m"}]], "Input",
 CellChangeTimes->{{3.4728937114800253`*^9, 3.4728937119948263`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"SparseArray", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{"\<\"<\"\>", "\[InvisibleSpace]", "2500", 
      "\[InvisibleSpace]", "\<\">\"\>"}],
     SequenceForm["<", 2500, ">"],
     Editable->False], ",", 
    RowBox[{"{", 
     RowBox[{"50", ",", "50"}], "}"}]}], "]"}],
  False,
  Editable->False]], "Output",
 CellChangeTimes->{3.47343918375731*^9}]
}, Open  ]],

Cell[TextData[{
 "You can apply most standard structural operations directly to ",
 Cell[BoxData[
  ButtonBox["SparseArray",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/SparseArray"]], "InlineFormula"],
 " objects, just as you would to ordinary lists. When the results are sparse, \
they typically return ",
 Cell[BoxData[
  ButtonBox["SparseArray",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/SparseArray"]], "InlineFormula"],
 " objects. "
}], "Text",
 CellChangeTimes->{3.4728937425240793`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.4728937487172904`*^9, 3.472893752024496*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.4734391837729096`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "All"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.4728937487172904`*^9, 3.4728937603393106`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"SparseArray", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{"\<\"<\"\>", "\[InvisibleSpace]", "2", 
      "\[InvisibleSpace]", "\<\">\"\>"}],
     SequenceForm["<", 2, ">"],
     Editable->False], ",", 
    RowBox[{"{", "50", "}"}]}], "]"}],
  False,
  Editable->False]], "Output",
 CellChangeTimes->{3.4734391837885094`*^9}]
}, Open  ]],

Cell["\<\
This gives the rules for the nonzero elements on the second row. \
\>", "Text",
 CellChangeTimes->{3.472893775112537*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayRules", "[", 
  RowBox[{"m", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", "2", "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", "30", "}"}], "\[Rule]", "21.5`"}], ",", 
   RowBox[{
    RowBox[{"{", "_", "}"}], "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391838041096`*^9}]
}, Open  ]],

Cell[TextData[{
 "Here are two symmetric tridiagonal matrices of size 400\[Times]400. ",
 StyleBox["fullTriDiagonalMatrix", "MR"],
 " is a dense matrix and ",
 StyleBox["sparseTriDiagonalMatrix", "MR"],
 " is a sparse matrix."
}], "Text",
 CellChangeTimes->{3.4728940682526517`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fullTriDiagonalMatrix", " ", "=", " ", "\n", "   ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"i", " ", "==", " ", "j"}], ",", " ", "1", ",", " ", 
        RowBox[{
         RowBox[{"i", " ", "==", " ", 
          RowBox[{"j", " ", "-", " ", "1"}]}], " ", "||", " ", 
         RowBox[{"i", " ", "==", " ", 
          RowBox[{"j", " ", "+", " ", "1"}]}]}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "j"}], " ", "j"}], ",", " ", 
        "True", ",", " ", "0"}], "]"}], ",", "\n", "         ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", "400"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"j", ",", " ", "400"}], "}"}]}], "]"}]}], ";"}], "\n", 
  "         "}], "\n", 
 RowBox[{
  RowBox[{"Short", "[", 
   RowBox[{"fullTriDiagonalMatrix", ",", " ", "12"}], "]"}], 
  "        "}]}], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}],
  Short[#, 12]& ]], "Output",
 CellChangeTimes->{3.4734391841473103`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sparseTriDiagonalMatrix", " ", "=", " ", 
  RowBox[{"SparseArray", " ", "@", " ", 
   RowBox[{"Flatten", "[", "\n", "   ", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "j"}], "}"}], " ", "->", " ", 
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{"i", " ", "==", " ", "j"}], ",", " ", "1", ",", " ", 
          RowBox[{
           RowBox[{"i", " ", "==", " ", 
            RowBox[{"j", " ", "-", " ", "1"}]}], " ", "||", " ", 
           RowBox[{"i", " ", "==", " ", 
            RowBox[{"j", " ", "+", " ", "1"}]}]}], ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", "j"}], " ", "j"}]}], "]"}]}], 
       ",", " ", "\n", "        ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "400"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", "400"}], "}"}]}], "]"}], " ", "/.", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"_", " ", "->", " ", "Null"}], " ", ")"}], " ", "->", " ", 
      RowBox[{"Sequence", "[", "]"}]}]}], "]"}]}]}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"SparseArray", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{"\<\"<\"\>", "\[InvisibleSpace]", "1198", 
      "\[InvisibleSpace]", "\<\">\"\>"}],
     SequenceForm["<", 1198, ">"],
     Editable->False], ",", 
    RowBox[{"{", 
     RowBox[{"400", ",", "400"}], "}"}]}], "]"}],
  False,
  Editable->False]], "Output",
 CellChangeTimes->{3.4734391849585114`*^9}]
}, Open  ]],

Cell["Mathematically the two matrices are identical.", "Text",
 CellChangeTimes->{3.4728940914342923`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sparseTriDiagonalMatrix", " ", "==", " ", 
  "fullTriDiagonalMatrix"}]], "Input"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.4734391850209117`*^9}]
}, Open  ]],

Cell[TextData[{
 "While ",
 ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"],
 " checks mathematical equivalence, ",
 ButtonBox["SameQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SameQ"],
 " checks structural equivalence. Structurally the two matrices are not \
identical. One is a dense matrix with head ",
 ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"],
 " and the other is a sparse array with head ",
 ButtonBox["SparseArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SparseArray"],
 "."
}], "Text",
 CellChangeTimes->{{3.4728941007163086`*^9, 3.472894127704356*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sparseTriDiagonalMatrix", " ", "===", " ", 
  "fullTriDiagonalMatrix"}]], "Input"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.473439185036512*^9}]
}, Open  ]],

Cell[TextData[{
 "Because the sparse matrix does not store the 158802 zeros, it has a much \
smaller ",
 StyleBox["ByteCount", "MR"],
 "."
}], "Text",
 CellChangeTimes->{3.472894139856777*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ByteCount", " ", "/@", " ", 
  RowBox[{"{", 
   RowBox[{"fullTriDiagonalMatrix", ",", " ", "sparseTriDiagonalMatrix"}], 
   "}"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"640144", ",", "11912"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391850521116`*^9}]
}, Open  ]],

Cell["We create the numerical counterparts of the matrices:", "Text",
 CellChangeTimes->{{3.4728941750972395`*^9, 3.4728941844572554`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fullTriDiagonalMatrixN", ",", " ", "sparseTriDiagonalMatrixN"}], 
    "}"}], " ", "=", " ", "\n", "  ", 
   RowBox[{"N", " ", "@", " ", 
    RowBox[{"{", 
     RowBox[{"fullTriDiagonalMatrix", ",", " ", "sparseTriDiagonalMatrix"}], 
     "}"}]}]}], ";"}]], "Input"],

Cell["\<\
Here are some timings for adding and multiplying the dense and the sparse \
matrices. The sparse matrix operations are substantially faster.\
\>", "Text",
 CellChangeTimes->{3.4728941958296757`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"op", ",", " ", "o"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"op", ",", " ", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"m", ",", " ", 
         RowBox[{
          RowBox[{"Timing", "[", 
           RowBox[{"Nest", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"op", "[", 
               RowBox[{"#1", ",", " ", "m"}], "]"}], "&"}], ",", " ", "m", 
             ",", " ", "o"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}], " ", "/@", " ", "\n", 
       "            ", 
       RowBox[{"{", 
        RowBox[{
        "fullTriDiagonalMatrixN", ",", " ", "sparseTriDiagonalMatrixN"}], 
        "}"}]}]}], "}"}]}], "]"}], " ", "@@@", "\n", "            ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Plus", ",", " ", "100"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Times", ",", " ", "100"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Dot", ",", " ", "10"}], "}"}]}], "}"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Plus", ",", 
     RowBox[{"{", 
      RowBox[{"0.23399999999999999`", ",", "0.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Times", ",", 
     RowBox[{"{", 
      RowBox[{"0.21799999999999997`", ",", "0.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Dot", ",", 
     RowBox[{"{", 
      RowBox[{"0.10899999999999999`", ",", "0.`"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.4734391856449127`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Advanced Matrix Operations", "Subsection",
 CellChangeTimes->{3.4728976832064767`*^9}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Advanced Matrix Operations",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/AdvancedMatrixOperations"]
}], "Text",
 CellChangeTimes->{{3.4728976893684874`*^9, 3.4728977040637136`*^9}}],

Cell[TextData[{
 "The ",
 StyleBox["singular values",
  FontSlant->"Italic"],
 " of a matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["m",
    FontWeight->Bold], TraditionalForm]], "InlineMath"],
 " are the square roots of the eigenvalues of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["m",
     FontWeight->Bold], 
    StyleBox[".",
     FontWeight->"Bold"], 
    SuperscriptBox[
     StyleBox["m",
      FontWeight->Bold], "*"]}], TraditionalForm]], "InlineMath"],
 ", where ",
 Cell[BoxData[
  FormBox["*", TraditionalForm]], "InlineMath"],
 " denotes Hermitian transpose. The number of such singular values is the \
smaller dimension of the matrix"
}], "Text",
 CellChangeTimes->{3.4728977280877557`*^9}],

Cell[TextData[{
 " ",
 Cell[BoxData[
  ButtonBox["SingularValueList",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/SingularValueList"]], "InlineFormula"],
 " sorts the singular values from largest to smallest. ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["SingularValueList",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/SingularValueList"], "[", 
   StyleBox["m", "TI"], "]"}]]],
 "gives ",
 "the list of nonzero singular values of ",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"]
}], "Text",
 CellChangeTimes->{{3.4728977415037794`*^9, 3.472897751300596*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SingularValueList", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SqrtBox[
    RowBox[{
     FractionBox["3", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"95", "+", 
       SqrtBox["8881"]}], ")"}]}]], ",", 
   SqrtBox[
    RowBox[{
     FractionBox["3", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"95", "-", 
       SqrtBox["8881"]}], ")"}]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.473439185691713*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "8"}], "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sv", "=", 
  RowBox[{"SingularValueList", "[", "m", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4.639366956394353`", ",", "1.2711205408777908`", ",", 
   "0.9907830675133164`", ",", "0.6837713964238187`", ",", 
   "0.46288893072442333`", ",", "0.3615723031802524`", ",", 
   "0.22837986317520728`", ",", "0.014489653932822914`"}], "}"}]], "Output",
 CellChangeTimes->{3.473439185707313*^9}]
}, Open  ]],

Cell["\<\
The 2-norm of a matrix is equal to the largest singular value:\
\>", "Text",
 CellChangeTimes->{3.472897792453469*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", 
  RowBox[{"m", ",", "2"}], "]"}]], "Input"],

Cell[BoxData["4.639366956394353`"], "Output",
 CellChangeTimes->{3.473439185722913*^9}]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["2\[Hyphen]norm",
  FontSlant->"Italic"],
 " of a matrix ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Norm",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Norm"], "[", 
   RowBox[{
    StyleBox["m", "TI"], ",", "2"}], "]"}]], "InlineFormula"],
 " is the largest principal axis of the ellipsoid, equal to the largest \
singular value of the matrix. This is also the maximum 2\[Hyphen]norm length \
of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", ".", 
    StyleBox["v",
     FontSlant->"Italic"]}], TraditionalForm]], "InlineMath"],
 " for any possible unit vector ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]], "InlineMath"],
 ". ",
 "The 2-norm of the inverse is equal to the reciprocal of the smallest \
singular value:"
}], "Text",
 CellChangeTimes->{
  3.4728978065246935`*^9, {3.472897973413787*^9, 3.4728979759565907`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", 
  RowBox[{
   RowBox[{"Inverse", "[", "m", "]"}], ",", "2"}], "]"}]], "Input"],

Cell[BoxData["69.0147607828466`"], "Output",
 CellChangeTimes->{3.473439185754113*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["LU decomposition",
  FontSlant->"Italic"],
 " effectively factors any square matrix into a product of lower\[Hyphen] and \
upper\[Hyphen]triangular matrices. ",
 StyleBox["Cholesky decomposition",
  FontSlant->"Italic"],
 " effectively factors any Hermitian positive\[Hyphen]definite matrix into a \
product of a lower\[Hyphen]triangular matrix and its Hermitian conjugate, \
which can be viewed as the analog of finding a square root of a matrix. "
}], "Text",
 CellChangeTimes->{3.4728980057682433`*^9}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["LUDecomposition",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/LUDecomposition"], "[", 
   StyleBox["m", "TI"], "]"}]], "InlineFormula"],
 " generates a representation of the LU decomposition of a square matrix\
\[NonBreakingSpace]",
 Cell[BoxData[
  StyleBox["m", "TI"]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  ButtonBox["LUDecomposition",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/LUDecomposition"]], "InlineFormula"],
 " returns a list of three elements. The first element is a combination of \
upper\[Hyphen] and lower\[Hyphen]triangular matrices, the second element is a \
vector specifying rows used for pivoting, and for approximate numerical \
matrices ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]], "InlineMath"],
 " the third element is an estimate of the ",
 Cell[BoxData[
  SuperscriptBox[
   StyleBox["L", "TB"], 
   StyleBox["\[Infinity]", "TR"]]], "InlineFormula"],
 " condition number of ",
 Cell[BoxData[
  FormBox["m", Cell$$38228`TraditonalForm]], "InlineMath"],
 ". "
}], "Text",
 CellChangeTimes->{{3.472898013989458*^9, 3.4728980315706887`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"lu", ",", "p", ",", "c"}], "}"}], "=", 
  RowBox[{"LUDecomposition", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"-", "2"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391857697134`*^9}]
}, Open  ]],

Cell[TextData[{
 "There are also some more",
 ButtonBox[" matrix decomposition algorithms",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/MatrixDecompositions"],
 " available ."
}], "Text",
 CellChangeTimes->{{3.472898124546852*^9, 3.4728981756213417`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Excercise", "Subsection",
 CellChangeTimes->{{3.4673671641362357`*^9, 3.467367165446638*^9}}],

Cell[TextData[{
 "a)",
 StyleBox[" (Taken from the ", "ReaderAnnotation"],
 StyleBox["Mathematica", "ReaderAnnotation",
  FontSlant->"Italic"],
 StyleBox[" Guidebook by Michael Trott)", "ReaderAnnotation"],
 "For an arbitrary ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "\[Cross]", "3"}], TraditionalForm]], "InlineFormula"],
 " matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["\"\<A\>\"", "TB"], TraditionalForm]], "InlineFormula"],
 ", "
}], "Text",
 GeneratedCell->False,
 CellChangeTimes->{{3.467373912618571*^9, 3.4673739141785736`*^9}, {
  3.4673740298215766`*^9, 3.467374030539178*^9}, {3.4673740721912513`*^9, 
  3.467374088103279*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1],
 CellTags->{
  "T[D[Matrix Identities]]", "Index[06, {identities, for matrices}]"}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox[
      StyleBox["A", "TB"], "3"], "-", 
     RowBox[{
      RowBox[{"tr", "(", 
       StyleBox["A", "TB"], ")"}], 
      SuperscriptBox[
       StyleBox["A", "TB"], "2"]}], "+", 
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"tr", "(", 
          StyleBox["A", "TB"], ")"}], "2"], "-", 
        RowBox[{"tr", "(", 
         SuperscriptBox[
          StyleBox["A", "TB"], "2"], ")"}]}], ")"}], 
      StyleBox["A", "TB"]}], "-", 
     RowBox[{
      RowBox[{"det", "(", 
       StyleBox["A", "TB"], 
       StyleBox[")", "TB"]}], 
      StyleBox["1", "TB"]}]}], "=", "0"}], ","}], 
  TraditionalForm]], "DisplayFormula",
 GeneratedCell->False,
 CellChangeTimes->{{3.4673738782517104`*^9, 3.4673739026657534`*^9}}],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["tr", TraditionalForm]], "InlineFormula"],
 " is the trace, ",
 Cell[BoxData[
  FormBox["det", TraditionalForm]], "InlineFormula"],
 " is the determinant, and ",
 Cell[BoxData[
  FormBox[
   StyleBox["\"\<1\>\"", "TB"], TraditionalForm]], "InlineFormula"],
 " is the 3D identity matrix. (This identity follows from the Theorem of \
Cayley\[Dash]Hamilton together with the Newton relations.) Prove this \
identity. "
}], "Text",
 CellChangeTimes->{3.467373908780964*^9},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 StyleBox["b)", "EXNUM"],
 StyleBox[" (Taken from the ", "ReaderAnnotation"],
 StyleBox["Mathematica", "ReaderAnnotation",
  FontSlant->"Italic"],
 StyleBox[" Guidebook by Michael Trott)", "ReaderAnnotation"],
 " For arbitrary ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "\[Cross]", "2"}], TraditionalForm]], "InlineFormula"],
 " matrices ",
 Cell[BoxData[
  FormBox[
   StyleBox["A", "TB"], TraditionalForm]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["B", "TB"], TraditionalForm]], "InlineFormula"],
 ", the following identity hold:"
}], "Text",
 CellChangeTimes->{{3.4673740360927877`*^9, 3.467374090302883*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{
     StyleBox["B",
      FontWeight->"Bold"], 
     StyleBox[".",
      FontWeight->"Plain"], 
     StyleBox["A",
      FontWeight->"Bold"]}],
    FontSlant->"Plain"], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"tr", "(", 
        StyleBox[
         RowBox[{
          StyleBox["A",
           FontWeight->"Bold"], 
          StyleBox[".",
           FontWeight->"Plain"], 
          StyleBox["B",
           FontWeight->"Bold"]}],
         FontSlant->"Plain"], ")"}], "-", 
       RowBox[{
        RowBox[{"tr", "(", 
         StyleBox["A",
          FontWeight->"Bold",
          FontSlant->"Plain"], ")"}], " ", 
        RowBox[{"tr", "(", 
         StyleBox["B",
          FontWeight->"Bold",
          FontSlant->"Plain"], ")"}]}]}], ")"}], " ", 
     StyleBox["1",
      FontWeight->"Bold"]}], " ", "+", " ", 
    RowBox[{
     RowBox[{"tr", "(", 
      StyleBox["A",
       FontWeight->"Bold",
       FontSlant->"Plain"], ")"}], 
     StyleBox["B",
      FontWeight->"Bold",
      FontSlant->"Plain"]}], " ", "+", " ", 
    RowBox[{
     RowBox[{"tr", "(", 
      StyleBox["B",
       FontWeight->"Bold",
       FontSlant->"Plain"], ")"}], " ", 
     StyleBox["A",
      FontWeight->"Bold",
      FontSlant->"Plain"]}], " ", "-", " ", 
    StyleBox[
     RowBox[{
      StyleBox["A",
       FontWeight->"Bold"], 
      StyleBox[".",
       FontWeight->"Plain"], 
      StyleBox["B",
       FontWeight->"Bold"]}],
     FontSlant->"Plain"]}]}], TraditionalForm]], "DisplayFormula",
 GeneratedCell->False],

Cell[TextData[{
 "Here again tr stands for the trace, and ",
 StyleBox["1", "TB"],
 " is the 2D identity matrix. Prove this identity. Does it also hold for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "\[Cross]", "3"}], TraditionalForm]], "InlineFormula"],
 " matrices? "
}], "Text",
 CellChangeTimes->{3.4673741398173695`*^9},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
c) Try to define a user-built trace command to sum the diagonal elements and \
compare the performance of your routine with the built in Tr.\
\>", "Text",
 CellChangeTimes->{{3.4673671695962453`*^9, 3.4673672263959446`*^9}, {
  3.4673742536547785`*^9, 3.467374254715581*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testMatrix", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", " ", "j"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "100"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"j", ",", "100"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"Tr", "[", "testMatrix", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"10", "^", "5"}], "}"}]}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.4673672494059854`*^9, 3.4673672495775857`*^9}, {
  3.4673740998500996`*^9, 3.467374108445715*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.04700000000000015`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.4734391858321133`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dynamic", "Section",
 CellChangeTimes->{{3.4679781218235083`*^9, 3.46797812288431*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Custom Interface Construction",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/CustomInterfaceConstruction"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.473412230284984*^9, 3.4734122425622053`*^9}}],

Cell[CellGroupData[{

Cell["Dynamic", "Subsection",
 CellChangeTimes->{{3.4730744361314206`*^9, 3.4730744372078223`*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Introduction to Dynamic\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/IntroductionToDynamic"],
 ButtonBox["Advanced Dynamic Functionality",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/AdvancedDynamicFunctionality"],
 ButtonBox["\n",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/IntroductionToDynamic"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.473074403449363*^9, 3.4730744217481956`*^9}, {
  3.4734121064207664`*^9, 3.4734121169351845`*^9}}],

Cell[TextData[{
 "Usually a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session is a series of static in- and outputs, basically like a series of \
calculations you do by hand or by calculator. Once performed or written down \
they don't change any more. For example:"
}], "Text",
 CellChangeTimes->{{3.473074464788671*^9, 3.4730745297167864`*^9}, 
   3.4733534456513968`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "1"}]], "Input",
 CellChangeTimes->{{3.473074532602792*^9, 3.4730745380940013`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.473439185863313*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "+", "x"}]], "Input",
 CellChangeTimes->{{3.473074542618009*^9, 3.4730745428832097`*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.473439185863313*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "7"}]], "Input",
 CellChangeTimes->{{3.473074545800415*^9, 3.473074547656818*^9}}],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{3.473439185878913*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "+", "x"}]], "Input",
 CellChangeTimes->{{3.4730745514476247`*^9, 3.473074551697225*^9}}],

Cell[BoxData["14"], "Output",
 CellChangeTimes->{3.473439185894513*^9}]
}, Open  ]],

Cell["\<\
After changing x from 1 to 7 the former results keep the same, like something \
you have written down on a sheet of paper. This is usefull to document what \
you did.\
\>", "Text",
 CellChangeTimes->{{3.473074590088893*^9, 3.473074665858226*^9}}],

Cell[TextData[{
 "Under different circumstances you might want to have a different behavior, \
namely to have an automatic and immediate  update of the calculations you \
performed when you change their input. This functionality is provided by ",
 ButtonBox["Dynamic",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dynamic"],
 "."
}], "Text",
 CellChangeTimes->{{3.473074684827859*^9, 3.4730747676952047`*^9}}],

Cell["Evaluate the following:", "Text",
 CellChangeTimes->{{3.473074791329246*^9, 3.4730747958532543`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{"x", "+", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.4730747966332555`*^9, 3.4730748046360693`*^9}}],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`x + $CellContext`x, StandardForm],
  ImageSizeCache->{18., {0., 9.}}]], "Output",
 CellChangeTimes->{3.4734391859257135`*^9}]
}, Open  ]],

Cell["\<\
You receive 14 because x was defined to be 7 before. Now look what happens if \
we change  the value of x:\
\>", "Text",
 CellChangeTimes->{{3.4730748236213026`*^9, 3.4730748717317877`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "3"}]], "Input",
 CellChangeTimes->{{3.4730748732449903`*^9, 3.473074874477392*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.4734391859413137`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "100"}]], "Input",
 CellChangeTimes->{{3.4730748775661974`*^9, 3.473074878502199*^9}}],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.4734391859569135`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  FractionBox["3", "2"]}]], "Input",
 CellChangeTimes->{{3.473074879953002*^9, 3.4730748844614096`*^9}}],

Cell[BoxData[
 FractionBox["3", "2"]], "Output",
 CellChangeTimes->{3.473439185972513*^9}]
}, Open  ]],

Cell[TextData[{
 "The static outputs from above didn't change, because they were not wrapped \
in ",
 ButtonBox["Dynamic[ ]. ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dynamic"]
}], "Text",
 CellChangeTimes->{{3.473074920513073*^9, 3.4730749565647364`*^9}, {
  3.4733535073299155`*^9, 3.4733535215415406`*^9}}],

Cell[TextData[{
 "There are no restrictions on the kinds of values that can go into a dynamic \
output. Just because ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " was initially a number does not mean it cannot become a formula or even a \
graphic in subsequent evaluations. "
}], "Text",
 CellChangeTimes->{3.4733535375315685`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"x", "=", "\"\<String\>\""}]}]], "Input",
 CellChangeTimes->{
  3.473074917689468*^9, {3.4733535414783754`*^9, 3.473353547234786*^9}}],

Cell[BoxData["\<\"String\"\>"], "Output",
 CellChangeTimes->{3.4734391859881134`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.4733536052668877`*^9, 3.47335360660849*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "z", "]"}], "+", 
      RowBox[{"y", "[", "z", "]"}]}], "\[Equal]", 
     RowBox[{"a", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}], ",", 
    RowBox[{"y", "[", "z", "]"}], ",", "z"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4733535585916057`*^9, 3.4733535828340483`*^9}, 
   3.4733536957238493`*^9, {3.4733537316935153`*^9, 3.473353736451524*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "z", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "z"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      FractionBox["1", "2"], " ", "a", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cos", "[", "z", "]"}]}], "+", 
        RowBox[{"Sin", "[", "z", "]"}]}], ")"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.473439186190914*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{"ContourPlot", "[", 
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "y", " ", 
     RowBox[{"Sin", "[", 
      FractionBox["x", "y"], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", 
      RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4733537692895813`*^9, 3.473353803079241*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJyEnQeYlcXVx9llK9vu3l2jBrvYY4uKbfW+dhF7jWK+2BNRxBh7omIsscWC
XWyJ2MVYsaH3te/aUBQbKopdBF1AEAH9rnfmd17P/2af+PA81/+emXlnzpw5
c+bMmZnlDxq5+6HV/fr1O3+lfv1+/h00ZHTpX3Par/xfZzp+xJTSvzrD2/9M
HlRl+IEyfW4RfG8Zf2Y4/HZ3gR8P9AL40ZDf8NBQfgJ+JHzf8Cqhfoapb/ln
ULvVF0x9wdQXTH3B1BdMfcHUF0x9wdQXTH3B1Jdf6gumvmDqC6a+vp+6u8DU
F0x9wdQXTH3B1Lcvvmq99Zf6g6k/mPp7ueruAlN/MPUHU38w9QdTf/AOof6J
/15nhVwo37UdYP2lfWDa58dJdxeY9oFpH5j2gWkfmPaBaZ+MS8UVcq9ypf2k
7QLrL+31eqC7C0x7wbQXTHvBtBdMe8G0V/SO4opxreNG5VD7TdsF1l/aC6a9
YNoLpr1g2gumvWDaK3pVcYXeUr2g40zlUvtN2+X1ePbr9Xl3l9fn3V1en3d3
eX3e3eX1eXcX7fXf6VRcoZdV76ke0XGncqn9pu0C6y/tBdNeMO0F014w7ZV5
UXHFvKN6XfWk6hUddyqX2m/aLrD+0l4w7QXTXjDtlXlfccW8qvOWzgOqN1Wv
6LhTudR+03aB9Zf2gmkvmPaKXZP0ZTfovKzznM4LqjdVr+i4U7nUftN26S/t
A9O+vuwI6q/zlup11XuqF3TcqFwp37WeYP2lvmon6Lyq847qZdVbOq5V7lUu
lI9g6gn2+rxT7ZoKO0DnSZ1HVM+qHtJxqnIs9nki9nkypVzBtrScbHxjtK/y
6U/l//qn0MGkA68U0idg8q9Q/l1YJD+Y/GDygfX36JA+AX8QyjPM98F8f9sy
H3rt+2C+ByYfWH93DL8F8KohveHqMh9rEjD1BVNfMPUFU987y4x50+oLhl9g
6g+m/mDKBevv0+G3AKZ9YNoHpn1g2gemfWDaB6Z9fJf2gWkfmPaBaR+Y9mk7
wPpL+8C0D0z7wLQPTPvAtA9M+/gO7QPTPjDtA9M+lTOw/lJ/MPUHU18w9QVT
X8qhvmDqC9ZfvgeGX2C+D+b7YL5POeQHkx9MfqXrONNxpBi7pa9+U0x61SM6
TlWuVQ6or2L4TPk6znVcqByB4YNi5IzvgbFnVA+qXtFxqHILpl8VI9f0G3Sw
6nedx7X+6g9Qfa/rS09vNsx8rHpf9ajqHR2nivk+7Ve7T/mhdhV02q/zndoJ
Ov+p/0DHha5HVa6hq1zCL5VTXY+rHOn6XPkMXectfqGr3sf+0XlA10mqR3Vd
ofO52uU6v0NHXtWu1Ple7Tjo9I/qJa+3miv0DHYg/aF6Ajr9oeMYOv2hcg69
r37xdmh3l9oV/J3+0XkZOv2j9gd0+kftEej0j9on0BlPaq9Ap7/UfvHt6zQ6
/eXbofNIc8U8oP4N1ePq71A9q/4P1UPqD+lrnNCuvuw+0kGnf9R+0nW32lO6
blX7SteFam/xHfpH7S9d96g9pv4mndfVf6HztPpnoNM/fc179I/OC6pX+lpH
9MVnMPUCw38w/Fb+iR1TYQ+qv8qPs87U22vNFfYi/Qq/1H78X/O+riuUH2rn
gmkvGHkC035pj2Hay/dpT192lM4DqndUztUupz76PV0X6rpK1yE6TvpaZ6pe
03Gk6wRdl+o6zuv/TC/2NQ5VzkRvVsillC/7APkKvev9yJldo3pX+Ywcq51D
eu135Jr8YPKrnla9gN6g33XfQvW42kW6jicd9dPvMp4pR+0gMHxBj9BuMOWB
KU/9s6r3VT8wTilf/Z86L+j4UH+jtlvtMJ0n1A7TeULlW+0ynfd1XgF7O7u5
wo5TO8HPS80Vdjb5weTXeQlMfrX71K7QeQxM/6qdrnai2iG6P6nyqn5i1TM6
zrFToIOhq52i+0nqx1I7RudRMHKrfmqdr9UuVTtI52VdZ6jdqnaSzuO6DlG7
Vu0orbfyXe1etbPUbgAvUy7n6yiP7eku5b9/VABDD/3VanQw9PKfhzQYHQw9
9GO10RUfUR7v84vvlT+cS8B91UPLBZMPrL/9y/nnFMBTyx/4yXDQK7XGF+rj
29lRwbcbyr/PWf3A8AFMfcHUF0y5YPgDpv5g6g+m/uDQ302GaY+vX0ei9f9f
/QSmvmDqB6Z+YOoHpn5g6uflqCNRueM71E+/C+b7ffW71lPlQOsNXesNVrnR
dpHunfA9SwcO82SryX9sv8l3mD9zht8N9TJMOYvK8/xswzoOoPPL31cPvxV8
It2fQ72MvnLgfwIdPoGhk572QQdDfziMJx1v6VaBj4aRV/gBHfkAQyd9mBeb
jA6GDj+hI19g6KSHv9DpNzB00tNu6LQTDJ30/ELnV/UDf6f/wMi90slPf0Kn
v8HQSU9/Qqe/wdBV/0C/LOhDo9P/0BkPYOiqr6AjL0JPJwZs8xgYOnxDPqAj
P2DopEdefHkNhqGTHnmBjjyBoZMeeYGOPIGhkx55gY48gaGrnEAHQ+cXOr/8
Hfnh78gXGDrpkR/oyBcYOumRH+jIFxg66ZEn6MgbGPkBI19KpzzkSeRFcUo7
kS8w8gJGnsD0Nxh5UDp8pb+hIw9g6KSnv1WPg/WXfH39nf7h7/QfmP4A019g
+AuG/2D4DYbfyk/qAT/B0KkX40/1mPYTWOdVnTd0XlG98b/6nfL7mnf8vNZQ
oWcoTzHp4afaATqP9TWvqZ76X3JK/6pdofNgX/Oi6jmVY8aX9/vkKvxAvt/a
KtqpfhjSg3U+7Wte5u+Up3qX+qvfhPxgnR+9n6S1ws/h7dC2xMthp9HLP4Pa
K+wh3X9S+8nTW8Wv0CT7U7k0pMv2p9Re0vykxw+h6x/S0+9gyiM/cgMdvmt+
0sNHtbeg41fQ9RTloVfAfjxn+1e6/iI9/avlkZ91v67XND/pmc+8X7rVMPMf
6VnX63pP85MeeVL7Svtf/bQ6H3p6q/ilmmT/LFfhx/V6ta1CD6mfS9en0JEH
MPn5HvIEHfnQ/TfKB+s4Vz1A+Wp380v5yAOYcnX/TdelpEc+dB+F9GCdjzW/
34dqkn2OVsPIj9LVD+vXyW2JHzedFet5lSc/z1WZ/UP/6Xpd+UZ65EvXJX2t
c9ROVTtH17mqx3UdpHbs/7KTKJ9xrOsksPoboFOeYvVH6Dqrr3UX5avd1pcd
p+t2XZepXa12nz8H0i776u0S19Iq59dajY49BB3s/dDVsr9UbXTaAab/SQ/2
83StjIPaxO8HN1WMM+jwD3offsaKeVvsAPG3doh92CH2aGeFXeX1cE7ifpok
jqHJ6KpX1e5CD0MH06/aDvXvar+qn1ntWD0XpH4t/g4/oKM3NH5I/Vnar+oH
1H719e9IvB3SWeEvZj4O/KmrWBdARz9q+6Ezv4HVzvV8zuwhnbegww/Vm9BV
T8Ev6PAHDH/AzA/kL1dvULv4Yzor9h00/kb9MboPofOL+mM03kb9KXruSP0f
On9Dx95Tf4bqBeqH/ab+Co2PUf+E13sdaV9+P9Lp/Kz+AuZD+KHzo9LVrtB1
DnICHazrIL9fnK2L+vALW3qdb6AjZ6Gf8zbu0EPQg/5rqxiXyGP5z7+IwwPr
Pg/f0fOs7LvzHeiUo+cASa/rJvYxoes+COWzf0v5ep5Uz2fouUPouk8FnX1H
3bfie3qejX1HXXcRF6DpsWN1nUVcAOMMexPM/rKeL+M7uu4iv56j0bhDvqt+
beiUo+su9Jf2P3qLedevezstToP20G+Mb+ZT8oOZp8HUm/5lXPh1c2vK/EQ9
wMgVmHGr+zv0J3zw5yPzFm/COEF/8Hc9b0B+vkd69AKYcezXzZ0Wl8M+ORg9
QXr0rfYvfGYdDNZ9BfW76L6B7ivwPdUfuq/Q1z4D7UE+kEP6DTmGDv/oR/gH
Vj+O7kvoPKnrMo0jgq/oC+QOOnKj+96679HXPgjl+/Py7SafYB//njM6/aiY
9PAZOv2gflzmJeql7aI83WdVv1Rf+zRqd+i+jmLmedbVas+pvUv9GEc6vnVd
qvYt6cGUx/gS/iY+DqpdxlVDqv4ssK4rye/jVOoq7D31P+m+FL/wV9fViikP
DB/7WueSHqzrWvVXKGa+RD41rsvH71abPkX++up3MOVpXAz93Ne+ntq9+ks9
FGvcFHTkR/mpWPhhdLDG3fn5u9XmB+QFOvICHXnROBrdx+xrX1PjzpQP2JM6
L1MfXXfqvrvug+q6gvS6L9rXPqnuw/+vfVPsHewS8us4pV/68iuDKb+vfVfG
EVj3Cf16VteJffupwRo3pnpd91017oL2aJxWX3459QvIuk39BjL/5ivWxbru
Q7+o/0TPc6nfWvwTJofko1+xL9Q/oetZvT9D1yl6/4WuTzXOiHohfypf0P8R
DKvgRxircWOdFedU1U6lnvBR4541ztr7S1orzkmQHuz1VoP1F3yhHDB2HL/o
LzDlaH4fP9ZgmHRK9/Z7relX+hP9hh4A0w9gPUdM+8H6HcoD97UOAGu99Fwy
6cE6z6Bn4APjE36g92R+sf0H9K5fj9TY+oLxAaZ88lE+uK9zrmC1a0XeK+5h
ID+Y/NgVfpy3Vtgdeo+D+hHULvZ2XiZH0PvyM4D/17qTeuk5ErWr9byo+rHU
PlXs4/LbK+xHPf+mcdLYH8gR2Mtrr8SBZudk1D7TdbXKi9oP4L7W6YwXyoPe
1zlksMZpqt3v/TitfZ5bBpNf7QXVz3qODax2ocyHFfuOuu+r+/rql9yrXJ/X
wniYkU+ZT7Sf0AufB3qB+UbP2SF/pNdzahrHpOfyoCOH0LGjoSMfeo4OOu3U
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
kR95kPoluv/g19cNqcYHKd3bG42J9+c3mL3A92kv2JVf4r+uh7z93lDhv4JO
eegzMOnpP3fuOM99ld+JvznzP6N/4SfpKR/M+NL7EshP/2IXaJynn3cWWHrG
v9qZ3k7rb+NZ7Ti1++gn0qsdp+te7ErSM66hwwc3XwzO4nV8f3Z3qV2tca+O
36V6g5mP6V/klXkR/enPXwxImD/oD/yJ+Lego4/B9DfzB/nxJ5IfOnxBX8EH
6gdfJR4q1fmN8v382mnlufdiS+1X+1j5o+9a+fMs9Tafg9GfpKNc5lfmJfWr
+v2G5qh/Wy2eAL748y1VFr8D1nsa3Pu7pf5Bf1GexmcjZ9jb0JkX1d9Detrl
/S91FfE+/h77KrOPwXqvDeXTL5RHOjD1c/biqHbTT2D0BfrJvTdZkifS6zlS
8vv5v9Xie9DnGu/j48JyFscBv8CUjxxBD7ja6PApynWFvwN+gWkf/UX7Qn3a
TD6pX2BfjB/Nc7/bgBQ7BvmGDmY8g0mPfUA5YPQLGD2q7wn5c+Ot5l8HM/+i
53Q+1Xcrdb3v75OvfNcc/UD5Gl/P3+GHn39abf8UjP5kXUB6ykOf0X7y6zln
6k9++K32up67pL+h0070Nf2HvkS/Ya8FeeXd1MYEezDIJfuFC2xeA+s9Nfwd
fUI/g/WeTtoJHT54f3+234ifmv4lHXTKBeu9OOgb6Ogb3Z/09y9k7xrSXv8u
+AIrl/aCaa+/j2aB7T/SXjD8R/4YT2DWV7SL/iQ/WM9zI2/0J/UAI59gd+6/
JP/IH/qL9R3yg70FdvZBT+X+JnKKfvLni1ttvgQjB358ZfuH6GPy+fm0KfXn
AZps/eHlu7fo2z/L7AXdvwPDN+w5+Ex/QKe/jilX+McY9zLN/O3IEfxCzpFv
fXdL/a9e3qcXmst/f8n2lygHPezPz7WYPFAPf8/7Ars/gPnY37NeZfMVWO/h
hY4+1HdHvR+k175Pv+l5MX1/A/qb5QI/LdJ+9eMwLjSOUM858H3kgPLBfB//
JnT4o34Pfe+C/sKeZ36HP/q+BPWEP/49iFm2ngDrexIar+XfCeyV9xpmmTzT
Pu9fXWDpaa8/31pl8dz0Pxh++Hdqq83e/e/nRGpknVYj8Vw1Zh/+d79TrdAH
GL+ZH8HIoz+PV232rN5rybjS/T99p4z09CPp9Z4X6HrvHfYn+k71oVuv5HOG
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
v6t41xh/5pCgB82fCfb32TVX3PsMv5kfytns/qvuLuJt3XpqUBZPzj6gW08M
yvyP+A34O/tzzO/obzDyAtZ3WynPv+Nem/h5oEneczd/r7wr3Sn8bTC/Lhh9
zDzHePbp6+2XcuEn/NH1Bvwlnoz5zt2bXaIjN+4cRE8WP8t6jPL9O5a1tt/r
5aC+4n4uf49Ts+yDt9g5K/oPHPRP5j8DMz+Wq5kSj7nI/KH6HqWkT0hPeXo/
mrsfO81L/G3O0oNJH+Q7i9clnl/ve/L3XSww+4Bzqvq+tfdf9E/8/luN3I9R
Y+nZ3yQ9/CAuC3vYnQ87JF+RnvJJDya993dl9wGC3X0HaRZPDP/8e1xt/n66
fFtFesqD3+g9/Kj+PPtCw9hNlId9Rn3BlI9dSnr607/ntbDg71dYYOnpP/9+
YY2s/2oSTe/9Gf0lHqqxwl7w50HbEnde7+fzbTE9/Qmd/gTTn5pez++7+08O
yYu/MvMXg917vOZfX2T63sdXN8v9dk12XhdMv7Je5pwifmDWb/DDrecG5y09
+syvT+rk/uu6ivfGSI+eg47/wt33MDiLf6A89SeiX8nv9rdL8xDno9GLyKE/
n7rQ+p/5A36gl8HUA/vGzce/eIeF/nbx5yU68wl0Hy9TI/dT1Nj+E/YNcc3I
EfoEbHE40X7x/oXv5Jz4d5Yeu471FHyCzv3ivrxa02fmf4j5qT/5qT/5ma/I
j/0AJj6Q8vDf+PV5S8X9it5ebalYz/v96DrbLyR+AP5y7p3+AJM+xBNk6Vl/
Ml7A2NusP939OD05/75TCcOvcjFjcuZ/Qn+7cztJRmecMx+Bsc9D/X+0dS3x
ynq/I+nxF2C/Ux71BVMfyqc+1IP0YNJTLumRN9KBqQ/yR/31HSewvz9/fsH7
B/rLO03ZOVbOkbl48Z5cqvcpsr9K/7h4lnxGp3/8/sQiizeDX7p/oekZ12DW
w+RnHYp9SvnIJesjyqE9YNKjL3x8+XTZT/5O9je+K/j7E+YUvH/3e0sPJj39
Q3r6Gzr9TX3IzzobDD8oj3bQ33yf/gbT35SPPoI/YPf+45icpcd+gI6+kvPD
idtfL8mDj69srcA+fk3j2bL9R+YhjWdH/tE7pPf3dHR3IT/Mn9gNYOisF6GD
KZ/0YBf/3S+Lb/P3unV3IV/kJw4ADJ3yoLt4qhnVEv9W7fc/R9UlGq+v85GP
p8veU2CdBR3s4gH6tVZg15+l/vbxAln8P1jj//37DNl+J5j88Bs6/AbDHzDz
tY/PzPYHwdBpj2If75f5p0J7Om1+xW7y9/XV2/xZ/vOM+or0/r7NevOXkd77
yzKM/kC+0B/IE3YgGDryBF3j86gPmPqwn+bjNbPzEWA9/0D9GK/+XtVGuy8I
7OOrGlI9/+3vG6r35wdK/NL0/r6ReovvIT36Cv++nrfw9e00/YZ9jB2O/YW9
g/wQv0V65hF/rvg7O68a9Gh/f669hOF/qHe1+cf0fg7GCfM1/k7ma3f/XD5L
z/glPf2PPIORZ+qDPDN/UD6Y8plPXPn5LD2Y9MiPO4/fmPf+kyHZ/hf8AkN3
699S/f172PUWn0d7/HyanT+Bv+4+pBJGD8Fvd19GPksPdvFjSZae9pMeTHr4
QXrW28gPmPTsz7EeQP5ZpyD/7j6P0vhz70+V+Ofe07BzQNV2HyZ8g5/+vZp6
i3cjnRs/gzN9wvqB9oBpD+sJ2uPjUxtTf19br9HdfXwlTH38/bu9th+s90H7
90HrEhcfOKip4jwPeEoY3xa363/bJB64ze7PZLxjT4V5p8roofzqlP4N80J2
/xvzvZ7D1r9jJ7Be0HT8Ui7pyEd8t7uf6Rfv1nj/bxaPq+d9wLG9Ff5/1mlg
4l4Yb+ybMb70/KHGQ7DeKpd3bmtcj06x/Mz/8AP7GMx8AD+wf4nPQH+A3XvC
57ZGe3uKnffE/wUmrp39K+x85IH9COYT9CXzK/oYeXX2R0nOvD5qS51+KGHG
G/4bd76ohP19cf3NfgGzb808RRwk/kvWadTH+8fbTJ/b+dHIZ+L1le78CefS
v5OsPPKH+jRXnD8CExdPeeyX+HitKtmvrrLy8TP6+6oX2Hkl8yfH9Oz7g/Fz
Mr7K3ZDmbXzRXuQL7N7PKbUf+aJ8PZ8EZn7x55Wy+y+YbzS90+8ljN1Eeu6j
ifKs7yWZfLDfinz49DNsf4D8YPJH/lj+8UEfejysRvxV/c2+BVMe/nN3H8+M
ajmflfP2fQm794R72vz9Q6X5Hcz+pfe3tBlmfvLnreaZ3wj5RB7YlyI/8Zzk
x4/X173YxCdQHpjyOJ+FfKLvkW/2Ud17sqOqJH68yvyZyIuzJ0sY/iF/8At5
Uv45f0OJf+qPcvZ+CSOfpEc+6R+9fwt7D37796+rDDP+WS/QH9QH/vv7VHoN
w29/f2Jv0cenzbX1CP3h/U2LzF8EXd+Dob70l9tf+rl/YnvBej+CW7+X9BH1
Rd/79y/7G7+3D+PJ7ptjPgAz/sgPJj/jkfSMRzDzJfnB7r3WSR2Wnvn0v+fP
zmdQHpjyaD/5sb9c+0a0yXnLzF+O/cf4AtN/2DWMd/xRjFcw8sP39DwgfiTs
CH++ta3ivDzfwz/A98Den1jv41uGNdp8FMZPvcS71CbUB3sF+yLIS7a+Zz0A
ht+yn2EY/par9Yv34oP9WCfn6Rsq3iGHHprXaOfh2O9j/Yr9w/qV/uM+AvhD
nAc46isbL2D6m3WXng9gHPJ9/x5QbcV7cXwXOljjVEK7W2y9RLuDHFTb3wP/
qgyj9+AbdPoX+caf7+PxMv8Q3/fvhrb69+FK9p17H70k3+697RJd72Fw8Rql
+uL3pX3eD9xo+8U+3jaL79D3zZw/ZWD23gP2B9jbKzMsHkLjef05i0Z/X1Fp
PPn7hnptf8fiBeJ8ir7U+A49D8P3wO794bENiX8vodGw7e/H78F/vc+F+QLs
9o/OxT6dZOsL0mMPg2kfmPZ5f2yjn69KWN/7xp9De9AnxDf48yethtFPlA+d
9rB+oz3wh/z0P/qJ/GA/v8yU+OtFpg9d/ENJPvDzIs/e79to7835OKkG0xNg
/CnofTDl+Ps36238oR+wp5jnwYxf5jPo+M98/EWjnV/kflcwdMYnegv949/f
qDI9B4ZOff25wHj/Sz67b9zrxf6m/6kv+lX1CfqA+F/8l2CNX4eOvnTx+iW9
jnwxHyB/rPP9fcVt/v3bfPZePNi/D5/z79uV9C10xrPzB45oM+zvx8veqUL+
8Acgr3qvc+B7s/ixW+Sd4ha7L5X+cu+65bP3GMDU37+H29/OfyOPjGfmD8oH
Q9d73ulf5in/vssAiefJ3rNAPrBvkAf8LWDvn2wyOt8nP9+Dzvfc/fIzsvsG
waynmN/cfcz9svgh1if6fqO/b+Vb818wr/l4+OZEsd5/g38B+wc69pSeX0Vf
cp5B40eoH+tBtz88Jldx3wnrTTD84Xwd60vuywBjFxB/wfoa/vEdf5/yIn/+
YUZ2XhV+SP2NDj/cfVo9Wfwi7YVftBdMfYmPoN+Zn2g39intxP4EY59SDzDt
8fehdKSy/kpl/ZXK+kvWg9n7mGBZb1l65ktXXokf9MeQMB8Yhs56JsjBJxZP
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
m9j79A/+CsYz8SLUH/3q7ymN+w+l9UrgG/cntdq+LfJJvVlvML/affoRM28w
34LZP8O+8u9/tnh7tl92PyTxDIE/H5j96e8DyjDtRv/j10H+2I9D/iiP+QB7
VuOF9FyE248sYd1/ZJ3AvOju9xlVl/j1cJOdV0T+/P3aA+z8FONF4x1cPHpP
zscflDB8QH7YP/PxfwvM3tHzjPSjv/e2n50vpF/RU/CzDEt2rX+fPTuPZ+9N
xfGNHgYzHpCfKWG8VLy3qOsl+gf7BxzkrXIe0nPDzP9gd3/F8dl5B+joK7C7
H+P4LP6fcgKf2lPn1/pF/D3YvSPWT+6l+kU8Pti9E1Za97p3xX4Rnw8mPfac
O9dR6kcf719l6fG3kl7j9cGk13NJjAc9h0R6lXeNjweTHvkmvcYpgf07Z7W2
btP4ebC+A+zfPcv22cFOr4/o+10SMOXib2K8wz+w+reRL+wnf198iz/P0C+L
B8a/iv7DLnXxXKOrbf3GPIf9hb718dlzCi6+qN+cgt6fx/4h8R9g7pOiHfDd
2Y2jM/9fnK/svgb0lffbN9r9SGDWE9hnYOwB/F3Mp95P2ejjtXra/HmdfOaP
0X2q8dFe0bgc9BX7nmD6BX3BfFbxPk7EGoeEXUZ/s64Ds95x94cOavf3F5cw
8xl6CP6jt1w8Uj7bfwr6NsNlOIb4kXk2PqOetPEAdvfgltYV+KFZryD/+ks5
yA3p+R7rJfS22pPIbZifMvsRu4fzfPhXsOewr9CfzIfl7LxvURqPjDMw9cH+
oT7YDcgDco48kJ75KfCppcI+Yr3HeTfsIcYj+hP50fcXxL9u8/ug0H7//tGo
DHs/WF7mk2y+w670+zqKG2W+a6iIY/XzWzZ/MQ7AOl/pu1o6P2Fvg3U+0ncx
df6hH/z8VSt4gMw/2fyi71wyn9B/zA/kc+8LlOQLvYK8+Puqmk3e4BPpWcc7
/0E+208uNzvJxnPop+4uxiHjz9//0yTxYM3eP1uqD/MF6f3594w+bImbexot
7qYzPeiUr1e5a2LO/F9g9OH1j08cuMZHueTVG77oObmpOdl68Eb37Vvi41bh
N4043Sb+/dHLij8ttWW77SvE7yTbFs77dMa2NclLyx//wV7teXsvB3t4u3VO
GLDfW/YucrpNSG/rqB33v//mxYYNoHyLEwXzvW3OSR4p3NOe3L1vx5Xds+rt
voVdY/5HYv3Iv3VIn94T0ifTht+yxVdLdiSnbLXqJlu21SaLpncXX/hPe7LM
8oPGftBbn9y3ef1iravk0sPvmvbiX6s70jOu2mvUcpvn0tYLZrfXNOXTSE/+
FOlbC59Inwvptbwk0pP2SH9u2/l1U/bKWTtOmb7GtTssljM+/btzj9tWbs+L
/7A9nXzqAVOfPbLe8sPHmN/65YBLTzn7mX9kcdHrrzXoiJnX55J7Zh657MiD
WtObYvl+Pm5P3wjlp0Of+uHtKydl754MiZjx+t3E0UttWZKLp67b/po1jsql
Owa62Rvx+7af9N51S+a3/Pl9lIlPji2lT/7yw+ZvXL9TPt331fV/teTudcmb
E/e9aJ+Hc2nLK6tc9cTwliTWN30g1Dc5NqbfJ6S3faTHBx01eYdj6pPCtPVu
Oev1vMWhX3jQXRtPe64j+XiTWy/Y9Jia9Mm75rbdeWlHsn9u2ILmy2vSSwI9
/SjQk2Kgp78PdPNnvBr5MWpgV/3bVdm75xfH8smfxvLJH7+fTvPfT4fF79Pv
uwX5TU+P5Wt8+I6ebnEVA0++Yq99ft2Rzjiw4aClcrXpUgEn4F9H+jcBJ8cF
/iV7R/5hj3TOeu/474fnktg+s7t/d9wZMw/Ztz3ZfbH5KwzeqTF9Z82el/52
dHtyz7DRV8//sCHdJ9DTPQI9eTvQ0/sCnfzpLjE/9Ht9/mTvmJ/yIz2J8mnn
CbAn5kz7ftGcM+ts33TtzQZeevTrtcnADx9se+GQvNmnQk+XinQfP2j6KxX9
ZPrxpaAf02Ve3fD86XNyyY2/+vGZqWc0pZGevhb159KBnt4U6Mkqb524xtkb
t6erHfqH3z79YWO6asDJqhEzb7UF/tv+/TPdF49deUit7fv+o+HtWQe/X5Oe
1XxL2/CRHXYfUKQn50T62YGeCJ38yekxv38fyr6X/G6V9Z85uCQfy62+7Nx/
71ZH/ZPVQ32Ts3dd7JpjXmm3+1xo3xqRLvXhe3Yf29hDdnphzJXttm+OfdT1
5GbH/zS2IZ31wtu31i3bkd554ZVbLt5Um86L+JaAyW/71tifm8T8N8Xy8RdL
+ZYfOvk3jvRLzt7pN7eMy6cPr/vJV0ePLa1nIh4fcHrCVfPmHDu/Pdng6Y71
/rZ4Pfo+aYvzwzWP3jXzkm1yybF//vUL29/fnr54wV9OO/yMnO3rML/yi/58
OujP5LAJ75zx8W9yNm/KfJMc0fziRgOXziU1E6evn17dkbTPvab6s4dL8+VG
Hf/83Vv1fD89Ln5f0ps+Zj7YuGXgv5seLc1fe9x8zN5/bEmv3PPx7aZel0tP
2vSGt3c9oBV6sn2gJ1cFenJyoFOftDrW5+rY/vh92pc+GeeHaH/Yvi3j5xU/
vtLr4vg6K8ib7ZfNOWm9XUduWxpv6/xrjZUfaGf+S9Cj2NXzgn7Q+qWkl/mS
+TaZdf2vT/zqVnBrGuejpDnMR+lOb705ZsbjuaTuvENuHv/bljSO9+SWON7P
3Hvc4geOyydXvXbTk5/dlL17tVbUP0sH/WNxcx3rftVxxF4dyVFzvj/6TxNr
0nzA6ciAk0vb+x295UXtyfjthhxz+x8b0tjf6Z9DfyejAz19ONCTWF5KeV17
XT3vk3VypicbN970jJ0r3inLpYtF/bNpTE+9jw/ynm4U5D3Zd+pyR779z1wy
7dD6R/+yZls6fP66G65Uoi991jkPvfereuP/3Kifo76wuBjWT09H/dYb+G3x
JJG/aWPgL99L4/eSJTb5T8t7n2NvNyXRHkz/E+3BjsifI+J4mB30R3JH1Cdr
r7vy0Ktfzfl703ty6Ym3r3bPeq83J7E9SWxPckbsz6tDfybwD709dPNt2uZs
kTM75KGB51b/fY9cetSajSs8v3l7sk/Lgd8OWiFnevjRlpHPDlwhn+4xaehh
M++tSz67+IVfX/y7XLrXkaefc0RbexL7y+at22/b4tEFSzbbvLTOyEtvOL7W
5q2U9QXynx/36ZOHbFhn4+HVmTu+3n1Ms+Ezu8875e26Fht/5Ad/333TrONO
rrP1whn7frpbWlMv98cRr5/VY7m/bvnPlfasMrpbH9s9AHPNf3Lh3rNX/+J1
4uc70/U3uG+jp/78pcWRsD5nnF4U05O/YdjnS1300qfmDzjompsO7H3tU3uv
6LCIyd8o6Xc8e40tZnW90eXemRo1qYvv+/NCcV334ZddLi7txje6sMvXfm7z
S97Y+aUu5Gr9x9sGn37mq1aeK6ekZ2J7bX1IuY233vXkN/3rzd6H7nFnEvmd
nBH7k+/SL8/etNLD+67VYPmhU864SJ8X+9ufu+vugm/IE/i1KE9g0lOv6/YY
dfhz7Vk9H3or3WyDZZsNq7w+Naz9o7r16pKtxzQ+8OyJ7eni/970wy+Obk5e
+3SXI7bcoD3tvPf3Mzae12y/Kq9vdG67dfdxdUnjv1e5cmaJvv2Il9qO+anO
fv+7vGbyue/zZ9347ucdyeX9l2x4f89KeVV5XDN+d+4Ks5dY78YZE4bEcj5Z
6ci1R/5jvPU3v9tEPn10fc1yQz/qnbD6Lv3ev2WL9vSBsxct3jPr00L7wtzf
/7VXVXrNc6u9vs7in5k8IH+Xzv2uvXZhLqm9+LBF/a/8VO61mFshP79/4+kx
tzfXp/n62a+te0el/Ny1zNy5Zy3Tkt74l7V2b67L+pv+v+m85mHDTqtL2g97
unvw4Ep5mFqzx7i2rrrk/d8fsPXHb+SSdcZc03j7sc3Jzo/dtulTi1XKw6pr
Drhit8Xqkof+cOU3vdd2JBfOb75p5IrNyXq/26xwaXfJnhnW/PKIJ9rSi8Ze
3zt+15r0jmW+2vfMy/Np1w298ze4YWHxh9P+curDF+XT7hEtj59/7cLi1K7m
0+b0tqVLbrbX+y+fu6B4+kGTR804dEC64z4Tdxjx7aLimQEnO0R85F1Djlj7
k9Zk8/V32HqT0xYUF4Tykp5Y3l3hewnfq1t54vPvHZVPJyyz7oSt7ustXvDg
RydvMKgxWXTBnOcu+PGbYn2gJ2mkj12uc5spN+bTf336/RMXPfNWceIKOx3/
wJn59PtJa455+IG3iuM2fm2Z3vvz6VKHfp2fmb5RXOvl2Z+89Flb2vzYHcMf
z79ezB346BeNbzWmVyTFD+a/M7m4TjJl7JTf16Trj3zw/R1eeKd46R1XHZve
1z/NLfmr/PBt3inevs+Wpxz0z5p0j3u6X9r36EnFecsVV3/ir4uK+7Wuev3V
G7xe3OSlj7e9ec/e4ntnfVBcfuCbxSPW/PrQBcVvCyu/O3+1/JDJxbVOXnjO
ow/3T4ZeO++oqxd7p9jzzwO+/9XFjclx/VZr3uHmycVXQ/2T+bH+Zw6645ra
O0r2zIr7LrHBPm8XTw84vTTgwuqxPVuF9hTysT1jQnsKT4fy02NC+YX/xPpv
FupfWNO3t7Agtueg0J7C5rE9H4f2FPYN7SnmQnsKB8X2LRXxViF94cuYvt/y
5fIKh8Ty1ont3yW0v/Ccb39hsVD/5LpY/9hfyRaxfXeG/kz+FPqzMCnya1Hg
V2HMgzVHj/upMf3m/XO2njn628KZQX7SOUF+Cg1Rfp4O8lO4Pcr7JkH+CtO8
fBf+GOQ3jfJbGBXlfdcg34XDvXwXPg35k1/H/IuivMfxUxgRxlvyzzje0MN7
TvxmhX0mL7D40jefO2nINjfPs/n5uH1Wvbr+P4vMPznj4Jd3/2yxhbZfNT1i
9ATlYUe+Fcuj/AfO+/eEM+743PafP254/ugh1Z8Ur478mxH4Z+c3nll81iqP
Hfel7a89HzHrqk9jfuq3yg+Na736zevZeenh3x8z+LvLusDVJ7961V33vGnz
wFX7rdiz5dDJpu/ZP/T7y7dMcDh9t4s4xDIe9cwEh5f7yPTytbF8+EX9mocf
1XjomOycHH7LUN5zgnu6aO+tJ/T7+odfL/E4eKu/1Hz9wzVLbkb7b1/3+i33
ueZtO48yLfCnIPy0+YN2CX/tnrQ7Y3nnRH04P8rz9aG/kt4o79Tnk/g9+n98
6O+CyFdB5KMwPM4HlwT5NLvh+CB/lv7BKD/gAwun/v29f6Rd4L8UTz9lxRMn
dvG9B933m9OHTjhor/p1Zln7Hon4pv7Htm66Vj49+/u9P7p/1W+Kv1p+2Tcn
TW1P73pntxva//R88fPzeo4oftyenvL84ktu+NqzxWMfe7OhaqXW9P1B2219
6ho9xWcevLF+7ckt6b7tr3adck5P8dBJ99ZtdGJres2Ff7vy3f88UdL3b1/8
5l+q0w9nnjTriqe6i9+Mn/3Azfd/WFiu3xKHPbb4s8XLy/p+diHo+57i4LJ+
nFPYtKwfe4rHPbxzR924HwuzD3h93uwPXyoe2f/cu1+Y/1OhedKDuzR3vVg8
M7/2hrtW/1RId/jsso1GPV2sur3+22W+q0kOG9o14utDXime+PuHTl6utI7Z
5q3j7qz/7QvF7Z+77dlFXw9IDhq3zGkrHfR08ZRd1tv31qdyyYfJ8w89MeHV
4uUvfHRR3Yodya7jnuu/1g0vFoN+m18M+u3DwmlleZhf/LosD1MLe19w+eVn
LNWUrHTHAYu/vPVHhSvGvfvMcat2JEe+e8/7A5f9sLDLHRMKR+zTmv7xzrNH
rbbb7MJpx/9tn7PurE0v2GGf9dvGTC8eel7vRbcd1pHeffBHw47Z6MPinIe+
3eOdv3akb77z8vTa375c/FuoX/pWrN/H3x311rdrNaX3LLfz35t3/qi4a/h+
unz4fvG8S57de88vBqTPHDj94gsXf7p4U3FCS9282nS9pyav+N0FE4oLrxu3
3Xul7z8z9Z2Tn3n8heIJYy/e8NPemnTahZ2zbul6onhObN/3oX3FPwZ+F+H3
qYHfxScjv28uz29zivuX57enimuH/iuuF/tv4GFv//HQ/T4qFpZp7lq+5rmS
/ir3f7Ex9v/6+3YU29edXnhm3NTlLt77yeIl4fuF/v8M399nqc+ab+g/v/Di
sXvdc94WTxbf2/6KTV4cWZ30O3zg4hfd/0wxH+Qr+SjK1xeBP8l9kT97xv5Z
MfJn0agHZz22d2vy7e/POP/ukU8W919uvTmXz2lPlljy06bDxj9dTI+eutmI
MzvS9V5d8Zx7Pnmi0Bv746HQH4Vv4ngY+1x5PBQOi/13X+i/wlGxvwaG/irs
HcfDlIvL46HwWuyfgw4r90/hw9ifd4f6FvaI/blClKdRsf++eq7cf4X9Y399
dn65vwo114f+PObDcn8W9vv6N6/cOasq3XvLpn+t8/QjhY44/qYE/hROi/23
MPRfgf7dOvRv4dkz1t1/9p/mF6+7557V1zzymcJqsT/XDf1ZOOyNKasNXfGr
4nsb9L9q+uaPFgbF/t0x9G/hxdi/M39a/Of+LawZ6IV9Iv39OP7rQv8XVoz9
f0/o/0JN2X6ZUfhT2X55urBO1Acbx+9vEeVhlyAPhTXL9spPhf3L9srThRFR
P2wV23NW1A+0N8p3YV4cvx9GeRoR5KlkDwV5+iDy64SoP/4v6I/CqVP+ceNH
SzYkq//0zaRrJ/YULoj6ZOK9ZX1SWOz0IF9j9y/LV+GpoB+TV4N+LBwd9c2g
KB/nRvm7raMsf4XTo364MOiHwnarLthmtVk16Qet3a/kx35VODPQk9GRvmOg
J59GOn6Xl/Zf+i/t531h77HW3TCy/57fflLc+JWGy1aYVWXxAMT3nL/LG7dc
f8vnlv6Ynd6tX27dKXaf7c4rrfbT7cu8Y/djvTT9/uQPw98p/unextzCrwdY
fBv7NN8cc89dH7S/Zef/Wpb++4Pr3/qM3ed18oKN9qr6cJLh4atM/u4PtVPs
fpD3vv/dMTN73jL6Mbds8e8LX3mwC9x9+ch99r9gUhdxGE+V5+93iuBQz9ET
HF7unS727Xtietof5uu37DzjgQM3nTCz5km7f3JkrB/4lFj/2H67L559pNmx
/fj5Xo78svNQkb/gc3a/bpnxp08y/o8IdOvPASfOmTH0tNctLqI7lFc4I/If
ewb+zwzft/ib+tD/dp75iNAew38L7bG4iXcD/wvw78nAL4t76I4Y/r0f08Of
U2N5W0V5Y30v8lY4M/JP4+q+jfWHfy/G9sKvkZE/1PfcKL/QG6K8D7nqz++f
tHdHsuK6//f6HS/MNnkc8cO1D+691vt23/32h901aPM7n+sC73v1HlOe3LOn
64QrJw+67bPsnhLqd9fjP+09tG3CBPAV66WTJ/Wf2jW9Zu6PPYdk945gbx/y
cXXbfp/0aH3tXqCvTjp+tzXefcnu+d0/ppf22L1kL4fxXdghtC9dKbTP7Fvs
QDB2MZh1AenOWma3R5c9OfMHYTeD/Xu03DfTa9itA+y+mIWF6g8mjdn/wgaL
p8dejd8zPmGH/9d1gd330qb5tf7JU0NvPLT5/PZkk9ql/n52b1Vy4XonHP7I
OfUW7zel/l+vHTCgITniN18dfNYe1ekDH2/78Mpb5NJrdhxzQXLfHOQlRV4e
DPTk2kj/sX6xmpNmt8t9wQ3pP4dd+uoOd79h79lcGDH0CwK298cuinj5M5Y7
8Fezs/h//OqtVd+9fPHDnxXi99Mx4fuF8bE+10U8YPPzb/3N8h3JtEMb9lru
gNnIQ4I8vDBvl61PPD+77/7d0P70qNB+46/dj3fyi1/Vzs7OBxEf0RLqY/rx
mDh+yI9c8j34vesLa9ccPbE+PeymO+9b1NQ/fTr2z8ahf9KekN7u01z2N/+p
/lNjQ3Lvrt9fdsHu1ckuIX9yRMiftEV+wf/IP4mLtvedkvVHbHLITvfVWfwO
fs7rX197z95l3rfz/bdEvPaYvb+aOSi75+/byA//3kp72hz7h/wzJ2398KXz
X7TzJT/Nbzttg4EzCn//bN45k0fU2X0f8K/6B0e3+0/Hfzz7lL+9Up9OKLZ+
/PaBTxT3LGzz6mZb9kvu+r+vBl60w4TiD7l3D1+4dr9kj4Nebihsf3dx4TEX
1Fybq0tO3WfqkMH7PVI8aXLutp02qUvWe/3gy94Z/UhR+XHmwfcMv2RUR3rz
1CWbV33n++KTS1974IYr5dKtf5qzx6EHTyl+/c3W7ef8vjVZ+HX1Fnc//07x
6UBPtov0iNMhARfOiuXdGsorPPf50MeObqlPbp89/L7ht9elB83/zYYXHFqf
3Hb+bqOWOa8m7cmNXHeP4W2Jn6c7kx9/9e1vXzh+vvlLhgz52yon3jizeGLk
n54H3XXdS5r2GfohdDsvit7YPdLRe0ud9MA7Q795rnjnhJ0fW2d4m8WTQX/s
hDK9MDvS9d6twpSJu53x1+w+h70DLnQ/f+ax937Sa/f7zohY73V/e7+rz7jz
qUfs/ZnNYnng38XyaN9uof62/o/8KGy3yg3n/LFUP+bhyL90UeCfndfYI+ZH
n+Ti+LX4tMhf8HlXLHPZCeNfMLxlwOa/GBq/P/yGiSdttlo+nX7FrSff8u43
xcvmTVyw23b59JrJY4dXfzWzuPXflr5hp9P6p9f/7dBNNvzgi+KjPRvNHXBF
TZKs8J+hS2/yVfH73y3Vueez+eSR56fdeOPqM4vrjPn7tL16OpJrR56Su2a7
mcXORXt2rlPblh5zw2Knbnjl68V71p/cMfPz1nTniw9e54cNJxafvmrZ2T8t
1ZI+/O3RWz501qTimNobG5LGljS3wUPzpuzwSnHf5058atZJLekxN/7rhf53
Tip+2b7fD8lW9eliO352zevXvl6c/7slBjXuXJ9OWv6O8wbVvlL85JXH3ht/
RVV60Ia7fDt+0cvF1Xdpmbrb2guKr5z1/I0X7/JaceayP201eOCC4vXDHv19
9Q6vFX/8cFTvDr9bVNjlh0nXbZzeVvxzeX33Y+HIf/68vru7ePl69xS/ezuf
vDrm5OdXvvPe4tyfvhyw+qLW9KtB8zd54w/vFka813zZBRNb04aFtx626XUf
Fy6P/u4lgr+7MOTy9y68/N7qdOYraza+NvmtwuiDblntrTfmFVfebennTz34
g8KJvz1rzaY7vit077f+e/NunFLYoWz/zyl8XLb/3y0cMmKbS7c+uCZ55e26
3UZ/905h2tCvDtuitD644dm5+y350LuFlx4dt+LZa5f0Q+2QXe/Y5L3CJ4df
vPu2i9UlX9f2jvxy8fcK/7f0nya//l1b8uy/7j57r6WmFJ6J439oHO+HHnjE
sEn9c0nT5hsOGf+XTwpbft54yQMr5pLPv51w8LDzPymsWfY3d6RDyv7mL4uf
n3NU8cpzO9K9L65brn7qF/R3Sn8f/d4zT2/w6460ePei1T/Z/YviQ0Fe0q4o
L0Ff9U+CfvmiuO+U21ZfqTaX7n7U0InLHv5JMX4//Sx8v3hE5G9d4G/x7var
ltmrKpeuPfTwDUYu8Vhx6xH/mt47uym968I9v7n/i9eKPa9eOOPJp5rS2046
99Jvv3yt+FzgT7pG4E9xWuBPOj3wp3hh7I/lQn8UL9hpoyl3PNUvvXqt9r9O
Oem24unl9V2/dI0tfl7fpcV5QV+n20V9/V2Qn+Kc+UF+jgjyUzw5ys/I0L/F
CaF/i7F/i9NC/xa/m/7z+r63+NcNfl7f3148NsrDUzH9HlEeZsT0597dvV1x
wy8LH76x42c7v/FoMcpTYaVY/8Lmnyy6qXte4ene5b9ZdptXij1RPtaO7f88
ykdvbP8XYbwkh8fxMj2Mr2SJOL6ifCf1kf/DQn8le8T+2jrKy5exv+6L/XP2
DuX+KTwTx/fTYXwX9o7j+YQwngv7xf6P5RWS2P+fRPnbIvbvnaF/Cy/G/r0j
9G/h66gPOkJ9Cx/F8X9gaE+hO/b/WnF8TI39/1kcH0ns7z22LPd34avYvxP+
UO7fwqmxf1+bXu7fwk6xf6tHl/u38NevQ//N2rbcf4XYf8XYf4UtYn+/Fcfz
sbH/Pp5c7r/CRrG/ngj9Vdgm1CeZsUWoz4xoHzwb67NH1E9zLgnfvzL2/xpR
n0T9lxwW279W29HjPhlZlzTc9NZ+W067o3BetCdunVy2JwrfxP6O+rQQ9WkS
9WlhZOz/xqjfjov6cOBlZX1YWDeO/zFh/Bf+tcTIs/50WU36r88mt96afBXt
if7pLWG8F/4Rx//tEY8N6ZObY/rh37+93QcPdSQj7ug48a9LfVn4NOibZM+g
b/hewveOCfomSYO+sf2CzhGXXDL5gXdtf+VXEbN+njv1lZrlN5xgeN8Py7hw
btle+MneH1r88YDdfUWl8hcL5dl6u/6bh45Zdvvptn+weKSfteJfDxp3eH3a
evzQDVZ56/3icstc9eMHJfuH8x/nhO8V5Ht27uUfIX+Si/nPieXlA7b1eXP8
/gvBHrP3qSZF+wz7Arv+s+lHDLhk4ExbzyzzQv/Ors8/KJwXv9cZy1910usn
7jE1n3w/Zf7db76Y3R+KXaHrhdi+RN/JgK7263r7d59Xd2+zxfNFbPHe117S
MqT6ntb0+O3/OuiRpevSaP9bPP2mxx622IqLGtLF1njj23eG90vnXPjviVWz
s/dZse+nzXhw8r4T5hZnrHVq21ZP5pLV37rq8Fdef7j47H+OvP3JV3JJ3SZP
nHb/lg8X6x/99fP/KOaSc15Ipm9y7APFDx8JeLEny5jxlG777zCe3ov9v9E2
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
2vo5bX8lbX2dtv+Stv5K2OlFW7zzjijfoT5ZxtlXOT/CuAHXpVrynpBXqbb+
S9v/SfDvqM+my1Bf+xDlzwHIr29A+dMW+XXBP2drygNUW7+m7V+lrS/T1ucK
PN4+0STY85ktL34yP+ukeynDNhXtdJBPufSrFPp00MfS/dWGxe91VfHZ3y+8
09mqS9+7zw7oW1XFD9zrMb7fuX/1dVF/S7dvGLNh3GQbenFaE59b5fXoIfg9
nYW/j4ff0/34e018+lfnRvDVmvj5r16XeNf+V782Pmv3C7lCcz7z/9mvjf+i
X+DPGC39tJB/RFvIT/+rX/u+aPdr5HP7/8Qva/dr3y/RP/JI4YUNo2z4+pEe
va/YFrDnTmdq7O/8Lz+8ssz2Ku5jUGGoO8tiA08mx0W+seYZEfq++ZPypX+x
sC+J8TX9g/5vfKp2v/b9Fv2jYH10I67vq5nTzgEDy/Bge+/uFzzC2QDQp3Gh
f5wM+jZ+D/WPgi6tWDe6rn9OAotHfV8V0PfJ97gu2MMYxrvS2xDvyqLg/aIn
8P26C+8XjcH3C9s8FtokFsbnjVGfKMZ3h/lJUxz/LsbT4vtID6N94D6OH4fj
Cfh+BvgSlRJ/W7YeJf62gLyE85Lyr8g3cx/OS9r/xO8FfAUfINra8bna/dr0
U7tf0AvR1og7///0a9NL7X6NfCg62vHk/7dfmx5q9ws+RbS148e1+7Xpp3a/
oHOirR1frt2vbT/V7tf2f9S2/wg+VrSFP+P/6td+D0X/rouqnT3Gqfiid/WW
Hd+ly5H+cqS/fD3GIw/EeM3fP18kntliRp+uHpjfNKhU4pPQ93povh9Ei/7z
A0jv8b3gHzTpPXdE/cN71Ed4aL5PBOmR1A8J/A5AejQJ7/sv1K/jfZD6IkG/
ruN9UG/0LZ7exVjaf0T8uRXEn/Mtuvbn9Fsa82v9nr0YEGDI0x9c98iaaczb
9g+LXL/LgEc6JM7io4y5X8aMhlNyDDjGn3OMP+d2GS/tl9ww4r9dXmeHfzLl
mxbolS5xtZT5KDB+Q8s/Vxft1aksNMDF5WaoLX1YuGOX4+M8Zu+7c8D6yYWS
LtoDv08HoX4F+X06A/UrIg/tLX/HNJvxsX7Fiv1PV8v/Vc5HNPHsg59Ge+03
9WGQx8lclMfFOAYRf/UBj0gYrJf7wXpJ87bBLbZPs+HjDbs6OVnq0Y24f3F/
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
Sdvj90LvvBLp1Sh1rfnh38ykf4moh9ug6t00r1ecBV6Jjh6T+69OnHgv+x8d
eNOzbiDJBn0Q06wrk01WIb3LQX2RZp0aU6rO6v58wM8IsgfnF+OL+Z/A/LIO
TxbsjyyA/XFRt09rfwT15bQC5mtFfTn1An05RX05bQf6clqknp01d7QxPZH2
4ezdbAPaDvGxC+AjQ/yl8/G+bFM3+5CyQo9vDC+Xs/tQDAvp9GV67TdppHVG
hbdO298yD+inm7Ef23wrtMlO7N+Oba3zI/Px/MT+RN7dfvCXOoM+g45DfUZj
vL/9UP9XGe9vCur/xPtRHeAt9HdM6O8EPrVD+Nkhv6xR37CMH7oI+QoZQ32e
0LuId3HjIiMdhxoBpOYufv9OeJKUvwRf/HXd+bH5m/zYkLZf4i6mfZP12kS/
Rat5oXXHhsr7chnnw/XI+L2hKB9tGq3IR+QuyudBnm0fDGYxUp9e5UraysnW
YdKO1hH5ObEfzLdJ/Nr37vJ+hi2t3O+FRQPfL0yMlxgemWPTbL4cb5jLROuF
/o/U971vVLVKMuVVe3Y9+HRlItMfs3X+zRFmPK3i7pOreCI7UWp2W69mOW5p
e2X6N6sYtgfyD7JymH9wgBLvksMg3uUlw3ys5BPmlz0Nv6cq/P1DmI9Wx/mM
YT76FefD/LD0COa7nQfyFm0N8hazC73lW6ezJR1o+6jiGYsIdq9geL9TIZZU
v67X2uPTX7FGPZxbrO9iRav9qhPwbmSImJ9bwPwE5+c4P/kzGvabAvOTA7i/
qrA/0hP39xX2RwbERTVpMu8PSeoVeipVL0XmH9qj8BufiafCb+hQUQ9b70qR
/6CtZlS11vNH+sZX5BzCwxrX44fwqInrMUB4IPwlvfiB9HA60gvN+oHCDquV
D1TntXoT2h/Gov+3E963yaiPF/iD+S5ZF5TnxHu4D+xbvKRpi4YGV/Uo6hNl
fV9dO7cjyzqayPrmwI9Z865A36U/VzdsZ66cFtFhiwlNuJXl9eZbJOtZcqvR
i+cm9MXgRSWnTKNEP0+EfkKhnz+DfqI1PvHD9Yj5l0/cUe3nMhUf0XLHguSa
IeSOQu/0kD9Ik/FkHb/2XzB6VyGL8ktJra6ylfW/Tr00NzwcbUuHRZ35oXqV
x+7j7+G9TyN197ms+uiYSp72C9/+8eMj6S+A45F3MJ6s33ccxuODYDwypXJI
oknZff+xvFXqWDs9umyy7YSeU2y4qNP3B9uiDpg4z0eBb6p3fBol3zP7q3q3
/fpFyHbDC9WrXKgWJ+UH/J7UUehpCeup0NMkVlGhp8UsWaGnSaw+9JM+2F8L
+skX7O87+87Mz9c+k3lLl6bvOvqGvQ+Na/ohLYVk+fSa9mnFa1ZBkU9TZT1A
HI/heMQS50uA8UgTnK8/9uN6SAr2C7vSQwUfP5G+Cj6WElHv13aoeUFwgg1N
Hjbi8WyeSiZOntVw73hzfm51tybv/u7jz4CAzunluH6DG1ZXF5aQd03cvp4e
XI73W9F66pQvJWTvrK63avcz56UeWaRQN4eJOnQOynuRjPydHr6Paaybkp8l
lx1T8rPEsoi81gMqv8thc6uPHelZEMMEPrgAPrBe8D05g9/Hw/dkOX6P/ews
9JPXON4U6Cf98feXsB/nI/Ox/wGubxHi45irS5YWP/7nh4HnxRbCeZH7cF6M
w3mRYXieq7E/EM8zFvvnTP44vVaesYyXmgH6DdoK9RuzoV/6q1nDefBEOA+m
dR/E/eJa94uL+6V1H8X9oVr3h4r7Ez9h5IQdZja8f0rukM7j9ejic339XO8Z
8ZbW9Re93WtKOzz7cjI4xoir3na69myACRX665zPTpbb22QyXL+M1xb9x5Jf
f1ut95WJOrfAn6YQv+AZg8yXmtD5nXoYrhiG/l5l7+eu+Vsv0SJdqsL9JyE+
ttw36kC6lzlP/dO6v9M2K1lHIwHif/iYBO/1S/aYSzqJ39Nk/F7oZ0R+J9TX
Sj/J0gajk4wr/atbtS8gIaVnAyNqnbu/010HFZ+/ava6N8Rc9pdUbHslu5c5
tWw1edrJOSquU1X9KqK/kYz/f9unfrfbY4xo1t7700q+WXLMJ8Yxn5isH9Vt
37hGU8foSrlBVeXA4oQan/1E2/NToOOPXVmyroHgv8Vf+P8Tao02jVaLOi1B
0wN/G9W74ifa3TJiP7oavFeL9Qo9ipXaIT5qkBHd+sXm3qAiKwkPIYc6+AR0
GlPTiKY2rPUpIktF5yE8RH/bfXorbpa1T9nF/TrwCOuMlp2DLsYruWj6A7Bc
zEf0FfXFt0BfzMNQXzwb9cEtkD8RfO4jJT4jkqlPPVs+rHMWWTXpwua9AZHS
3pv/wmnDCacwWf89bfTzo/6WEWwS5hN6AfmE2PdSdmjseSt6wVqnX9PPcewL
+uOVA388suhb3LGfK1R8/OpjKZ5Hw6U9NAXGJ4JPGNl30aI1RREE18NWwnqk
ffQrfi/0n0d1RquvNgknwp+iFvpP4H5pc9R//9LUpxOED0X4SHkvtUmHw7XP
FpNxmvFfxFAz/oKdxPgLEf/lZnJ2rtXgcnRRO4953dNKWDL4H1DhXynwZR34
H7Bji0231U2yoc0G1Zt77FkBxktZ8TmHKs39vfqSny7KB6/W+i99v+q29FNN
Cx+Wu72Mfx853WL5w5lWUh4W349xsa4bWDsC/SbL8TFtdi9s/eKh3zx8byOt
Lz2+ceS97G/IzrvsuJmgNr8RNENvYNl723HczXmTfGU+tNKIuEF7LnD20hv6
S9sp/UT7/lC0uyv/feanX5zG/QnzE3b5/VlFvun7HrM5y136L7gRJuV1je/P
pKjDZzVyr5+cLfOhYH4d0g3z61TZc7RZXGo2meHe5niLQE4qwvpJQ0dYfxis
l7RqD+sV73WtSGU/Uh+3yM3E1VYvjxzH82gB5yHyI1BhhxD2TJdWZ53rtP5J
brqeSnH4aEPTop72qf44laF9QernhLx+3ebILtOGP6Q+fGrUiHH1Z2SyQZ2t
VD7JNtx9eMgGg4wHTLw7js5tL74fGSTbfuVszg5ayNiFN1mrZ10oZO/Ty7XL
nxvCbs2KJP5ldNcp5NjeGnahTNhpMteePdWidigLA/8QNgv9Q4SeMGahIi+y
TzsVeVHCV6z7LOpPMb6EemD8T8llkA82uyvyAUsa5dCx83czmhu3/o7Vi8eS
PrhnTfE6F8BZt2HhNzLqWdM9dz5sHtLjEbtocZ/mj7WmAx5tmhLp8YiJusBL
bqzyX7s2mXx2s3rY+oAl/zR1UmunxcmkxZC5Ps1aW/IhrFeXgZ2SZZ35AIvg
jEPfEzB+vZAVKf5BH2Wd4aAuu0aN3ZmL/K4FX1G9lXuFs5/YBsyn0R7yabCP
5NmoFo8s+JI/1s6+GZ+01yP9ffYMWHjjyPMkJuykmeansrqOf8PEu/8K1sNw
PQTi6T/K+74ffz/O/U61TN9y9F5/fnePZxIT/iYP7aunx9hxdh/yQ1IvzA9Z
NXPY8hNVTGio+lzU/CA/1DdZ0JW4H8FPL8X1pgP8aCrAjzUH+NHBAD/5+7AP
G2Z5bX/AFo2s/KfeaAs6b1vAEOfjD5h+6uc9rUIt6BSvmseco/zYLceAx1Um
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
   "], {{{}, 
     {RGBColor[0.3510666709855277, 0.15764334741525138`, 0.6104469922453376], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFmGuMldUVhveAc2bmDDPjwMyeOWfgOPMdznDzltpL0jTRNE2KVsCaNIJE
gySAVaOmXKoItbH2R9PSVAoRiGhjS70ELAQ7VAUFRdT+6AVGRaMwA38Ek/qj
KUlLWvs+vMuQ8GWt831r770u73r3GoaW3nfzvRNSSnc2pTRRcuaUlJ6alNJ3
mlM61prS2raUCr1f12b9cxmd7U7podB5v17PqVJKG3JKO7T2F5IVPQ9fktL9
2Xuxp/5dWLc+1nbp24eSN0t+Os02ZyT7y943af33C68pV1K6Ur5d25vSbn3q
lcx6FrektEjvr+v191UdtnmyZHld6Me0x3Q9t7T4/HXhw2ir4yTGr8iPFfr+
ouS9JcfyXfl+o77/WPY98ue05Pt6tuh5UGet0bNEa9oHUpowOaVn6indIPu6
vv9ROW3EuejIRvjQVPbv7020LMLm0ZrzdFZ5eLtd3zrsw/4e22zRt2X6vVtG
r0gfkc02vd+q57CejyOemyL/1IF3fCPXexTXPukrJUfarBN7X9m/0ckj+3PO
s9lnrM0+Y1v4cDrOROcc8jEi/49Od65+UnXOhyLG892u138kf1f376frjonY
HpM/VZ1zUr6Ol4zDR/T+DulzlK/P9b6h/TeWbM+5f9Pagzr7reR3B2KfV0PH
trszpbuk71M8V2vPTdJ/qPfLs897TnJSzd8bjZTG5PcTOmudfDunb4uVl+dV
29nCX7Psr5+qXhlwjMT6a9mdUSybJefL5qT2fnq6417Y4tipdSo71qS6vqN9
mqbZR3xdLrsZDfs5LLkwcAxuh9uMyc8U+93y5yqt3SF5B72jPfdJfknPDNnd
KPmB1hxttf3WwCn14d2S2Od4YBjf+trdS/TRHL3b22ybtuzcb8uuGTbUlxjI
MVjlPft/Kn1HyXgBk1+Xfk+z60K+V3Y65/TprVMcF325KPRD2e8fD/85n7PI
PX0I/o/V3G+jkktL5hT65NsVx/COgHu4cN5X9zln5O5Ak3NPDYiXuFPoRehg
aUz5ORU8Rj82Rb3A2LnA2f3RU/2Sh4SDDTq3JCy812ob8AmvnAruov7HI8/r
tWZQvxdK/muqOeLZAefv/cgh8njo5+Js9qRX0ckn2IEXiL0qHytl89KPtO+Y
7K6U3K53b8pmoOw9T0efbv1C13OD7P4tH+6RfFfyl+0XuRC+OCL7E5Ifhf7f
bttgyzManPl4zXy8WD+eqLn+E2ruYXoZn+Gcd8OePn4vepleYX9qnMJX/PxB
yT7AV8gT4cPv616/seLYyD95XJXt28p8kdfYf1m2D3Oz+W809vyk23GyJzUh
Dx2yH8rG8K5svzgXX+rB219w+LGo6SNVn089weqf2x0Laxod1tcI/+elvzHJ
mKTHwPdYl+sItq8KbICRyxtec0XDftHvl7W459HvkuyZ7N5nr9+Ia2ZLTq0Y
b7MDP3MaPrOqWlT0vC69v2YOGA4f6FN4j1797FLnFq6FJ8ejh0eCW+CY0bhH
yN2Ckvd8uNk4pB7kYnvoYJJe4C5fG3cnWL2Q505zKT21vm4dfl0a8wBzwe0C
y0S9Hw5ORT8SnE+NqS/7cm+Bq5HQ6bvlhTkBbuD+pDbkeShqd0vUgRzCd7dG
79BD+F4tX/QXnbrDeZXQOac/zlod9wj3CRzJuXDXbfzW929kczRnLZE8O+De
5Z7nDtkeZ3Ff8ntB3XwJb5J/cFcPn7mXqBl5mxZz1fOS8+qeUR6t2l/qgJ/z
S37P/q8pJy3C/cHC9xU9sLdkPDDDwJPz68bqrH7jHxyD4RcK4+MPhbltXfAk
/nC/4hN8Ndhp39ibM5ivflq1D/Pinjwb7zkbO2rKGvaAK8DWJ2ED7sEXmGG2
Yn+446/K3Wr5ebDid0Nx7oKK/VohP6/I5p3dkkdl/4Ds/17zvcpaOIvaw+fU
6+3Cd+CBijmYXqKP3iisv1RxvekPsLejbl/aBowN+hc/8Re/qf307LtqY/b8
yhy7bMBzUG/MQvAmvswVh7yQPbPMyM4rvUleqNtQYACcXtPqHrhkUPeU1h7J
nnVXRVzUc1XUlHv/gZhRh2N/zoEbqDUYof+oJTl8LvC8QvKfXcYiOPxW9CY9
+k09/5M+RXJizbNiU82xsx95mNlhDgRDP4s8kA+w3NrtWF4OziLH9NZjsfb1
wjaHCp89HtiAy8dCZ4Z/KHC4udNxMjswnxIj9wgYhjuOBD9QP2rHzDsSPMKs
hs28iuex/TE3ggPw8Nu6Z0HyM141D+2NPXsGrc+Q7Zez57itkq/GWjDFWeAQ
jtodmLw8G6P4flPFfMt8RE6Jb2XE+KvsuWpW9rx0bfyNQ+3IM/lmbvnHpcYl
3EMOwDPzNfgCw9Tnwkyf/DcWszW4YQ7ABvtNdcfSq5imdZjb4fivZeNtcXY9
+ZsITmA2Zx84iHuM+sJrYIp+nx8zPDMkZ80ctG9zK5778GdZ1Jb4if1EzB5g
hr6GU+ixXYVj3Fn4jj0ZvMRdN2WyY2yNOYy+pL+InxrAo+wPjrA9Hznh/qP/
ib29zxiaJR/Lg8Z8+6Dv38uir+E9cg2GHoy/ifjb6LUez+vMsWNxf2LD/dAX
dx+9iA39ePWA/ebe3hXzRpFtB/fBe+AIPqEfNmX30mbupor7Z+dU12RPYGVB
YAHO+VP2rPaS5CsxK+zPrgf3ALE0Rc9uqXlO3BCz4jURz+G485lX8BkeggvI
IfUf7/J9Sg7+0uWe641eoCf2BGbAzqLoC/rjmWz7ava8Qh7eLDzTMNusyb7P
wFQte05ZEj7szD7358TU51zfWRh7zFLg70z8H0LzoHt5eeTwxfi7/quS/wfJ
JEhD
         "]], PolygonBox[CompressedData["
1:eJwllVts1FUQxgdKu1uWVmrr2W5Ll+2u24KAmhB90ph4SSoiNx8skBggKeAl
GhWqaAxK9MEoxhQqQrwkKGKkcpEIXktbIBFNEK+JxITqk9ZEH0w0hij+Pr6H
2Xz/M5czZ+ab2c41Dyy7f3JEPIhMQValiLNTI1oujfgY/BhyJBexsz5iKXhe
NaK/JeL4tIg54DbOTl9im03gErK0NuInzobAY8gW7G/jrAP8MPICtv82RXwA
/jAZf5eNeA98HBnGfqAuogs8uUge5HWQ+2rAJzg7hv419LPAeyvYkOv3+Gfb
HUOxDqGfB74D+TbrOzeAJzoiCBWv8/Mb+CXOdtX7DXvBnyS/fQ5n74MHkDXE
Gke/T/kWInozEZ3oT5QjDiB/TMees33gPnJ4HN0Eb/q7LWI3+Z0HNxMzg24A
/wtZ++zHPleiJo0RfxI/x/suzIj4jFxPIUF+Z7jzkTrbTMX2R2K8Sn+e5I71
4EH0sxoiHsLmFvCt+Nfi2yl79HXIVr5Pqubo+rG5CvwPOSwAd5FPDd/n8F8E
/oWzr9EN4p/LR7yD/0ruu5w7sug35v32DG86Rv5HZ9LzRvcgh+31+M/M+I57
weuxGSfez8RfjP+kDr9NPZjAfqTsWHfiMwx+Lpk7ezDYCr694Nw+x+eL5Dfo
LaqBanGT7NH/VxNxY3INVIuzfN8sHT14JeuaPEEvVnI2n+9xbFaAtyHVBtdw
O/hp7BeiP8/3oorv1N2qwV/g2pK5M0nzAh7E5lfyP0y87eBGbD5F2dtMfcBL
Cn67OHF32WcXdXB4Pri7YF/14C70y5JzF2fF3YWyqXdMxd6JrM14RjQrPcg5
bNvw3wjOw6HNzNoYORaK5qC4qBy3kd8N2Byu9YyvBrcWbdvBe58C35fMjZJ6
CK5v92yJs2/hP8LZcvLvI0Yn+A3VNGOOv1kxR8QVcVhc1s7Q7tjMclkCPsUb
8zn7DBc8U5ot7Qztjtklc+8HzTd4CPvfp5tDLXnPpGZzHf7XgF8uejccpB87
wCPiKPdvQE4XPVOaraPYTAP3zLCtbL7ku5i8mzTjz2pXcLYJ3SrinwE/n8xF
cURc0Qxrlq8gh6vBvcm1Uk+Wg9cl90KcFDc7WiOaGs3BcXoxxP0VfBfwvYXv
XdisrvOO1K48WXZs7ZiPeEtPwbVQzdaiW1zx7Iujz+C/A58Vze6JejO71dzV
jp5b9Y7UrpTNaHJNVJt+ZLTgHaFdoRnWLH+F/tEG7wDtAtVAtbh4Bq5WXct7
iN8NHiWnbJPf1E687uTdrZ2q3aqZ1mzLZqzsHaldqZ6+Cy4nc2kPPi+qdkX/
t4jD4vK1yb3WDBwBX5k8u+J8X/Ib9Bb17BvsW5O5Jo6L63OT/ws084fA1yGX
TfGO0q7qqvot6pF69Xa7e6OdOUqv/ge3gf5X
         "]]}]}, 
     {RGBColor[0.4902493180410764, 0.39964438228297994`, 0.8060850400256188], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmXmQVdURxu/IzDAbAzO88a3zZniPQY2AophKglplDEhKRYuUgIIa19Io
xqpAXKJVIksUcRcTLcUFRBBUwA1EGQbHKBEBDYJxA3FDwSTuqUQh38+vLfLH
nXPmvHPP6dOn++uv+/Y787ejL9onSZJu/emhdlNdkjQ0Jkm6Z5JMKCXJUo19
15okWzT2up6hFUkyTe3CPkmyrDpJxul5sXeSjFE7UvN7af6nmv+A+kWtcU02
Se7VmrP7eO4N/Tz/p5kk+aJ/krTXJsngfJI83ZwkK/QU9M5QLTJf8+/R/FxO
fe15ZCFJhvdNkhF65un/sdX+n36vFvcnVSbJKdp3vmQYrvkHaOwszeN8Z6hf
k0qSgVVJMlrP2dWW9XL9mau9hqi9ULL9WOMbJH+2mCRdDdKD2iMk51c1SdIq
OffJ+qzXa+617dbJNWof1xqP6XlRazZr7B2d+XPNm9vf7Sl6b1nMmaT/H1a7
SE93pdvFerbpAg4vu3+g5ndV+p13NL5Ja+7Umnnp56F4l/ms90SsOajev79R
6XvMqF8p/XQVfZ9Xac3Rej7Q3N9IT6eVfI/7aWxrrddlzba+7q/VWc4vef0T
NefbPraDKq2/SnuN0R6deu+YuJe01r1JOj5I/XNDz+g9rXWmanxio+8D3R9X
Zf2v0fvP6XlA/Zs0vkr9DyTz6dWWAxnGt3h8ZuKx9r7W2zrZUUb9k6stb1uM
syd7y8SSCXr3Hv2/SUZwb1/3saeX9rVcx+tcD+scC3S/I/TO6T0tz91ac73a
gZJ5gebP0Xvr9JyqOS9HH3lYj3Wx289623Y5+7PSzxN6P1H/vgbbInb4Zdnj
s2RLlZJ1u+YN0frLGqw3/G2jZBmj/h2J27F6bpU8aQm8TmNXFj1+UsyZ1yQ7
03Os3uuhNadpz4MS3wl3g01fVun5k6MdE2vu2Ne6f0VrZnVHGT33Sb5cwXaO
vR+dth1lC/49redezVkpf31Gzxfa9yidf7X2nVDhu+a83PFz6neqfZuztLp/
tfa6TXpdqjt7XXvcUfS5wZtzSx4fqX1vko+tlU5v7Oe10CM2MzbkR0/c1Zq4
L/CClrVWaN/lKfsF9nZvg9fY2er+J2rrpLPaJutheqNxTdeTHCvDGaq5X+d8
l9zNMxqfz9oNHuOu7om9wKo9df6/R9Fz9lG7Wrb3pMYO1pyzNP/MvsZM/Gez
9hqi8Z1N3vtJneU9ydunyXdK2xR9zrS4wXsN0t5TG41j7+v3JXpvsn6/v2R/
nya9zVN/u2SaW/I6vZusZ3ABTLs2MVYwB7xIS85d6m+V778lGT4NHLs2awwH
yxl/M+V5J1V5T2RB5u0p79Hc5P3Ya0DK+uS8nG166Ba/nN9g3zwk3nuqwjgM
Bn9YYUzB38GDNdq7WnNWlYxZYNevJFe39HuIZLtT/Z/0ss65nxna54+NlhEd
b4mYxZ2/09s2cG3R+38pG8hnvU+X1p5etH0Rx5aUje1g/BetlnmGfq/R/Ing
jfz3rn62E+yF/fF/bOPbVt/X7Zr/iOyivZdt8HNiiM51nfao129Pak691t+j
90fr941ac3OtdY4eaM+JPj6P7/9Bc+7p7/GMZJlS9H1m1L6q5xLttVFtZdF2
e2fRPvRPPadV+Xd8BpxbX3S7Ous7mNDTsXNYi7EVXD1CdjJOZzhVv31TcH9h
3nG7rdbYiK/fF/61J8ZfE9j9Tnr8TGucrPWf1133kD4vrjGGjulpHG4vGDvm
as6QkmPI/W1J8l/Z2dl1vuOXe1ueSyu9dmvsi51ijz/SnIdL/n+R2rLee0nz
F1X4vZfi3Vkp6wI97KrwmTg3MXRZ2PyhKWMTNgzGg/XgKjg/J2LH05K1QTb5
fMnvgTHEaDBhWeBD/zrLsUmyLq1xPBtc5TjLXOJaVZNtj3hX2e74WNXuuMMZ
sZcDO+RrkmmQ2iW6l0f1zNT/u8PGsLXlzZ7LOocXrNvlknE63El7nFA2PnHX
YEljiznTDL2zvGRdryg5hhxf7fsZUbA9dGqdW/v5Dm5TW6tYcIvk3K/dvose
0SHxhdiCzm/QXuM0Z06tY9zuJmPLnib3wcN5kulb4lbZ40mz77Gi2f8zJ9Pi
PuPEYfRCrPmozet/2Ga/IaaMqjResiZx4T86+zWy3R1tjg/IiG0f2uqYmwv9
oQ/G8VN8FHya3WZbvV3t8c2Oh8S7X6TNw2bo7Pu2G2vS7bbRiVWO489q35cl
w2U61wlZ88LzpNuH9H9PrbWobCwZHfxnYNZc8Neac57udVi1Y/jVWmei5Fys
e9hTMOaAPa/U2G7RO3EY/aJbOAWcGL4BHnMfzAFH4T7YxpHy28GS+QWda1TW
2DxA7Vz931u6PlU2dkyN+QMyVAeGgCXv1hp7iV1ge0fKcWiYsOs4netDnauz
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
Nw==
         "]], PolygonBox[CompressedData["
1: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
         "]]}]}, 
     {RGBColor[0.6120602038807501, 0.605072627406015, 0.9105984496128715], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxMnQW4lEXbx/dwirN7kto9u3u2zh5fFQMFVBQDuzAAW2zF7sDu10TsAru7
X7sVFRCM18BWQFCxsev7//jfXO93Xftcc+88M/PMM8/MPXdPebeDRh3YK5FI
rN2RSNQqPac5kbimLZHoXZdITEolEvVNiUSdriXSicSnut+QTyQ2b0kkyrr3
cWMi8VXvROJLpX82JBJ7qaGfdY2sSSSm9Uskpur6Tfn91OalKvOL4KFR5m21
NT6ZSEyOugcUE4mP1O6+SnfT846uTyTWVYd6+iYSf+v+xarzve5tqTIPFxKJ
C3KJxD/KH9eZSNzcaLhVZTbvn0jM1//f9T+r6xC1s1D5Q9T/b/XMPup/b/3/
Vde6+r+gnEi8rzK3ZRKJF6uJxMkah+W71c921dH1vcotoXf9Vu/ZoHav0Lh8
E3Vn6v1m6GrSvSVVJqX7SV2HqJ/T9M5Lq59H6x1LvZ3/Umsi8ab+Nwkeofeq
U/+erHV/aHNljdumSut0/xTBE3Rvgf4P1bN69TK8kvJrlX4d+e+rj9PU7u96
/mEakzbVPaGUSHxY4zIrR/l5uv4l+Mhaw9T9uMbjsJnS9TXmM1X3E+XXqMzB
yv9A8DFdicRVyl9D78QEAd5OYEr3T9E1R/CqetfzlP+s3udnfY/tlffegETi
VvVpE7W7ka6lNa4bKj1JdX7XdaKuUSrXW+UaddXp+rGiOmonkdVPc7BT13B9
m2ca/I35vm/q3fLKf0Ppv9SfG5V/pPr/l9JbdF2pMrfX+Tmj1dSLDW6T/A3V
z2rKbW2t9PVGv/PLautajeFKSldWmUNjzpRUZr6+3bdqYxPl36GyVyl/vr7r
UP0/QGNzjfpwmPJ21LNu1ly4SdcgfZMr9X2v0HWP6jT38ngyblN0f7by99A1
TmOyV4fXwDf9XOdewaso7+HeXk+b6932VvqO6m6pZ96n+zfq/8KC4UaN1cKS
6/2kdNMoz9iyzvaKtdaodFy0c0mtYebwxiq/5+L1qPzfYtw69e4f6b3/Ut4f
6tvvug5Uv7bU/xdU5gSVuUx1nxV8vODZNc7/W/Bnkf8Xc0Pln4/84YJfZCwE
3y54ffX5IJX9vNHwOSCinkRiur7FcXqXc1RmLvNW2Vtp/W7AXNb6/ZfGKaHr
Hc2DFzROz+t6RuVurHfKc9fUWl5dbY5RvY31LsM19y5hjmh+tqndffNe95Th
W1+utp+Lfl5Z4z7Tz+ka54OEc6YqvULz8yh9gyf03a/WN/5a/XxU5dZR/sZq
5261nRK8keB99dykcMvpGsO08rdW/ibqb6vyZjW7zCD14x/eP97xUeGuR3S9
qrHeV+93scodp3cbV+dx+0dl/tYz/9K1gepvqz5tqPRijVWnyi4Ubhml/0vp
fZOBc5r0/BF6zgOq/5P+P9HodfNGq8vW891U78cGr/1VNG5rq5916ueqvYwL
wANfaqw6BR+g8r/puf9R3RbNvW/13Cm6l9G99TQmX+r/F7p+LBgnfKl376v+
vKH2v1WZTzTuo/QtRgpX9Vf+W8r/QfmbqPznaudh4eFpffQugpPKz6jM+yrz
h+ABgt8R/Ivgy9X/y3TN0f8Nha8na26u12080qL7O6nPm+o5zbpSutZR3+ar
X/NYx7o2UN62esbhauPDeNZNXcaD66pvy6s/zyn/7IzXc4Puj1SbR2l+HqZv
dITSlQNvDFXapDF8V2P+Cvikj8dtB76tvvvpypujcXhF+d/XG4+CD0jBCbMW
zwGlS2v8v9E7bavyc/W+d6jN7/T/zHqnIzUXTm00TgKvHK78v8HvCbdJPt/r
xMCz4I9V1f9huv7pZdzwe+AHcPhvgf/rWzyHj6vx/vNA7EHfaB68JPh9zedj
9O0mCH5V7zuXd9KVq3XeOY3e93fSPrGWxvcojeWFKj9V45JUOj7vcZit99pE
eVMEn9Zo+mJC1P26j3Hy2bqGdRgP0u6b+h699V7nqu191c85GvNdVf4i/V9F
zzqky/j4TJU9Qu/TpbWT13WHxmq9lPP/TR9b/J/2N+tvGuECjd/0Rvft8F7G
x0f0Nk3ycqP3O77TSPX5ytj7Vk4Zl6SV/x99rwsEL9B7NeqZDboWqM0Ni94X
D1Xf1lCa6+36q9a7PHtnt9ZZpc3fbx2tpTnq3xGqt5Han530M8apn3vpSgon
nKC2roe20bM2zXt9fSF4uu7t2WY8epnWwFN61l9qr7vB84N1e2WL34H3aUy6
DDiYdqHNzlAfNtBzL4y+baj681RnvPqTU5msrmNBu+pLg+AV6r2Pzenr/Z68
Rl0ajsR/4t4hameu0nblvyb4877+Pz7h/W921E3pfrOuL9SnO5XXJnhIrd89
Ffllrbe5avdBrceC5uS2et+S0t/0wBRjpTlyvPq6QH0+seh6vBvvVd/P/aNv
qzX5Hvm8N2WgSy/s477RT96NOoPqnUe/d9Jc2oq9Vu2fofYvavK4MCZnNnh8
3lDdPkr76iro/lN9/P8s3e8iT9clKnOQ6n+qdg4uuixlutSXw/R/tvIPV7qP
6hb7+d1+rRq+A1qs2X3jXTr6eWzpGyn/++tZL/R3307sbdok38/0yT/RD+go
0nzAq+m9PtBz99Zzfyl57f+q9Fjhrql63hLChR/pf4/G/AOlVdUZq+tBtXmP
6t3d4v3gyi7vL3uqnRX0vZpU/jGV/6HG5Z9TWtD83E9rLK+0WfdTuiZonDdX
3ma6nlX9PLSSrqvU/tc1hh+p8dhso6tB71VSvaKuyarboXn7tOodpfJjm73P
PamrpHo76Lot4T2Pvu3NHFD/HlU7Q5V+V+MyTym9KecyfTUeDb1MF62t8hml
2+iaKPhJfdcXwZOCR+m5a8b/evXlccGjVW6VJuM38Mk9+jZjgl56vOr8vNpf
s2j8Usg676Uon1D+yerbBwXTJGOCnvmixn24Sulyeu4LjZ5v8yrGXx8JP1/a
zzDtfNTkvWi1XsZ/rwZuZP95OXDaJI3jq5oTd6mPawiPPKe8tNbXuyWP7ztK
N2DdCd9eJHhgh+n48arfT+U7VH6+nptTnzcD/+r7j9F1i9r9Qu/1MzSc6haU
TtYzbtXzf9CjB2hO99d1qPq4me6frfcZL3iIxmdFtfmX2nxb73WAnjNDzynp
mUVd+4DHVW+Qyp4seKDm+dL9Pfb/0TMGqw/76/kzlTdD11K6Jqm9vYMGX63W
fTgEWlRr+j6tsWv0/42Ky7yiZ92k8bk5aL8d9Jztm/y/f9E8wL/VflFj9mPQ
DMc0ejzG6bscxtgHn8K6OyzgeXpOk97xUP3/sOJxfL9ifgX+BN7kfvX1Pl2X
6xuupbav6GUa5sGy+d+9Or0+7tczL9O9h9SPP1V/eNb0zqQof6rmzrEao+Pg
i/Lu39gu00HHRD/PUX96as1Tj+sxHvhZY/+enj9L1/r9vX/u2s976EjV21TX
Wap7r/5PiTFkDoL7mIcfq2/3qd/H6jqwr/EpuLROaa2ue8hX307T3DhEbdTX
e52z7o4VLnhN3/ASvesn6sdZKvOC3utjwWcKflbwuvWGj1Hdz5R/LrSW8o9N
uTz5x6Wcf4rg2SpznuBp7KuCJwqeIfhk9e1pvfvm7HH1LnN6nddWJtbXqyo/
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
j9g4sEf2U/u7CL5NY7ZsHz/joIRtIQ6KZ2G3gb4QXWGfKN+hNN1tvmw7vd+F
gucpf6H6OWOA9TbfC56g/E+V/6Xg87pNb54u/utz5c3V9bzGOKvx/lHwM+rX
903ORze1Wtq2RIeW3JcDo28Qti/CK6m9P7PW8aEPRKaxW4flGth0ga/Qux6r
fk+iPrRVh3XogzVn9lS7j6v9cUp3ZK4I3ol5qDYfVZsV4b3d9P8x5e+hdCnh
2POwWUEG1+JxZzx3Eg7ZRvBYde39kvVHHyrdTOmplIf31rssrf991c/Buv6t
/BlpyyFO6zAvcK3+F1TmLdW9Su9yCjhQdW9Ju010U9RDJog8cBf1czmlZ2su
De923/ZS3pJpz8nXVf45XR3YY/T4vSfFu1+oPp/LOPe2ju5QwfWCh3U7fxWl
l6Vd93m18U/FOD2dtQ5ri8Dtr6rMRui3hBs3AjczJo0ej61jTNB1IdNHnv80
9VV+bI9l/JtFO79XXPc3pVt2+BmL622+uEyr5WXIBpJZP+cd9XO01sKmyr9K
33e00lG62vWse5sM81zS0dFmnepsJbgz67ytIv/PittpVn673mdT9bNDaa9u
t3eM3rVff8/de3qbFgAnQA+M15zcTv2br29xRs7PHqNx6wNNJfgt5X2ndhaw
Llg3mps76nqwybZ+OwleBp1et/PPVfl8f5ejzBT1ZXvBDzQ5D/gwrZ170ta1
/qV6/+iaqPuHqO6+faxbTeo7N9MHwSmlByg9EHyo/AfV3937uE8/q+4S+h4/
pd0WbZ6vdtqjTpvSu1V+a8F3Ndlm8GDBh6rcJWmnA6q2FULvgs7l3D6G90E+
qXuN0DTo0QR/pLyS4DR6ELW3X+5//CT8HuUof2SP26X9y1Wml+C9sDupuhy8
5+e1fs65oe+B74T/RDY9N3Q0wPCgwDfUWDZ/UfCnpBdHmXJ/9+HVhNMbAia/
1N/P2479SldZY/iB8jbWtS37adb2adip3Zo1XQ3NjuwDGchBGteXs9bdoNu5
LWt6G7r71axl9ehwfhDeeUL46y7NvelZ627Q81ydtSwI+dCVWcs3kHNck7U8
BxnSud3m7ScqXVL01o9qZyml56itF5C1KX0ia/3UkSrzXNb6JnRQPwm+X/A3
gp/PWt+EnuqlrHUi6Gp+Ddx4qerOEp5/GnmL4Lez5qHgpV5APq+5vG3ZMlBk
oT9pbZ2TNf2/rcpflLXsBRnMxKx5BHgF5IzI97YuaL6qnbeQVanueVnzXPBe
2Pls0t/01C+aE4/oO6yiZ31aNO2yp+bMG1nzoeheXs+a14OPfCdrXhWe9cOs
eUP4yI+y5g3hy/9IW47arOdenDX/BR92RdYyIuRMR+q5l2nefg4u0fOP0nyo
KC1UDXcpHVi1nHNX+LaqZdcPq+1V+5kegm56JGTa3N8vyqxYtW4Y2e82Weue
0UHvo/wlWJN67kN67rY52xC/ofmyTcCvK/9VXUur7elKu1kTfWybukHOtmLT
NE5jc8ZL4KcdBO+DfFPlb6w1HQYNtn3kv6d0pu4tAx2eM432W+iUSX8PeI76
2QzvWrW9EnZO2CCtoP3ya43bVnXO+6aP5cOH8p6CD6naxhFaGRuAXWLcrkrb
zndA0LTjO/0f+99NdG3Ou3Rbdvx1tMm+/Cf4sdnjTjuT1c68GMMeeBGVmc/3
Uplf9dwFfWwzgP6afGwJ5rc4HztZdNrzIp86wOi4u0qmOcvI4Vo95vRpp5xl
1vcqv6C8Yh/blvMtKrpmJ2zzyz30q9wvR5lOpdk+tuXD7oP/SfQo0c7xvZwW
An5R73+q0hv1fs8HfIPgK9WHZdExqA8ljcPR1FdaDnhnlTk1Z1z+teZDVeUm
snYqfj7PpS3gfPRnarfhVVRvSMk2gdgUd6cNYyf4CHslNDd7UbNluMhv79W7
rMsYao/eI2c7iC/z3r/Zxz9QHy5V+Y37eA8bo/bWF7yF0tVEXx6luTNRa/yI
nHWA5yndMebwf9VGtY/Hl7F9Wv8HCF5R98e2uz9/1Numg/HHPjshuL/gZQU/
32H5NbLrp7qd/2S3y3bH2iFvQJRHzp2O8vBS8FTohqEL5gVtsJ3G4iGV26Fk
uhW7YuhtbKWBoatJ/wgYPgB+ADr7hqJ5yB17bCuNzfTJNeZX4Vv/ozm8dcBb
9Zg2/iPslvfsa9tr7M6wlZsevgmk0wKeGjC858cF21J8UvjfPWwFN1e7vwje
rMf2a7SJnRs4d2rU7dfkvrHnnay1uYvaeU7tbKo6Pyt/E/rW13YS2Ehs1d8y
1T/qrGfFRuHIhGWs5G8e+zPl2aPJOzXKd6j9To3JPRqbP/T+GcF3Cn5Nz3ld
14PRxsnRzjF9rYuF39xI/fhJZTZUunHAa6vur2q32td6anQ0B4SehpT/c2vd
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
7hP/4Unv1je8S9fx+v/flNMp6stlza5PHvJU2uR79m1wXdqh7gnR/nKiJ/5Q
2eWVrq75tKzmxdisbZGwScI26YqUbZ6wd3qy3n5C2NMPrzo/L/z8jMp8mrS/
S5PanV9re/t7c9Y/3ZOzHw/+PNjbr6a636vuemn7uk2qt7/bQyq3K7L/nHmi
14LnQb+62F/zMdVbgH2n+rdRi2FoiA+U5pWe1cu+P/gS4tvIN/qqybEUsNvi
ufhKUO/rqDurt/uJPgh6E7oTenl5xqjO/v74a+K3iS8n9lPEC8Bnc1LQF+jv
CiEnQ25GLAFsRvD9RxZ7SZP5FPYkdAnoB/A/oCx+l/jgjknarvn9gn1FunPm
XS4OW3DkcpQfpX4+rDFcXfDwnP16Ryftn1FM+lnQmaSXBowfwUnRf+RltI8f
ylBdM3R/hK7He3tMGGP8zrdP2h5qqPIakrarrU8aJi4ENgH4kTLO+NXhz4Z/
23U5+3rOKziGRH2UX1z/Jz3rq5J5uBcz1lWUktZLDczZhvStvP0k8ZfE3/MG
5d+p/1mtl1c0MV/WdZHqV1K270b/e1fJMmFkxswHfCzxr1yg9r6ss70i77cg
3pGxws6J8cXHFT99vgV+ot+q7cm1tvHjm/G9JpZMx+6Tsc8u9mvMgauV/5Ty
T1X+PPVvG+GkuUX7ATNn8Xuap336BrVzfM7yCHT2yC42Vr820rWd2vlJ3/R6
dMI5xw0YGv2hrzuqn5tqHO7MGb4DGXMf0zq0+0jKKbhojTrHGngn9o7rI3+P
4Jngs1aKuUAZ7C6x58LGEjv7VMxt+Cn4QPi+7+psv4vtLnZo2Fbhp/91yJOR
K2MPhR07ZdA7oHM4M2GdxvYNtqnj+1AeXhs/A+yvd1aZcc2OB4Hv94dp2328
n/e8xxYMP4imeu/3tya8l7KnPhAyVmSt6A3ms78q/8Umy1KRj+KHjc0a/WcO
vB+yWWS0H9TaFpZ3xybuj4BZK9RnjL4BDyQXsR2J5ZOGBydsf4GNBjYYY5vs
q4afGroybCJPj3rUea7OfVo+6lIOvzZsZhmnJWOs1tTcaU+6rbqMbbyXqXiv
viD4kdZ673MPJOw3tDBs7bYSftg7/OorIRvmHbBVxwcEe3X4cuJBwJt/VWdb
XsZknvJmJuxria6F74SOZUqM54oJ47b6wFfEA9guaVtF4gFsk7TNPmsInyvw
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
         "]], PolygonBox[CompressedData["
1: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
duZG9aR9W4RxvF72jTLbNnXG1FmzQHu29N/If49s22n3jfanT2jDcZRflOM8
R7Vfl/stG9mkZJt6tczf+mT4vwLdKmZamMOW0J9HjCWWz7V8r+UjLV9pigbq
ltnHQLoR6Uhkq/iSOXhWiX3mR0TdRrVVPv9/k35W2L54wiwJu7S6zG8LCE8h
X/S3IsayyydPvnkXlRmLKnxZ9zKvGVo7ZgpfQfq8qLGnsjkfTtqnUL6F+kb0
rQgzJeyUbGI9Qn7jR+ct6czOoPwH2fulfEh2wPudiLF+8jmU76F0OtLt6E0T
vW2yMGIsuXwO5Htwcti+Y8L0CNvzUMTYbWHohaW/N+6xWYb8rwnvEfdbGLqz
HYaeGfe3JR+RjdIVhu37JIyOsDqbIsayy6dRvo29UrbdCLNXLOxn2L6MwlQJ
W9UhbF8pYTCExXg6aN2uzutDK4zBERZHGBxhcV6VTaLQOqFbyX+YPuhXYszt
TPlmEtZU9xrzJ2lz4sY2y4f/I+njwj67CBPVRPbTmH0f9YbEWOh/I8beCjN5
P+W7Jq3bEsazZdRjqrEVhlC+soPCPktUsGZPZpJ9R3xGNe952vt+CHvt0Rqk
t1RawCNWYkzia/Bfq/tYrnWwC5Hv65Sxes3lXxIyplfYXp1R8iL2eZbvs95M
0dspP4T8lpV0tCenrZOXbj6X/COF947at0eY1qjuZ9K3lfiOprua1iCtRXoj
Rm/FCBP6//eRqvgthaczXovl8xeOWkcmXZl8hjuT/nbGWCTx3J6xjkm6JmGK
OpH3HvqkDX3TBH7zkHUm49u5snU2H5N3UtbfT2uY1rKBIb8VoDOgzoL/ltuX
+TTZKMRL/o2lXgPlK7cjaF2ovqd59OVvEX/rsnnI9nGx9K8FPtNOCflNC71t
0RWeg5HvlZRt6UHCa7p7h+z7Lx97+dqvj1j3Kx26dOnCAAsLLBuZbGWyacuW
LR2NdDXSuenuqfVZuui/wvbNnkf5dcQ/itm2n6DPGsLrt6B1Gdpjm1Lf7Vn9
oM60bxBfjrzJUt8HqlH+GeTpHbDOXbr3wbJnan2Vzgv6qbh18ypzuNx1qC7Z
MGTLuCfq70s2H9l+WsZ9FxRmSNilJ0L25ZNPwc/U/0LMvoPC8AvLXy/qsZRN
UbZF7SnaW+6STiNhH0TdBe8nHoH+LeE0vaGjt3TmB303ls+PfH8OJ+ybMIs8
/0CPIf2eSvYpkm9Ru7ixrsJ0Cdt1LOW9RD7eR1PuE/WNMPTVy31m1dlV7TkT
+pxyY8FU/lzok+Sjl2udvnT7wmwJuyXMjbA3k3V/RL7riL+s+1fY+9v1xJ8u
N4ZMWLLJxJ8R9jJs3xLpFD/m+2ubnZ/SwUoX21ftoW2z1J/kbUf6s6W2wRwS
vp30Byvbx0a+NiOz9gv5/Mj3R5g8YfPkQ5iJGaMurLp8eOQL9EjQvkCKy7fn
/HJjQYUJ7ab5Rh8dx9yuJ/s29BM6c5O+UfarlN+00XlmFPFnqOtwyLYfvfnW
lvb8ErbswjgI63BZyHlf0JrKeM2PGisiH4fa1PeczqQFxmQJm1WZ+fpQoXVY
H8o/Kuazg84Q5Xz/50Ttq6o1cWvGb67o7RX5aBTB73XpBAqMERBW4OGE8dd6
4+kh6I6kFxUY4yGsR5wy4ynbg/5aBq/+tGFXvnWaJyH/jfT/sjrWEUtX/HPC
vmfSMRyAvjxovIDOSCck7TMm3zH5mEyDX+e411blEbbgGuKnFdhGMlZ7ZcrY
K8mQoGxhxGct6Rzqk39c3LbDBcSvhf4r4fFUew5BFyt/oc9g0i3oTKqzqc70
VUm7NOj5rD4tSvqNIb01pD3nevkakn9CgW2E50R8J9bdWN+4vnW9+aa334SJ
rBQ2Rll3W70ZqLcD62X1o9JBPibsbMh7t8agZ8o6fOny7yO+XGfboG2r+kb1
rcrHXWdHteFU6StDtsVqzp2ptZbfHi30m2h6G+2dmH33hWkVtvWdMr+NpDdQ
VoX8hojeEtGdQHcDYfa1/8rHXb7uugPpLiSeQfJ2j9sXRz7p7YXdiVu3tIH0
lqQXhuxLo/cwHpRtNey3aISpFLayRdJ5hfkU9vOEiP0TlvC9v0h6nYjfYpSN
Wb5LrZJur+Ktdd+AZwA6yv7yjPSPCa9t+ib6I3uVrL5Md6xGSb/xpbe+hKEX
lv7dlLGn0tlLd/96ynuT9oSN0HeE7Bsv+/HJCWPAtH8prrcjvw7bN0Y2pf3M
/ZvK/BbMNtl8gsaMCjt6IWWqKj1qX129ofkD319T+uwX+fch3wJ4bUsZi601
UGvh6yGXlU5RukX5FMu3WGWaULaE3y4rso//KOQbmbEuUjqUD7VWZowV0ZuI
ehtRb4pINyIdSSLhNy81X7X/vZyyj6p0CeJZO22djnQ7fYQZhS5mfF8u8Jp3
DnRpwmubbLwNiX8Ij/Iiv7EwAd7DqX9jsd9IHJIxhlH2Z70xsxh6dMZvteiN
NL2V9mjab+fIZ3AJ9J/w61hkG/tq+mJBmXnrzYuFOg+F/FaRMGYDEvZZku+S
3nDKjVjHLl273hTVW6ZPZe/P0qm/mPabLqL1xtKdsi2lrTsXZkHYhTVlxnbp
zKuz71kZYzlPJf186VOT9m3Sm1gvCKuY8dsm7QJ+C3Jymd+60Jsmp5P/g5R1
UZJnl/BeIds69Sah3iYclLZvkPxtSuI+k+tsrjOHzh56009v++kOPI7xvwX+
O2q6DtW1CH47c3zGbQu/UNq+o3rj7yjph1PWHeqNniPQN+gbq20dsHxxp2X7
S3u+9v66afu2/0eZUugTo65LdU4q85qqtXUO43NMWL647156A+vkkH1Q5Ity
HvI/QvzxuG23evNPb/8JQyYs2WDqf7TcOiHphoYTX1buN5z0ltMw+C8OG8Mj
LM8o0p+UbSTlt3rqE59CfIls/rX9jeqsGUr5W9Vvd5X7DRW1T/lvg94Y9/7b
gPg04j1DtjcqPp14NGLfE2FmhZ3VG3x6i082YNmCZUOWLVk21L6U/TfhvtCb
E3p7onu5sXDav7TXNQnbd0s2ZtmaP+G3/yobQy0stWzaQ7P2KNnObiy3Lkfj
I139npDtObLhypYrDFejbFy23kPlPpsKsyPszq6gdX/6XhYxXjlh+6YI4yys
szCuwroKUyZsmTDTwk7rDKOzzNYsXkz2I9mmzwh5L5qvO3LcQbT2/Py4fTZk
7znMeLcN+syis4swQ5m4bcqyLeuNhFOhf0zZl0p98AN0gWymVawjK4Q+L25d
uXTmJ8Dr+rS/H+l0b0gbMyHshHxwW2pup3yXk0+SfJP+jRsrqTfk9Jbc7pTP
Zm/Bo7lsUbTncFVjEoRN+CNurOhx1D+d9JyEsaAtpWOBnhsydl93LN21/qE/
FxdaXun2cpM+i2vP0d6jNzmla1SemsS7pO1rLcxZYdg+YPIF0xn8oZAxHMJy
6M25B0g7EDc2VW/q6W29z1K2pel+Lt/OK0k/ucB3vHuCfnNXb+/qTd5jOjvS
P6Pr2CYn21wV4h1LfUbWWVl3ON3l9AbfoaR17jqfCC+utxU2ZfGr2g91V5qf
NJZbPov3J71Ha6/WGf545utY8nSVLpVQUOE9WXuz9D9vU9eSMqcpTz7pNSpM
V9DevaT9nrLvsTBry+FVs8JYQGECiyqMaRS2UW+q6W21yylTnmsMTX/ZXmJ+
+0I2QdkGn0OmvJp+Y0dv7WyST2Ouf1skLE2Z65YMkr193NgivYl2KGUMnrB4
ujNsEP6szL4f8gGR78rNMb81Ip2odKN6o1JvVeqMfLbORnFjK4Txjan+cr9N
Ixvja7rfVvgtV2EaQxV+Q0G+NvK5eV/+GxVZ/zbGcHyF35iWfk7xayp8R9Jd
qRZ5ljGfNsaMzbxBd2r5AqT8VpK+qYNB22xluxWGQFgCraFaS3fSvltkX5X/
eoF9+OXLr9+UJh2QdEF6Q09v6ekNmgfD9omQb4R0CnpL6HTy7Mkxjw4Jr+la
2/Um6P/fBg1alzOG/KPJfz/8PikwRktYLd3xdNfTHraG/LX4bTF5XyS9GPo+
8u8p8JwfjvwlYdtq9EbRwoxA4Kw7VcyzXcprvNZ6rela22NJn0f1JsmKpPcY
7TXCEAtL3B+Zmtbxnqi9cQtjujTHdbaQvSxpW5FsRLIV/S6MYq7fJOkTsg1Q
tinZqO7kW6xcYSy6vrmq0HckfVfVnVW6ldaElaU+Y9WmfKsKn7X022kVxtRJ
96L8uuvODnnt0pxvhjynEN4r8BvhW1J+I01vpcke8KnuK1G/faUz2ayQfeTk
KydMdqzCeZRXOv/Zce952vv+fyct9xlLe4feLFzB2HWhjga5vlPrbj25wudj
jf+UCvtoyVdLPnry1ZuS7X/tuTpb6M05vT2nN913xqwTkm5IPnLLZQ/Lzn+9
KXIf/Xdl1L78FwiDgaxXRU1LhyxdsnSA0gVqDZ8EfWOZz946g1eC1xdJv8Wu
O5ruatOy7dN86BWyjki6Iul4DjF2nfXGRTXv0U3Dtqmof/QGzG7qOzdl7Ikw
KedobUx4bupMrLPxI0ljkfUmnN6G+zrmt+g1J7+K+U1kvY38EvlrU3Yp+Ytq
GjMl7NSAtLGlunMPFB333UlrktamN0J+q1U2w+qkHyu3rk5vuN1K31we8re/
mvA38btDvttovdqBvJVj9i3vJExj2G+s6q1VvbH3EmntEsaW6hvWtzw4q2+V
DffWtN+c0NsTneCxIWYfOfnKSWe+Lm4fBPkiNIB/7bDfFNP8EB5ZvlTzKNM3
3/ZevVXZrMy+Edpjrgz5jV29tVuZ8kOof1fGunG9ofthxm/o6i1d+Wx+B68p
8Lii0D5t8m1rnLAvvb6JUxPGJOp+o/kp3ad8RLYH/MaU3pqaRJ5EoXWW0l0K
0yxss95oe0G29KCxvHozRG+HTEj4bTD9jwT9rwT5eMo2oTc49BaHMNnCZgtD
IyyN3mjSW03SWTwW9B1Y46kxXpwwhlVjK/9gvVVdnrBvgPAawiL/QRv3V7eO
Xbp2YeqFrZfMk2WbK7ftWT4/8v25N2Hfz5NJn53wnVB3Q/HsEPcbO/+3Ddbx
Wnd+wmf7GuQZk/CZR2cfYUr/jHgMNZayAcoWOCluXyZ9I/pWKiK2pSldb6Xs
RL5qhbapybY2OmHeejPjR9q/t66x0spTk7GflbCs8qn7vK7fxNXbuMIgBslf
GLd/kHQC0g1UZPW/aq98n/7K+K0Q6dQOZWzDln1P9kS9nX5Z2HujfKDkC3WC
MOb5xtQ2DxrzLOyzbI6yPW4Lee7JZj84YZuibIvTiP8AfW2F917twbKVXZON
a4+WL/rkuN/Gk05iUMJvJurtRK2Zf0EPDxv7Ix9e+aKPzJ7PtCfqrYSeEadr
/ujtC/k8yPehPfEnoFuGjV0WhvBR4uPow+dK7EMtX2r5lOp8Kv7yFdb/4JA/
ofK0LPc3r29fPmxj08aUClsqnyj5Rr0W991TOqhXdX6JGosvH3r50j+esCxa
s7R2yaddc1dzTG8NXlFhX9uOtGmg9jL4dym0z5B8h+rH/JaQdMLSDZ9fYdu7
bPDNIn5zTm/P9SD/CwnrJKSb0PlTvnjCgAkLJp+FsUm/Qae36F4m/cEy65Cl
S5b+5KVyY/51/9MapL2qXsxvHegNWL0FuznltUnp02QLiJqXfLrl2y0bb04W
wyUsV16F1+43ad/NFcb8CfunN3v1dq90ONLlCDO9CfmXhP12rzAiworoDqu7
rHQiwzLGWAtrrTXsddJvqjBvnXl09jmP+KFS6z/ka/B9wnNRPrXyrf0s5P9F
Ih2rdK1Xhd13muPHx/2mtd621pp7H/kvJM/fpX5zVW+vCpMhbIbe1NHbOm8n
/FaTfFa2JeyzIt8VvTlwGuXvjvltX+nAZ0CvpP7vCvxGqN4KjaXt2683NT8h
7Z+Ufb+F+X8p5DcydRfRnNfc1xsK0iXJBi1b9IAKzx3Zt/U2waMxY4n1htgj
MWOkhJXSnHpGd7OQ/xeDdETSFX0T9Hoomc4h/U3GU2/r6Ayns9yitM8GwsSM
p21HM9mzaB3flT7mt4mF3n/19shrUeuK9dse6a4rPBYaky7Q/yV8vxNGNpA0
JlvYUenf9bbVPsKUQvskH0a2bxLG8knf/G3Cb9TqrVqNicbmjajfktIdRXcV
nam0d2kPky+LMAPCDojnl9Cfhv2/MFS/3k7RG6B6C1RvsH0G/T9xFKcY
         "]]}]}, 
     {RGBColor[0.7143916552021827, 0.769490795650367, 0.9129312915178225], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxMnXWclUX7/88WsWyes4eze3ZPbYjYIlKigtiJiqCPgYqFit0KiIUtYLf4
WNjYYndgtyC2PjYKBojx+7z5XLy+vz/Oa+bMfc3Mdc/MPXP1lPY+dIdDyhOJ
xDHJRKJC6dBcItGjJpHYqDORuK5XIjFTv0zPRKJNv+uVb1X6anUisUj58h6J
xCtVicQvyg9U5UfrnP9Z7Tyq/42C20aND84kEr+qbLe2ROK9gusOUFlN90Ri
ifJ/6NlleraG6ixV+Z7qI6m6Y5W+pPQ/gvlWsAOFY5P+H6jyGW0un670ez3b
JWDeaTPOb7e5PjicWZZIXKX/e6r8yjaXJQO3w/WuP6t8dfV9pPJ/KL+p8v/T
ONyp+ps3JxK1gv1O5b93SyRWEX5fC9/Ramd2nWG+1//1M36PPVS+VdHlp7cm
EsdrjO5RfmllIjFcbV6q8RqmtLIrkdi4SWOotEv/bxfcp4LvUP4YwdTlE4kt
Ve9b9TtP7/Vxq9s5S+mDdcb5R/X3XJ1x/l35ih5+R+ZlX73L18r30Lvsrf9f
Mj7C/3+9XP6J4Pup7jfKv6b2Jzf4GeU1gh+n/P0an/6CqdH7p9XOzXq3ozSW
XyudrN8mqree8PlEc5oTzEHKV3YkEturbu9sIjFN6Sj9XhbcRMF/q/d6RON5
tObx2jrXOUXPRghmstIajVGXysrVx9Pd3c4jwuFx5Ucq/7DSdQrOn672zlUf
OwrXaUoXaGx6qO46wvNZ+tJ7XKh0iMpW0u8VtXO24EYKfhfheJqebat2TlXa
q5fzN6r9O/XbTvmThcM1ym+l/OVKG9RvL43prprnY1RnI5V/2JJIHKf8xsp/
rvz2wqFOfY3s6fXCumGt8J/86cLhphjDfdVOUfN/sMZif/32E8w+qtNL+O2j
sTmoxuN+XZvnYqOs26iLNlP6PtuUv0xjfq5geuq9P1eb3wuPacJ3odJxPf3u
M9Xf8XwPSr/VuvosbZx31//7Bbu58hcqPVe/TZU/qdz1uqLu2Yy15u4Azd0J
bYb5Su1/rzH5j3D9VulmWreNwnlTpRd1d/5A2hd+LwmP85T+o7obqp3t1M5W
SZffpv8763t5VfkLBTNa+VeUH6O0Tb81ahOJC/Led97UL6vfg22G37/F39AI
/T4QTler/nrCeX/2hN7arzROC1W2ofD5UPAbKL1Pz+cI9hb9/0q/r/VboHV3
Xy+3v5vya/Q0/JBKj+GL+h2ttr5TPy+Ap8bn7grnd1X51mnDzFX5jkpv7eW1
cL7Gpl74z9P/69XvU73c3yPC6Ufh8pzwXNbNexzrdbWMU9ZvVXfvs1dofHZQ
O/spfzZrXM/mC6av1vDhGsfL9XxpyXvE3Gr//0lr6EDl/1TZb2r/eeXPV3l3
1f1GdVdVP3sJl2f0W6w2L1X5XKUPaZz/Yl9V/Uu03v7o9FxME77jhMNedYZj
vxiuukcr3VHp0/otUvmh+j9M+bVj/fSJ7y6j+t+pzYeUDqz2uH9U6bEgf5Fw
Wkf1yrRmBnb33MxivlS+ntZTN5UPUrqufoP0vH/O83hLwHyutbRSo/ZQ/b9L
5VWCHyq4RxoM00/rcA3VOUFj0KR33CbjssWt7ufWaKe6xt94meruKZhDBPOn
4EdqHN5RH9sqPb67v/3heq8NNf436j0201htmHP9+1RvG62TrfVL6f/gwP8U
lefzPlvvzfi9v4x3P6HGa+S2Cu+t7A/sE5vo+c0qH6F0HvuV+r5Ha/4Jzf2N
jLPw/0jlKdX7NuM19nW0eZ7ydwhmH/3/tM1r8hOlW6rONpzh+mZ/bvO3sFDp
T21+F95p3Qrvp5OExwZ679mCOUb/Dyg5/y37TZnxvzDhfRf4/2pMpiq9l/1Z
6fYag3k9vc+MrvM3xvdVWe3yoYI/R/k7VX6P8q16h7fU3vN5fxt8I/01ts8r
f7Tm7mHh3qZ1dJ3Kpwv+WNW7r17zpLJfhedP3b1nb6s2j1XZtd29t7OvXyL4
ScL/TPU7Uelxwu1W1d1A38fqeucBwusu9TNY/dyk8hHC+ed27X/QKBrzTTRH
/1V+htq5XbAX069w3VNtXaT8WKUzlF6o3/0av7eVXqffGezVlc7XVhqnmYF/
dcFtLmvx85kBs6jSOIDTkSWP6RFKpzcY5kOVHyZ8Dqs33fJnxrQTNNTu+j2o
Ni/WuvtXMEfV+9kvet9je/rZkozrfaZx3lDtHiOYhMZgVI3PgvvjvH2ku8/c
7VhLSvcS2EmCOV/wpR7G8ebAc0zJ5Q3NxvH6eBfG46IYk2MFc4vyx5T8jrOU
f0dtPtjodhh75mRWtEnZLZFnzGdEOzOrnJ+oOdqNcVF+V6WnaHzWVP6yctNN
7Ifsi2OUn9/d+T3UV1/wVzsHaDxWVv486Byl69Z7DQ9QOlC/G8v9vG/AbN7o
Zw+r7maNrjNY+XXqnafuSkr76He28p8Vnf9UabPSTL3P1mM5j/RLqu5/mtzH
EXqXESr7QL8TBLNY5e8rX1fxf31AV68befr6V/M4iHls83uvEe++Gusi8pOE
50T9Zqmty1V2hX4PqE69xuRWlU1Qm/9o/R2sdDu1c6meXxLjvE+T86M09hmt
1X8093vlXXZxwLyXd9vl+k73K7n9fZVeVu/+6GsN/c8p/TFjOhhal+/xu6Lx
/FbpxgWPyWpZwwF/sPCZ0WCc6GtEldvlu2M9XBbtby287ujh97m9l9fzXux7
Kj+u3vT8WqKzD1V+z2bvAewdE3p4H2I/2g4aQP0dr/J720wDVKh8NaXl1c5D
D9wk/MbTl9L74SlUNlBtnt/TdU/Qs3+7e09kji4V3K4qu1LpVfrtwf6l9CHV
vUh49VTd5/T/bJW/pLSb2vlTv9F6x+n6P0blF2ddtky/M9Xmw6o7RmNxG/RO
jZ9R/qTgpgr+WaXrVRpvcO4edWl7rzjz52rfWyLYK3p5fwL3SwN/6JpFQdvs
rjYu6OU8NPL02E+faXO+TjgcBB3ay3THjkELPKH2B8Kn6f9e5aaPFgcdVa/0
aupyDrU5/4rSF/X7Q7Czdb69orZ+4izTd7F7rfPPabw+7TDOefU7V/BXwV8o
XTtpfrU3NFJPl/Pena3u76A2t7Ew2nm1h/P086XG61qlp6vtd5S/UPkPsqbH
T2Af0/9TlZ7G/q66xQ7P8QaCGaW1fbbKd1TaT+l2Nd4rR5TMR/UvmDeGr4Cn
2KrkdrZUOlC/0cKhXjBXprzfwnN9kXe+Ue3fqnNzvOCLaqN/yfm99b1eLfir
9GtXHyfWGAfoB/jgA5XfSe1eonE7qN788boll/+ib+uhOn8Lqwh+gMp/0PO7
dV7MV3+Xqr1PlJ6VM87nKj2l3u/Pu8Mb3RPv8pvwPF99fCd8zqt1vrdgZtX6
P/nX4QPV5ttK99R+cjJ7Y9X/fVfbaT28rGfnCeY1pTdpLU4WzEjo4bT7Jj+l
3nVnqM0daszrgsefOqNvU1/tBdc9JfA8PXCeqfzGescTle+ub+2xWufrVH+I
1sxWGoujerrtydH+ToJfS+t3mNpu0P/eKv9cODzWarp6bY3hn61em0dmvL5Y
yweVGadetR6fy7p7LY5W/sS8v9HfVW9t4Z8RzErqYwvN4e/6f7hg7hR+n2ls
FrN2kl7D1F+zzt8v63ksNLrgn2/2+f93jc/yXVS+vd6/n8p3Vv4PlT/V7Lb/
iPZHKF2qX3mFvxPkOmerfFmN2zyhzHs8dAM0A20vi/b/ES5twnlr4fyT2m1T
2qm18Xezaag3lP9Dzxv1O6fMfE9D8D6jurn8P9AtGq/z9TzXZhp2TeFQrXE5
QTg3CebLZstkPgi5zEX6/7LG5A74a41nChyEz9P6Bger7iCN5/uCKVMfFwmH
2lqPP+di99jzGP8eMX7kd23we/K+L6rfnuxTRc9hbczjXjXGZ6TaOa3c5V8l
3HZNzO+4vMdqrvrvq/laOek23tT/v4XzFno+XHi/Kdw2avH5yjlboTF4RWt7
fdaSfhO1FpPIYQR3tdquhTdTfn3VeUXpIK3trVW3BrmZyrqKhtlGZeuo/gbI
ytTfED17SfDrKV1XZRvCv6u/N8ULD1B6tb6vQarzi8oHKh3QZj4IfmhN1Zmj
umspfV3wKyOTy7p92oFfW1nP7hNM3xaXDYvyF7uZnoCW4NxcM3jttQX3qJ71
4z3UprpLzFCbW7G3BX/xmsbqL+F+l2B+6XR5H83p61F+oMYw3dPrlbX6crn/
k3+pKfZ25Q8V3GWCT+qb3bjeMEchp9N4pjVHt6veDLV/gOb+5YzHbHi1ZQSn
avybkBnCCwiPh5SuofRF4dwIL5W1DKu6l3mW/lGXsXm6m+cF2njLNsP0V90B
MT7rBu2wRsgTkNUtqLG8br2881foXR9UnVHq41it652UHsF+Stua66eEX63S
xzgjla9sNX+7X635pWtUdz3kozmflXvod7vGoqB940m1/1oPt3dktMm6nhBr
u0zt7i+4pVpjh0HHCc/BSp8XHsOUH4bcUfmhGojv232G7h7tf42cqtZ7y4Xq
+wX1s6BgHMnvA02ptg6OPYGy56P8ApV/X2PeFRkSZzFnMj/O5BMEM0tt3Qkd
oPFfmLf8CjnW+o0+XxhzzuYzlJ/Y3fQfdOCfGuedurnuX8gZ8ob5ij1GfW0T
9OI3+j9V5f9TunW181PBK2+56adaJ1e1WOaQavXYHFDr8SHdL/I7VBtvcEae
9bLyYytNJzF3syu8P70Y7w598FgP4/+h1tgYpZ3IVLv525ykdLMGj8++ZU5/
iLE6irNU+WfUz5HK9+tpOQx75fs1lglDR79bY/7iSMG9U+Pza5286/ZTukHe
9PHVzYZ9J+DXUvmb0BMqf6PGecaipcH/mYPf9d6f1Jiu/r7WOGxQ7nmmnLke
hpxR+Q3z3g/WiH2e559GXeTtH4fMfZ72zvfgaVV3QN7vcqFw2FHf8tc1lm9+
kXSbteXWRyATnIEcQmVfBW7Afhnw9Lla9Hur2vpIY3GY1ulB5XEuILvLe2wf
1PN1yg0PTbJJ3m3ervK99e4/Kn8ANI/SxTWmx3YUzCLlHxXMKUXLJlfROnlY
/79RX1+2WqYInsg9SLOB85yA2T7v9n6NMxp6njbXr/K3tTjKt8ubnvouYzod
mhta/azuXrvgfF3IPpAxtKr9D5D969tpaTbN+52+p/dbrYtBJ4MuBfkLspf3
Wp1/V2kf9l7BT8qaRjmz2nqeDwrOX6C66Wbzwf/Tuu2CzlD+aOCV/1P5k5Q/
NuO5Gi7cCyr/VuXjVX5ExmOwjvaTosq/V/lBKi8p/5PyE5RvV/4X5Q9V/hm9
z+nIbav8nZ9c7XMxK5j3BDNI+9OJajOpvtYR/utonVxQbZ76UdU5XPmzqiwL
Zr/fWDi/0ssyROR+J7LvVvvMrSs4P07tPSP4a1TvLdFjQ3tYvoZsbWSz5djI
s9kjH6j2d9aodXKk8tOU/1F171Z+F8Em1e5k5WepfG6r8xPU/vxW41kPPaXf
fHhuve8ayg/Uetlb7zVPY3c054xgvy25/TGq+7/ubn+Tcu+lwLBX5KEh1c7+
audwlR9W7X19CfgIdig0rfB+g36V/lnlPDKVm8FHuOZ0Tn6tfekavetctfOT
9tvPBfO5YI5pNuzlqvu5YKYI5inBfKn8NGR3ym+Jbk+4rC6Y/2ncnkD3oTqd
ep9nOA9V/rf6elT5v1q938+p9v65tNX5vdTPSm3mF69p85kI/MQq67EeV/5U
5f9tdf6fVusn0FMc026ZP32dU2WZ6H+rLedfpc1rjzXImvoanYra2wXaWvnd
qqyDmV9tfd7sVpdXCv7OVvPDdwSOHwbO9+r/nnxHSm/Ub3vlP+ttPhh4eOcn
Wi1XR75eLtzeQj6APFr5N6FDWDOqc79g39UY9m0zbisrfbLNZ8xNyNEFc6tg
3siahoaWPjTjM//dap/LrSofqbmervK/VbZ30Ifw3+DJmK6vsTpH41HRYnp2
YrVp2kF5519QXyP07B2NzcZK/9T+Nlh78VKlF2l8V9H3c1SL9S7QsOPU5sqi
afvo91ud9aCM31DhsEA4H6H8R8L51bRp35XSpqH6Bw3G3PQPenLDoK2gXQ9T
O+upj0PbLMtGp4BOBvqnfy+fv0OrTUsfLPyv6GH4kdBDTdYrDFD+vKLhx7e5
3w2ij/3a3PcmGo8urfMN2VsFP6vDNOH2nMvq7w/Bnqex6C+YRdU+q2/VXvGD
8msJ5pZay0k509doM12GPJs5AQZ65H2Nw7Yqb9M43Addw7ep8nXanO+ntFNj
eqfKupTuJZjNqi0XvabV+bd7e/9izPZpM023tNp0Hfj9rvy5SntpfJdE+buq
M0rwP6jNdv1uV1lHi8fg71gbbwlmE8HcjAyg6HY2pJ9W6z//1ro4RP9HQMto
rF5Ke9xXrbYuA70O+oAx6Ae19s7NmAYeGHOKLL+jl+XnyFa7elm+upPgD0Wm
3uH61EGncJL2uoJgdmyzrh2d5wVt3lPYWyYLfk53f2vIqL9Abh974Cet/t43
E557NFt3gA5h5zbjsI/efb+M9SzotK/WPJ4g+GdVb3zGfGFvlW3S6PLj9P+L
Vre/dTMKD81JL/Mx0PgD4h1/0LjmVf59N9s6cM4OinFYN97r1UrnWduzWqxD
R5fOOK6m32LO5mrrrdGdLUv5GeUbC3ZAL8uJt1LdBepn6xbraamD3vzQknHY
Af2Rnr0nmE1b/I0Oje90lP5/rfIJ+o7n5D0XB6PLThqG72gL/Z8nmC1b/F2u
F98pZ9jgwG2lwJP+R1V5TRdov8mybmR56IqbQ+79g97l+5RlnS9mTTNAOzyT
9VnPmb9Ma+8NrennNG5jtB7eUX6h3ndXzcVrtZar76pO3kaegA5L7S1MWX40
Rv/3U/9vKd1b83WY6k9Vvk7919f7m30ROkD700OcxVWeyy3V5jyVfajfMHRe
PS3fQ36L7JLyLQU6rtWyovlqcxk8s3D+t8V86j+Cv06w3wiX/6Ush91DcO8K
z90L1kG8VGs9BLi/G+/1KDJbtZ3h28paZviwaNQjVacH57faP1b5rwR/jNLf
NEePKz+t3GVf6/cQuoCk/5N/NWsaDFpstn5fCr/fSpatwxvsmnMbT0Q7b2VN
70H3gd+LtaYpsNPZraftSToE8xbyQHTxmqNnakFaa7zJ+XfhRztd93rKNQaL
U5b9fVpruxRkdsPQAcBzq43zhEeZyjZU28fr/8sa52OVTtbvNeUnKX1e6TN1
5pfZd9h/hpVs2/NYnb+xowX3EnK8ossej/Lu3f3/DmyQOt3+kS1u79loc8PA
Z6Lq3iN8FqvOrxnr6BaHng6eFt71Y6U9k26ftmnjuWhnvYzTVJvbB29wRcfO
mcvZe22b89ALm+udm9TmYznLepl3ZL+HwO+r7sFKr9TvJ+WvKFqGB78NL/C+
3uEYdEjt1n3Oj3X7TNLrmP0UeRZyrelKR9V6nJFDAzsv4A9W2efKj4E3h7dS
fnC5yz6L8mk9PReMETYq0Eac6wep3SdVfmDR9li88+xyyz+Z5+V6KZV9Gu0w
37RxstLzi5YBd2kPn1BumHkJ85Hwk7zbiRrr8/XsNo1rSutoRk/LyVZV+d3I
yFizev87kKOqbHqty7Pqd6/Q3e+gOe9bcJ6ykxrdPrzq6ciE1d6DWduhkUc+
iVzhlpAtFFX3VuULBcu9yd8T/Mejyj+JDi/r+UNm/6/w/CdlGTr8GfoQeLQ1
VP8ewddnfV49VOsza72C2xmidLWCdbN1gnk/a9oMGq2fyu8XTErrpBg0JLTk
B+rn/ZR1S5z/yHqQ87QrzddZBnFt1jwXvNdHgp2fsv6pkLN9UjFnm4s+ddbV
DGx1+pj6fKLg8seVXpE1TwFv8Y7aeDtlvdRLeraWYIYj066znBoZ60VZ8zLw
NGf0NM5DONcENwT+umB5NvDIxPsqXaXO8tz9amyXho0Jz9cKGGTha0f72ItV
og/g7Kzx+EALfFRv+u966HuVL6i1Dcz4gvNDsdMoeO/bQOkSvccfKet7kvo/
E/m10gn6faL8wQXr/ZHJwhv+1WJ9PXp7dBDsa6x1vq9P4hvbX8/mM6fo9LTG
nhJOZyk9tGAZZLvW/BZ6lhbsoRr/tMqvF3xTwTpzZJHozffT/3kq31fpc/Wm
RXlGGe0/oLb+Sfo/+TUF16kxryhYFkubt4bu/sZay5x6FEzLQdNVBHy3gm3c
LhbMld2tv7op4N/W9/JWo3VjHOzA/Kt1/nHWfDr8emXWeiL0RV/lTHdBf+2N
Hia+x9317Y3XnFR0iRYoWLeAzUJrwbhlC7bduKrW9hsnd7jvSUrP0O895U9V
WlswTI3SOwrGs63gfqZHX1X6f5nyv2quJmUsr31SdT/OW8+FvmuVGuehUy+o
9xpCj7ZbynYNlLeFLQq0PLzGFXXWuY7LGWZbvffPnOH6dej/yWqjS+ldwuHK
OsNTHxuDm+psd7Vdu2F2UN3BTYaDDttA++ESpSW1vajKNi6cO6sI75ze/W3V
W08w/xX8EKW3RH4qe6PepxP5tdI1VX61ytdQOrbR/WK38JbabBDM9sp/2e58
D83dv8oneV/h06G+MtBCyB8ytmndsugf+dUzPqs4sz7VGH+eth3hAWnz2NRF
dzal1XZY/2jvPaHgdc56v63OukzG4e6k88jQtov2t1b6cJ11k8gwdys6XUv9
DmRNq51N9I4z9fz6OtupoptFrrtcBtzg+tTZkbNc+R2KHoObo1/2a/R+0EiD
i25nkNKR9W63qsI2qdimYlt5aco03mOC37nWcihkUP0y3t8f17ue2GCZ3g7o
iJT/WXUfFkxtxnz3A4LpQj+i3wC19YPGfZLg1tXYn69xOE+/R1W3lLGN34OC
/77Vdmw/tJrnHlRv3uBV+BnVbWz3vlMe5+za+j0Or5AwfwKf8mvJNoTYD8Jn
dRZs23OS1vML5baJTkADaK9JlzuP7Jv5ms4ZWun3ps1v1eZx2Nao36M1rw16
l6+aLbMYXWk7nD1rbF+Hbm6O6m2A7kZ1p+TMc8F7jQi9AbLxdYoe56LeuyPj
+ZwjnMc0+H3o+5loi3aQeSH7eqrVsjlkdJ+wfkum/Y4pmn+DX3tO6ZVal01N
HhdkGcg0XlRaUp0D1Ud7u2VwyOJWVX6wxmcPvcNVOevi54TtU1rtr4RdQ9Y6
TWw64THOCnvsj3Oe819i3q8u+v+7GdM1i4K2WRx56Ktf6/yffFe76x4v+Bbh
/Hud5SeLAgZZInzCL929X9+q9v9S+VmCP02/jdTGHjnzDNCQ2B0c1mxd2Llq
e99i2A1lLJ+h/X5651lqa4ny++rZGXo2Ans07QHNHe5rIN9s0fLFs/X8Mt5T
5XtrnF5HTxj7CXpR8EU3Cq/2dvA12B1gi4DtwT1qp0z/ZxfNi7PXw3cM0tpP
1LuPQ+q9t/OMc4h60H/YRyA7QG5wv+qXC+5epQ8VbTv+YNH8GTwePNpFbbZ9
2LY17Gq726aWfv6tc1/nZJzyfuPwRxDMIOx0dD71wO5L+f2bTaPepfH8t9bl
e6tOQ/CS0Njg+G3g+UDRNMmFGevq0Pucgj2hxvMc7cUDO8w/wEdUCLdnBDcL
Ol3jen6NbXyx7z241ennyEMEv5PKv4CvVfkk+GHB76Rx273O+2xTyjDoFwo1
Lt+h0ukekZ+NXqGHZdc/F2zHu7Dg52MD5vhOy7g7mq2LQyeHzmDvOsO/rLLf
C9YVXJJzGc+wB6btodH+T9HuKa223T5W+dO6GcfRgSf6nv3qrAP6pLe/pxk6
n19HzqfyAwS/rGBdYXmreQ72eGSabwvm8DrLGthfJyp/JXL7ovuar/Y+LXl9
ZvQum2kP6KP8verrbI3bueCt/m7Iu3wU8i69z5ro45Q/sM76UGQgSwrG8xLh
sFudxwQ939nVhmcs2I9XhY/gXYTbFMHMEj4LlJ+s/Ezlh9R538AW4nXh2ap1
co3m/2SNT2edfSteLpi/hs9+o2Q/kUOF/+vKF9XH+ejplO9Q/p2SdWXkX8AW
stlyja+E53FaN3O13o5R+kHJthTvK9250/YTh2es66NNdII/6dkw5Wepjbp2
6+Qb2n3usRezD/fU/9HKPyeYOzSetzf52c767aLfiaqTavYYrKdvqJve6YF6
6yobos0HhU+vdsO/KNiPNRcLkpbTvl1l3Dg7oN8pg4afK9zGKd1NON/TaV3y
vaLrLlP915BDaQ7XbbVd9IBW27YM6277FupQd5zw2UxwG6n8BtWtbDfMzhnr
xNErIE/E1jLfYHvLfI11DTx7teTy85o9H8zLW0XbtIAPuk7GZOcYh0rlK/Tb
pbt1rdkG62qfUzvNyk9VG/vg+6O9eG+lL5QMs7Zw/E+MKWM/W23crd+eDT7D
STnHy4T/dsonlC5N216efe/PtP9fkrbc+8ak9dZbCnaLBusu0WFuGXnoU+ha
aNR9Bbt5g23at21w+z8h0xJu2yh/ZiZs83u6v+W68u7WOZZr/5lXb9njd3nr
iNfI24YJW6a72EdrXQdd5cVFj80lSp8u2U/pyZJ16eCDPP/RRuusyOOHgS4H
2wns+pHhA3d3s2W+rxU9VnvFe/0CDabfaoLJaIw2Ym1BvwjPY1PmRYdho9rg
Z9TbO+q2tLv8A8Hn220rklOabvccHNFsG1u+hUv0/9lm0+sV7R7jzaOdxxr9
DthkIHdD/nZvs+0zKDu3aFjq4K/xe3zv+Ie9kPdYPKf0yWbPQ7rDNB02Aci3
H++wTr2f1vwGKltfv01V3ifrdX5Vxnw0uvMVfkGkv4Ruf4d66/Tx20A/hZ7q
3E6XNwuXIXqfXZV/mzFW3V6CvSVnGhRaFFl0l+Da9Q0ckretFP5a+GrtVW/e
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
sy/qvf6ptNx+cYPHAZ53+7T536FlnhvmaEulJ6mt/VT342brEfF1QM/Yp9Py
3G4Zt7EoxvOkKsNMTXicFzS5XfxUgMdXBT9QfETxBb2s3eN0nOb67SaPGzob
9AvgeZ3wuaDW3xh7ZU3GdozYMz6tMXgqZVvDHhnbkWJP+q7q1QiP2xPuj37Z
T6B58ZuF7oV3xV8Rf8M2vePuKm8NmgWaFZ5lZZXdr/ZXUXtvaT88C51oxnpf
9L/TVD5XbSXV19MJwz6Qss57WdpzMoF11WK/ljl61+9V/qBgBpXZJwK9Bv5g
9Ped+n0HXaHGdpHyeyv9VvD3CX5lwYzV/4Uqvxo7k2jzMZ37uwKn8v90+rvk
+2SPpN79gU9LN7cP7U36feS7Z2yLi00uNuNljdavVfAtN5rXIl+pX/du9ndj
TeLzBn8Bv8G4rldrfxbWNGNMOTzIpJTrU/f5dsvMsPN9pMXyHOQ6nCfw+Nhm
Y++yPCaG8lUZ239iB7qn2hmbsszub6V/peyzhP0IeMLjPNpu/G8nhkmT19io
8Lnn/yFq68SU85TP0jc1THjfrLSj3GvmOeH3Fr6vyl/HmSv4x1P2xYIW2191
38MOQ2UPpez7tCz8pPCX6tPomBKcGes1OU/cj++b/Iz1tkqV18yDyN/CZ+r1
qLtywKS0FkerTrLLa6tR8M/wTfW2rOCfon0+8o32+2hrtM6XGB/ofcm/1GJ5
w45Nll/0ER6pKq/ZleNbYI7AJRX4NHdZvtW7y3j2rXLff4edJ/aeH7Qbz3fV
/s5an52Ntn3F7xEa9M9m65rOCTkz3/sFDR7z4e22A8cefES7y5fhC9hu+CXK
/4ZfnNpZM2d/zLMb7JO5Ws5xnz5VOldj/3LKtoyLW0xjQGs8EGseX6xXWnzm
cvZiZ884YFsIvl2B81qcF3q2qd5tV+HXofLGSsOQh9dCboNt4oqxHBXtYM+I
XSMyzDNSngPG/wWNybX6vtr07IpKt/8xdBr7qmA+aneMAfLQeXer7l0p2+/O
a3HZ/Hb7mBMLAxnMAMGu2+iYGH+ETxy+cR+1mP5coDV8ZLPlTB9pHD5tMY31
GvFzwo4Xe94Z7T4XpistlHudP1XmuD4Dov3F4b+GHxs6qLMbbfsLLQht9kW7
dVnYNGMbWdPlfumf9dgWa5Jxw/+LsWJvwP+K8474JsQ5QRbyP7U1UOVf4vOH
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
kTr+H0xEfPE=
         "]], PolygonBox[CompressedData["
1:eJwtnXmc1dP/x+801TTN2nrv3P3emUG20qq00EJChRZFq4qiDS3SZvmKQpF9
abNVKqSoRIQUytK+Kbu0UGgj/Z6v32v+OI95n895n/d5n+We8z7v5Uyq79Br
hpQLBAKNKwYC5fl7ZXEgMKtKIPAz+SuAIyWBwIiqgcCAyoFAKhgIrCe9SYVJ
4DSgfE5RIHBxViBwIjcQWB0KBH4A/49qgcDDlQKBL8LggP8HdBtkBgL9koFA
V+osoG5HyrsA1wana/VA4Ku8QKBzIhA4Sf0k+ZtosxJw+VQg8EF+ILCE/IXk
/4pDG9x5pErUTZUGAr3A71YQCCyl/W9JA1SfVEJZD/D/gbdTpE8pqwq/d9O3
M2j/TdprB85f4G6hD22BD0JzAWXrswOBd6KBwLE03+F3OfzXoH5LeKgErfXw
0xq4E3X+pX57+vgR+Vfp72TGJw7+bvo7kz7+Tf0PoZlL/j7yW8kvyQgERoL7
D/SvKKN/HHg3bWTB38DCQKCYfDt47AvtW2kvH/r58PcOvI6Cvy9igUBmhH5B
ey3pPfitknLf1MdC4LrQGAut8aQD0P6LfGvaG037P8LPd9A8wHxNps6n0P6b
8kspPxt+jgY9hhrL44z3Huqvps2x9P8N6FUF/lhrBN4aw89q4LV8u5vytsxZ
H3i7kG9boDUFmo2Bn4i4L5rjE7Q9i2/HKDtBClBWjvZaU7YtJxBoBa0VlF+m
utBYDnwd5f9R/jxj3FlzRx/qFxinIvx/wxjMou4FtHEd9Jox/3vg5yj896R8
HfjVwW8J/6/Rn0708VLGYg34LeCnP+vjDMZjEf25j/ojwV9HXz4jNaa8C2M6
krGqw/h2Bh4FzsoKsE6d8ZTPpf2mlF9EGk57e6B/G7TvIBVprLWmtV6Zwx8o
Hw39/CzTvxN4JH38nL5MYjhWUh4hP5D8YXBCwGOpH6StafDXAP57g/Mg5X/T
vwdYK88yf7vo20baeAr4aeocprwr9LbXDAQG0b9y0PqP9C+8DaMPsxmPR6nz
H/TOIH89+TT9KwWeCE8nqNuB8b8bOBec2cC58DAaXhLQHwz9I9CrQ/szmbPe
jHc1+Pke3Jol7v9w0hO09yPj9Svj1Yx0VchrUGvxTWj+BLyTbxVo+354uIb2
f6b+Udr6l/Jv6Gt95nMT9DeTpoJ7UbHX1gLqNNH6IL1RpWzNgZ9MeW/QHhEH
LmDNlKfsavKFwD9pT9F4Ml9fg/8M/I2B15uYj5P050fKj1B+kjrrKW8O/Ueh
XxmevyffkVRM3d/p733gnyLVZa8cC41i6mbS51sZv6nkzyA/hj6uKOfxvAv4
bXjKY+y/JY1ibp5l/G6gb8ugVw3aI4u8Ps5mTT/OfH5D+3Wg9QY0jsNrK8bj
R/B/Ji1kPMrxbU0l7wnTY17DWstv0p+OtLcS/Oug3Z00Bto1Sr3/diGtgdcG
tHmQ9j6nzlOs5Wuh2Yq5KmB8Z8Lr8xH37Sj0ZkPvFH26iLrT4act+V7qb4bH
MEXZZdA/QPlIaG6lvWrw34fxexj8ueDuAedXxncS/K6m7e+hUYv56glOHfJV
KR8KrUakHrT9EPx8BD8zoVmv1G2q7VqM5+XAj5Kys11el/KqtNerrL15ao98
S2hNAGc38HekNuQnk78V+pW0hsD/HH4P0997yG8kP1N7KnAXeDoLeBj4nzG+
38PfIfg/SvtrKbuN8c1hbPNIW+A1kzqdqP8R9DKA94L/G/iHwf8I/L9o4xXW
yw/06Q3wjzFGs8CN0kZl8leCM5b685nfE7TXgD7lU3ce/WsIfB34B5mb+fTh
bGjXL5u/LvD3BPO3gvHYCu0Z4F8A/g54aAruPMZjO3BP7dFaT/BwEPgFaFwF
f28hDJSH9jvkHyf/FDSPkB+qOYB2W+r8WOw9U3vnLs0J5Zm0MTDDe3h57dWU
L8j2GjkN3Jm0RWcx+NPo3xb6/ztraS35x8h/nzBtzYnm5kvwP6H9LfRxJH0b
TvuXU9aPdJry8dRZTt3m0M/Q7zliWs1J7SnrR755Vfd5m85eUpOqPnMra71R
fgn8zibfjrK7w4YlA11Ovh7lVRmrmtD/C17GJt1WM1KA9r7i21r42wF/46hb
hzFYAdyG4lPst43JryV/JvP5EmvjC/BXgr+Sb7eCnyOZgfnsD0+5wF/Q3gbK
xjPe64HX8e0t8JfwrX/YZ4rOlsfgrwX8/cSe0AC4gtYTvLVnzvPYK15g/Z2k
7cNaz9DuSvoDuCK/gS+hVRWcjlGPocZyCflhtLeU8Y8zH2lSAflaRW77LPpz
kv5k0+f29L0Wc9gR3PIlltUeAj9J+/+DfqtyxhHuHZT/R/nbfNsY9BrVWt0J
vTj5SuBcDu59zEE1xmcc+Xdz/W088Hfw8Ga2+3AEXiuQX0//r2G9fgD/I8hf
Qdn77Bn3s5augMZ+6l/Gfvo283+cb5cDtyMtIx/jN/QLfZ1A/qD2S/g5A/yb
oVEReD1pFeP9NX0ewli3YHwfKvSZpLPpcp2p5J8l5TA2V4G/ibqDtOahnYan
7+HtkGQa6vclX525fJv56QP8Ejj9ae8a+H2Iuln0cWNZ/QrAV0L/OWjXJd8Q
/Nlpn83b+T3OAm5TYtlTMugN9PURrZFsj4HGogpjdKiC9zztfRXg8QZ4/wv8
9+H/bHDC2f4N/VTsPVJ7pfbUKZS3L+vPdsaoLbyOoo0qrKVjpBLan0j9TpRf
Q9pP/YOsgR7MfWfy91I2gTQv2ziHKN9G+6Po/wjGZAe0tkLjTHjLYz1souwC
2ntD8iDj8wfrYTljNk7rGxoN4WchOJ/B212MxyDKB8b8W9K3m4Fvj1gWkkw0
Gtw74paFM+jzVuq/GvZvcS/lO7X30H4J7T8CvfXgz6d8IPjfU76rxGeKxkNn
yFTy54OzDFoNofEP6/8I9f+kP7N15ynyHGuuD5KepL8HKK/CWD9O+R/aL8mv
ZP7eJ3Um/zb89mUsTpESOn+Z483APRnf8eSPUL6E/BeMfyb9m0n9PdTtQfks
xvqFtGUF7Xna+5pQ/wj49Wn/O+q3K/JeNB9+cxmv7tCrx/jWJW2EvyugWQP+
ukBvCLjP685RaBnjaeAr+bab+kupn0/9ddR/lbY2kD4Dvor6QeqHSO2BNzEm
Y8HfRPkc+PmKPWA8c1vIfH4N/A00o/AWJ30G7cugcQa8lLBmVtCfzxjjt6t5
jG9mLKcwf2fn+TeQB34n7VkB3xk7A3cr9t1RMl534Bug1xB6UxmDncCvkbrC
yyTSAuDrSfV1VtDeQvjpAI8tKMuH6C+UbYZGY50HlH9If3fC0x3Z/ral2GeI
zpJc8H8GvybroyX5pvx+g6W+Y+iuUZv0dbFlFMkqDUibyMd0B2U9tQO/gL2o
fcqyrc6/RyW/0sd10L6NPlbQ3REed8DLTtIU4PcYv0z62orxfAPcXMZoKXO1
kDH6l7LFWo+M1bl8m075ctofAe0oNFdEvOdr718MvdqSf6j/lH4f8LSfsb+G
8b422zL5CvgpLrIsrevYn8ztUvDvBH8M4/sCY7M97L36FHO2j/p1i3yWdQL/
P/DfoY17yB/TnqbzTPKW5DPy64Evp40T5b2na28fKRkZWvNo/1fK1mo/0P0L
GjfSVmmRYZZ54Bj0T0l+hFZv0uu0NYLxfJXxfAeGXwI/v9SyfQ94XM34Pcm3
7vB/P+0tgsh3jFdtcMcxXj/S99bQ3wT9adCvpPsudT6u6DO0FPiOsM/aaaRm
xZb5JfvrDqe73IUR333PhJ/PKC+A3kTdnWizA219SPntjF0V5uhe+reCNu6l
/BzKu0v3AY1vqdsRfmqB2zZiWvWZr88Z70uLLPvMgL/K1H0KGusZq3HQvBD+
++q+XMO/t7WMxa6w19JpxvA3aN8aL7vrUedL6n7Ot+XVLKMMAndz2L/143z7
hbJupJ+1XzBn42jvCvg5h/wLjMd6xq9lkc/Gu6mTRfk26k+nLyep/yt1N4Z9
l9KdTXe3qdIx0JfvSdOAm7BnPAEvFdk/LgI+AM/NGZsWpLnwd2fCsmQNrTng
09A7XsU6AukKmtDfRYz9bPh7T3cNvn1I2QuSWci3oI2XgI/DY3PgPtB/kvXx
FKkv8Pu0eSdtjyd/KflP4PE1eC2hvatp6zB9nJ/tM0xn2XJ4uIrf2m/0P0Hd
d8GfA/4R2o+FLcPqt6zfdBfpykp9172DORkFvIo6Y2jvAco70F4/+F0Bv7eq
f+Sf0JxQ/xvmsyptN6HNNszXUfjvLflbZxz1R0tnIVmZNXUx9WeAkwNvi+jz
YNoaQhpIe29rzHWfpfygzkPaWwf+HOoPp/4U0r2V/G0EZTMYoz8Zr79IM4Gv
1++L8qWU99R+Vmz4HMYgH3ofS8dRzTov6b4uIr2T6TlpCrxYd3r68xr5xuTf
BH8i+EHG8/GIdSTSlbzMHtAc3Om0OTbPd0TdFfUb1m/5MsZjBvgf0MfHGPtG
1G8Uscwj2edJ2rgeuCvjMbvQ+q6rgZ+X/rIs/xxw/7R1VfpN67c9gza/oW4t
8rsZi7/Il0pXJnlB673UukDxfyXwROp/Tv1/JN8DD4Dmu/A3hDGaKF1Qqeda
Og7pepbTv6er+c7/H+M1M+jzUPe1+uDeRnvP0n456ucz33+W6eOkc8ug7//B
Y/+A9YengTvRxz/p79+kVdRtVGJd6IfM1wjylal/Hfx1J60LWcchXUdPUkLr
gfVzG3Wbg38141eX+oupf5x0C3Bz2jxNf5szvin6Fi71WaUzKwq8JGRaoild
6yBw3oPXi6gzUHdneJyfbxmuFfBQvn1M+XT4fx3aV5EmkB+vNUTZ0RKvVa3Z
m6B3Y5HHVjq18fRlMPkK0C5lzlfQ9zGSiWn7RfDvKvUdTHexQeDUpz+DabNS
lsdjCPBkyXDVLKMtpu8PMsadoDWNlAf++cXmZR7l5wLfTJ33qZst/RzlV5Lf
H7A+4SrgEfC0utB96gFvpcznX/C7hvVZEdrvMj77dNdk/IrJL4VmHrQKpO/R
Xg4Ph2l7JW0MkK6y2Lpz6dA3QOsU83UV9NuTTgM/Sp9r83uYQz5Iex+A83I5
3xET1D9O+aOUTycdpnwG/e1If8+BhyzybUqt+ytgPFsz9p9IBoGXWrT/ouS5
sHW90llId/Fx2LoX6SSkm9hH/lv4S7JmOsW8ZrV2pXNYB38fhr33S2cj3c1d
4LQCtzVpLHAAnItZP5eQyklfBE67ar6DPE1+bcRnVy78b5a8GLasKh2cdHG6
w+ouO5I+PwW/P4Qsex2G/1LmYkPYtgXp5KSb+zzss1E2B9keKtJGqwLf2U5Q
t7/WbA3rLL5jL2nP+B2E176Ub6L8f8XW7Wyhz/cDrwlbFpBOXLrx82lzFLij
SfvAHyV9TpZ1tKOBN4CzuppliGHU7aI9BPlgG/PxAX2dnrZuV/K1dHlPpq3L
U35EkXUy0s1MBv8m6Peh/8vBv5/2/tT9hbS9gmWIffQtK21bgmwKM2h/GOku
2Ragd5v2Z+pXpf/VSGuk7wv6rJQ+94h0a9QfqrswY3wW8Cl4PgKtP0hP6e4I
Tm3q3gPOH7Sdos1URetQ0ynrgP5fFwT+M+B/mnRbd4P/e8g6YemGv4PnY+Rr
x7zXjiF/PvBCykdXs0yWlK5VYwitXdDoBP7eiO0vkhElK84Gvzf47WmzAWVb
kAGvYH7ep87N1K3NfH7FfBbR/gPg38pvMEbf8qVzoLw0Yli/Sf02Xwu7rvaw
m8iXxCwrj4S/YuC9rJHqlbxmtHZuVMqwjNUPeCpjtrHQe87ZtH0fY9Kpoufg
f8A3pixrPAZOgLE6h/a2gvsyfXiPvhQkrJt7UTJZkfcI7RUdwM+A9mTS14U+
34bQn3nUGazzlvEYW2QbiWwlvVgPb8r2EPVcSkaaLVkfHsdVsY1EtpLaaa/d
O6n6A2P3ETSPVLDNrrx0R2nbhj6GRoiyCdDIzbDOc6J067TfkPbPpX5fyvcz
3+cXeI0cBH6C/j5byXN4F/hp6A2CXnntcfB7fch70wfUr8Ja/Ir8KfL3MWaD
Gb83oD++mm1edXW2JP3biZB/H7iv5Ffm93pofkbde5mjy8m3I90HfCntdcjy
HGQUWQaWLKwzV2fv69AfB/1OjN8iyr/Q/aOC9bc3QXsWNPpoPyDNjnnMNfaS
MeKUf8K3CbI10N8qlO2Gxl20d4D0LeWjmc/WOV4zbZnrnyl/iLKV5PfpblZm
r2zGeOzT/Yw+tQL/HnCWAbfW/Rva6+F3G/x+wbcg+ZC+Ad8L/T+ofyl7Qm/m
u3rKsqpsfDWAh8YsK0+C3hDJmtD7pNAy8B2y58QtC+vbXZRdInusbB26k7B2
3iRdzdj8xrfFwBsi5k06z7vA/blMv9iQ9AP8r4KnAngrJH2QtA1DtgzZiFqA
/xL1O0B7LjxnMR7XR32WNwL/OLgPSeYusAwqWTSn7D4rHZh0YWPBb5vj+/gu
+t4sYtmkAXX+pn4h+Z3UrQ7OPNbLbZL/KVvInA0HfogxWCRdOzgPAz9AG6so
700fl0L7fPFEX87k23fQu5I2cuG3G9+ypS8rtu5fNoAs4PPCLjsbflaD+3uR
ZWvpuA8B79H5UNlrYhf5z4t919WdSXenhvBQD14v1P6lvQb8mwqtU5FuRToh
6Ybeh8Zp6Rco71NoGbEG8D7a7E7bN8g+KN0aNHIyrZ+aDxyRTFqmn6xAXxeB
/3qm75+vA1ehvGehZfRqrIeSqG2BralfCrwraPhVeNxJPjdtWbI2+P9QdiRl
W6nubLq76U6qu6l0ONLlLCF9Vsk6yKVaO9Rfr/bA6cH4DtBvjnwuaQm0xsHD
sgr+dje4t5FWaa8Ev4vsQxGP1VfaPmUfp86VlM+gzkfS7dN+bXAvILUkn5LN
mLaHMX5Xgz9S+toKltlGAX9M/VAZ/7fQdltwjsNvlPU5kd/GWHA+lS0YepfC
7z/M93uUv0L5QtraVtO/Zel0U1GfkTorZVP9F9yKadsudSbrbB5ctn9oD59C
Phi1LVdrNgR8Q8z65jNJPYDLhS2L5pAvpL1PIta1tJECRrYfvu3Psw1ItqAu
/EYeob9joPc2+f/FvBdKxpas/ZDs2fx2U5TfGLNNTLKsZNrzKesdty/EMNZ/
E8bmW3AWZ1vHsxt4ovZUyrfTZuOwdYrSLeo3r9++dCrSrWhPkO1hadn94g7K
m4le0PJbI8p/0dyy/5Zk2j78geyBsilLXiC1BX4wYdv8peCUY+za0WYQXj5i
DEoY65cYs8cy/e1l4Djt/cparct8tWasLo3b9nkt9Iqg9xPtb8qyjN4T3l/X
+szyb/oNyZ4xy6qraDMu/xHSBsruIn8xvGSmLLveDv8XS3+v/TfL/N8IvEF3
gCrWIUuXPAN6vWR/pX4b8Hfx7VzZD+E/R7pd8M+qYp23dN/1tIdW9Ldt5HeS
7sxynd3SHUPjXfId6WM9/faZ70rwcxr6j5J/UTwxFg3Yzybqrl3ksdZ8aK9+
RzbuQsug91A+pEw/Mpw6i6j7BjiHC60zfIK6nzB+A6B9M+kFnV1J3+3q0/7D
8n2g/BbKfma8H5d+gP5uz7JOvztw57L7qXDmS5/M+LeU7ZT9oY/OdnDa5HpN
TQD+p8iyj/bMfPqzEH7Lw8s4fjNHdB6Rr0x+Iji3gv9Skelpv1tLW9Fiz4V8
DuLAu2mvDWVNqfNbynOmufsefm5L2OYr269sztXB70X6McdjOAfcrIR9K+Rj
EabsOfIV6evtlD8F/F9QikHraJ4M+QzUWagzfzT8Ppm0L8dR+vMU8HDwr9Z5
Bv4s8GdAIzvfNj3Z9oKyt0n2ZE67S/dT5LuszuTNzM1XshmQXwU9KT3n0qeA
9POUvxuzTVy2cd0RpzEedZLWfWmOt1D3w6TP5qHyj6H+z0n78kjHIN+fvLRl
qTGsj1/h513yLXT/J82i/v20MR94DvRrwPsF8PtMgX0A6gBXT7isQGca+GHy
L+f5zH8RetGE984OzHd+yHds7W+z+XYe8Gl4fgL4CupPlKwOfoccn9nl6dsv
lE+i/ErozYbei7rz5lsHIF1AD92R4WcJffocXiuXWl8inBzp41OW1dKM18c6
/3XnyDKPkYRtorKNak1qbVbS77XAe7j2cq1xrfVjlF8HL0fJNyzwHVx38T/I
1yH/NONxI/Ac2jtUYB3fdSHvydqbJYNLFv8TnLoF5kG8NCrTL+k+LVv+6FLb
S0/ofAc+XEZfdzbd3Q6Uyds6U7oD/5I0v09TvpjyzeIp3z4kS+GlP/k7mNun
6WMF+QOBfyjfNvbRQesMpTt8Xj4Kkn0ShodA80/K58QsC+eA/678qVI+e8Xf
RskCjNF08ce3S4DnUGct9deRLodWgPxHwA+CX5T0N5V11X7CfN9eYt3E+/Aw
XL5BtDc1yzTagptHfnOWabTS+iNdzVpYwbfCsH1i5Bujby/LHkX5dOnr+NYe
OEGan+c1lQnuqbT3UrVXPWwbq2ytsp9ULLWNRbYW6fT6sz4f0XmYZRpJaI1L
WrbdAM6EpM8MnR3vk1pQfidjMp/xaMh+fJ7010HrKjQnz4N/Yal1idKJvkn5
LtbUc1n+DQSo/xv4NVkLj5A/E1q/FRnWnUF3h5OkIRnW+fwDPDhmWV+/kV/J
3xO17PEy307JtzFq2+RM0t/kG9DGB7qPgH8R8Pik+yKbqWynzRPuS0vmfAy0
mySMO5HxHRK0zl66e+msbyy2TD+3jD/5YkoG1d6sPfoVybLQvEV7IWMeAt5O
+TRoP0raAfxt1Lqyq0jtIpbxJOsdYf2+yVwtgEZGFZ8pOlvkQyldqH7jO5O2
EctWLJyV4H/BmLXO8h39c+DHi0xLZ5zOuhy+tS2wvk2+q7WK7XsQk0xfbJuk
bJOHZU+J2udHsoJ8xH5P2eYj2498vm4PW2cnWuXI16OsXNq6O9ncP2B+b4FG
QbZ1+POg/V6x99bafHtf9vKUbR3yOZTv4QbGu5F8C0lXSVeRsu5aOu0uaeu0
lZdO+1rddWXfhFYz8L+E3nTa20d/Oku/HrXOULpD9blyyjZK2So1ft8iy65J
WVfSi/a70f6Z8hmQvZP5Gkz9uhHz+jL5VdDfn/LZKh3Ur9JvwMPr5Jsw/zOY
n27M6eqK/taPsmvIH69sHdnVwO9I35rhNpbJFlHksZdNWLZh2cBkC1vIHf1d
+Ckqtf5QNtZQqXVk0pXJp1G+jR8lrMtsIp7h9Rg8xWTfAf8o8LS0dWHbwH9M
vhNpwzvhaYz8g1lDZxTYR1e+upeXeq/SftMS2huTpif9gWzZi+FvFPy1l/8C
47cgbFlK5+1g2QISzpenfKXuW6XWv2n9yNdQNnDpI75n/M/SXpm0/6n0m/V1
f07ZFpRgvMcCD4PfRuXtMzAcuJtkjHLWiXWPWgckXdAi+RxKVqZPdSrZp6c5
ZbWk/y+wTVe23ZrkOxZYJpdsLp2MdDOyKcu2HCI1KxvvoPRPCft6yKdUvqWH
wm7rAP2bT9lA6NWuZH/gQcCPJXx3k4x6Pf09CI1KtP00c/AnbUXB6VLgO6vu
rvcWW9cqH+ifoB2L2xao+9mt9CVP9qcC69RzgL+E58Xl3OZT1L8w5bPqEPSP
RXyGaG+Xz+RtJb4z6e4keUe2FekkpZusQZ3PZeuC3xvz7d+4kvp/k++Xbx2A
dAEnaLOv/H3l/xHxnGvu5ZN3tMgyiWSTyfT/YNw6UulKz4P+b9rvafNe+R6B
87d+q3z7Itv+5NcBL0madjn5qwMfSPhuL58m+Ta9Rh8HSZ4mHac/55A/xtr4
BJxhsgclbcuXTX8S+D3L/C2b0d5/4j9h39VBpOcof1oyWWXbp+SLu4n8ZPKL
oNkL+A3oBQrsAyhfQPksyHdBPhXyrbg6ad9R3R87APciLcu3THk9cNuQ/Uvl
M30P9JtpDdH//0HzKGU7Y977e0mnDb1+rOE50LoIHvprr6TOIOpXJ19YYp98
6bakw3gD+BbqxCi7HX6CstUy/5mFvjMsAE7w7VzKR8uHSPfLpO/yv9JGFvTb
pa27lM/WFcDH4WkK8L/gzE/aB0P2W31rTvnAqO8+FeSjFbRMJtlH8qVk0VeS
zktmu5/yZTpzMn3nWg48iPoNc3wmvcp6ySurLxkqt9Q+APIFkM1VttfRIeuu
dOdZTP07Y76P/E4aDTwvaV7F46vStZV679cZ0JGx6QPPjeGlEvX76vwstuxf
kfxC4LdS1r1IBlwY9B6vvV53Gt1t5HMg34OL5P9H2X8R66J0R4pRnldi3z7Z
n+SrOClh3al8YDvLvle2f0qmle30piKvda35R+WbFTEsnw35bsimIdvGVsa3
oc73Mv8+6SC+jdjHWL7Gk8C5iP5sZQw6lPf+ui3mO6LuiivJ/wn8b9l6l8/z
P/IXSHjt6zeh30YmY3Yr+ebgl6f+LdD/X673E+1lW4JuSzZg2YLl0yffvkPg
14N+z6R1WQcZshuAd0TsaySfKvlWLST1IL+a8ToZtc1W8soi5mAttOvRh8cy
HINRH7h80Lr7btqfI97jtNc9KJsY8G+SIQttc5Lt6VzSCOD+4JeX/x75qhX9
7TzghqSJwJX5vT0etE+jfBvnSKZI2qdGvjUToP+5fs8h7/X9wSnS2RgyrDNX
trsZ8qkE7A3+TODFEcMf0b9/yF9AG4PIP03+U/JTyT9APigdFfN5GfReJP8h
5ScobyOdeXl/+4nx7xayr7HuwLoL1ww51uVmUkK6T/nIUD5FMjv1LyU/p7Jj
Km4LWyaVbCofnr1p2/Bky5POtDr5ZNr0ZINIpW3TkG1DY1qHfIA2r4b2asVT
yP+F/k2pbB9z+ZrH0uZFNERLOivpG6QDahi2TUK2CY15I8r/jXgtxqUDg7cx
pP9Vts93OdpaHbHv41TG5yjj80zMd9OlrI+vwf0l6tgf+Zz9CnxTyrE9b8Lj
zcADYtblKsagf8w2JdmWHpdOm/Lz4Oc55vobqQuC9oGVL6x03pNS9vmT7598
4OQLJx81+aophqBrxD5x8o3TGfA68JdRx9r0hIevgGvLvyrfNrXzga+VDwZl
R+BvC7+1zhHjag1sS3iNaq0upPwn7fVJxwrIB+y+oG0wssVMpQ+tZB+J2Nd1
LnX+Ar4WnOHQ2qsxlf4CesMKbbM8I20dr3S9w5mPb6B1C/kJGcY5M+2YIMUG
SUcqXek7EceuXSP/AOB/Qm5bPkHyDRocse+/zpg98D+Eb+PJx+F/aMo+qPJF
nUN+M/ycF/RZqDPvCvrWiDQb2nu0tHRfj9qXuovsL9CeT75yOdN8LWqfmNfK
4s2kC3ieOe2Zax3iC8AjwLkkxzrOkqB9/OeV3R/lWzOlLP4hTB8+hb+H5fNR
aBujbI1XR20bkY3lQsoeISULHTOj2Bn5fMv3Wz62y8D/LGVdhGisBz4W91rV
nVx387MTvnvqDloLuBzpyTzfYXWX/VF7KPw0pP7PwD+Q6hXax+ol2i6fsC5C
Ool+QeuMpDtqwbeXqV836r12uGQgZK0NKcvK4vlLjb98HsG/SP6v4NcnXznH
Ph0PUHctbXQrtA+MfGHkIyxfYX3LSdtHSLqTLuSzyfdLWLf9mGRqcD8JuUw6
Ftk2pbOV7nYf9GtR/lPKfdOa1NqsE7UsLJ/d6lGfyTqbi8HZDO4OUi3gW2nj
eWhXS1j3JR3YFniZAI2m5dyHrvKfTbmuYiIaUN4M/PfyfGfX3f2CuOd6I+X1
gPNocz1t/yWbmvxVg/ZFu1hnFrQaRX2XlU9wY+B6Ydsqz6Z+N+ki+fYI+Pv4
Vlm4jPndWr/Qqwqtignr6yWDSDdakHbspu5w+cA3FNs3Sz5is6H9Jvlj0GvK
frcYeFnCsQOyCck2FAx7r61K/nTadyzdtRRzqdjLs8vs49L5nAV8AX34Rfpd
+K0L/GuRacsmKtuobKiypWpNXAn/5+pOSlk/0nnAP8snMcsymGSxf+P2lelL
+Tkp3xl0d5CPbM+QfbDliy0ZoRz0n0pZFpJN+0ntr/C7uGz9DoD2vJDHWj6L
8l28ImHdU9+AYzWfpM3iHMfgKJaqRdS64WOki6NOghWD9K3OItkU8myTlG2y
eqljsRSTpdjY78C/MNN77vey1ZZYdyUdVgfg0rL2pQMrBj4r5dhY6ZT2w28f
vm3N8/n1tO4W8L+usn3aJjAfwxPWlUteOYuxepX6/xTYB6W37qpx+25kgD+f
siryGcq3zC7Z/TZw1pA/Kplevibw2I/+j2D+KoTs4yZft958ex74uajhvdpT
ZM/QnBT4jtoD/BG6n1GeS51W9D8Kfg5wR/iL6HxM2pfqD9rrD/wW3+4Efxn1
61H/rjL7cSfFI0vWivqsFc1ZUd8xddeUTfCTlMdMY6c6JQnfCXU31Py9K/14
0rKVYqhWJL1naO/QHN/NeJ5VbN9JyeBnyneCNnZQ9xnZoyXbhCybywdWvrD1
Utb9a41rrc9LeWyl45eu/5qoz562jM/rjP2CpHHbQH9K0DGWkkf0G60NvCLl
s6ca9d+V/bfsPL+ZPrQGvj/kshqkVZQ/kXYsjnyQ5IukGCbFMikmcYx0H/If
reg7Vhz4XunrwM0hNeC30i/ku4V81OWrrhgbxdr8fwybfFNS7rtibk6mHHOj
2Bv5XF0lX45i3wV0J3gM/Evow4d5tsHJFncZ+U/zbGNqrfUsGaCyZSrJVvKR
la+sYljrky8g/xX5q6D/tuT9qG2Hsml0Jj8kbt8n+Zx8DS93lK13+e/cnrAP
n3z5/lZMOPjPRK3bFs1no/aRkK+EYnhaKnaKMbg4xzaar4scQ6BYAvFYC9zC
YseyK/4kH/hRvnXP8W9Ov71C+LmRYS/Hvju51DYQ2ULk03tIsic8XavYLd3J
GI/f+HZpjn1KfpHvAfjdyN/CGjoi21TavkPSQfYNek/X3q42H4vahiRb0i/8
hsKUX1O238gnRL4hqqO68kH8V/dP+ZtVtgx+ImKdmXRn/aE3J+o7v+7+sj90
A/6q2HcZ+ZA2g99/i+2brzkeprtv2nuj9qiTsj/JBplnmeIE7S8ltVesq2K+
+D1lkV8iWyHr6xBj9Iv0lRUtY7wMLzXBGVjBOJXkPxT3b+WAYuaA55b5R0jn
FKFuHt+W5zrmKypbA+maXOv4peufRLoy1zYv2b5kk9Pvc6P2ZMk+Me8l8lGZ
Blxd9hHaX8S3ALRPxwyPg98D8NuXORpYYJ8C+Rb8Xqav1rf6ks3jjr1doTsZ
bS2IWdcjHdRftNebb0MLvAdrL34AGsNy7VPxIPCyiH11pPM9F9qvQe9i6H2h
mB/gE3w7P9M2+abUf5nUL9dj8ApwBdprT9svkv9D+rSE60oGbQw8FRrn5zlG
IZ/yVeSvJ7+S+b6Lvg1LOHZoAfmhwHsVw5fpNoIp+xTIt0A8v0X96xK2VQ6A
364Jvymg9aM+Ngb3lbhlQcVIvgj8e8y8pfk2Ke4zW2e3dIJnA79e5FgG+XTJ
t2txkX0D5WMuX/MDRY5FkQ+8fOGbRqyLVAyrYllPF9m3RT7a8tX+fx1+Ffug
yRftDtq/SP769O8V+ZOQb5ZrmWk++ZnQeyDbPojyRaxY5FhZ+eDKF/cW8C/I
dYzGIOA74Pkt1t4k2VuAB0YMl1LnHN1dY5bN5LPRld/XfUnbZmRzujjomB7F
9shnUr6TK7Veqlkf/gzr4Sj5udQfyvpZJ/++lPd6xRiu1t2N8gHA2fT5O+hl
az1XcJ1jMctMkp30mzyH+Xm4pExXqz6XeA/TXiYZqwC4S8ixyCo/HvOa0NqQ
j6J8FesnfHbLh6Eqv/XshG1Lz5CvlHDMtPRHst+uA36rLF5APqbtmO82KdsH
1ce50Ktc4thM6USzpR+M2dYxCH4agHsu9R/O9RjvjzrGR7E++rZZ/CleJtc6
/LfC9pGSr5R8hLOAJ1P+da59SOVL+lDatt115B8G3he3rUTlvwG/A/6BXMeY
Kta0Y5k/seStDtIHl8Xjq87vWr/wE822Duhs4I+Djr1uTPsnk/aJk2+cbMzH
pDtKWh+gvGzP8nmT75veuNBbF6GUY0fFc524fV7k+6I5foX+XhyzLWQt+aTu
V3HfHd4G5wJ4vyTu2Mvv+NYSuCnp21zHmDyneIyQdXPbSI0o6xJ37IH2MO1l
3WUTz7XPYDf9duOmlZAPTsw+3fLtVgy8YuG/CPqtgja0nw2vCyj/KddjpLcL
ziVtAH4QngdobMv8ebWn7I/7jQe99SCZ4FLWTyfWwLAM35cUS3447rUtekfi
tmlp7NVGG51vSdvSZVOX7X4f5dUyPYcx+KlaNt8qrybdWsi6Z71h0l2/JWh8
oP7x+3pbuumY9Zuyx5TG7EMhX4p/NefgHorbNvCg7NuU75BMKt8uvo2kbE3I
uHqTRm/TLIBm0zz7nMn3TL9p/bYVk/kc8Oy4776yscnWdjjotS8ZQLJAHb6N
rWAea8YtE0g20B09A9oTZPPN8/sL4xKOIVUs6Sf0cabKpW/K8Z42Hvg7aJyX
af6+l/0o4f7JBzco2Qyebsuzj/Aa/T6Stn3IJ+HXpGUCyQa6T8t34aekfStU
Lt8FjYHGokAyXsgxyYpNlr1XsS6fBn22yCZ1CvwPQ/bF0JrrGvebIXo75IjW
G/nPyZ/ONX/yFdYbRHqLSDEJik0YFvdvU7/R4cD/SB/NWD8O/yeluwuZlvb8
22PW2eouJH1oRsp3cq21mqQr5b8U896nPfIk8G7ZGLK9pnZJX8mazKb8S/as
y4G7K6aiqu09fwdt85PtT/a4BsAbKf+Kve5aeHqE+f9aMQ3VHIM7gfwseNhZ
YB/hzpINgo5dVsygYgcXwF8r+bPIf63IPmHyDVMMn2L5DjNHGQXm4XrZf0jf
QH8b7U/V/ZI+PJFrH6UVevsgZN8l2RT3prynaG+RjJ5WPKZ8QqQPhd4v8HKu
eKhqf68f5Y+iNqDfVe+PgNsnbF27dO4Ps35+DTo2VDGi1YscI6r8UdIyygaW
GNY34Z4KOlZJMUv1dT4zxi1y7IMnXzzJfJL9mkvGl+455FhkyYzfw3+bmGPZ
FdOuWP1eRZb1pSOQrqBtiedKMWjdydeIWFZWzFn1iO/YumurfkfgR1SnnH1Y
2zN/j0mmLueY+nvIHwn5vqE3dJqkvSdqb9QZpLOoM/lUrve8u8kv0Z2xqm2m
sp0qplH7lXQu0r28HnIshXwa28Ydo6lYTcVcbpFtttixS1mUD6Vvm5M+S2W/
nhV0jK9ifQ/J/qv9JeRY7j601yRuHyL9XiWTyVdse9C+6IrJVWxu17BtPZoD
zYXaUFt6g6pH1DHvin2XDew4uCeSPtvuAv9Zxm9jkXW1ujPp7rQm4lg76Wyl
uz0nbduEbBq/wFuvkGMxFMOlWC7ZdGXb1RsSekvimhLrIreQvxa4KOy3VaTT
Ly9fNeZ8U4FjmBTLdGPIspZiGBTL8FLStjzZ5GSbK+Hb5Kq+o+wqu5PpbqY3
KKrEHeOsWGfFaO+A3smQ335STJNimxRjq1hbxVTvDjsGVrGwU2hza9hvCuht
gf2SqcJ+A0hvASkGvRHjsZ38Lsp7Un8G5b8X+y0FvZlyN2PVijE+IfunZHDh
p3w2D9cZLf2Ufp/gHoP/ZoznRSmXaQ8/Tr4b+Ym5PtN0tt0SNi96g0RvkayI
WVcjGsti1hlIdyD7aUvt5WG//bEN/K2KRQl7LemNDL2V8WGJbZHSR8jX94Ww
30pQn9S3WWH37Vu9kUL+Ofnfk9+hPYj8E2HvFVv0xov8RcN+60l7oPbCDYzH
pjy3Id+XoWG/naOYK8VeRcN+e00xuYrNLYlbdtOZ3lK2w4R9RaTjka9YU/no
V3RMkWKL1hVb16s9vA30Hw479l17svbmgeT3ZTpmWrHTX6csW0nG+kr+D2HH
pmvP0943Iuy3gPRmjd6uGRv221F6I0ZvxSiGUbGMsh/L92+ddILZ1qGuBZ4W
9lmgPVp79afF9iUQTgv519PmI7m2idZhPrfJPifbCTxsBb436Fgj6VSlW/0t
aluS3sDRWzh6A0NvYejNi7mUV0pZNlNMwi7oHSz22x7yQTlQ7DnT3GkMZoYt
o0o21Zt42eT3lPnTyEf/Peq/QPu/V/X50LvEMabaO7SHLKdsT5Hftikk/yO/
/Rph+29I5m+U8JrQ2viO9p5Ve/DQo6p9JtLM500Rv930rHSIlF1f5j+kGIf1
tJ9Z5N+e3jDSW0byQdbZpDPqHOBwid9ik09EXXjPLPHbO5cw/hnA/aC3M9Nv
7ujtndq0cSTPMeKKFb8s7NhlxUCvJn9T2LzqDQu9ZaHfiH4rWuPPUJYu8V4o
HwX5KvQN++zVGwd660A+C/JdkL1ab2dpzDR2OmOfIx8qse+D+K1W4jNW/ZG/
3ctFPoOFrzHvWeLfkH5L6sPjtLWmxL5VGiONVeO0Y/l0RhyWbjBq3e1uyUD8
dgqSls10X9/DPngJ410n3zEXir04GvHdWN/WJRxTKn8svQH4EWO1V/5fzE13
xmgP8PvgnEl5BvQ7ar8Pem+RTfES2krGHFv/M9/ODjrGRrE2ovmh9Omy3+Xb
B0a+MKmk/RG0Z8fku5K07V8+ABlJvzmotwcvI+1IOGZKsVPaAz+lfnHEb49M
pI875btebF8a+SA8QFmtmG0rikE+C/i9hGPP1YdVwIPTfhtTNtchwI9E7dsq
na90v+1LrWuXj4Z8NbYnzIvW0M307wVw+uR4D9JedCxh3xf5OB1NOAZCsRDq
8/GEY7YVuy2b+3vyz0mY9hbo7a3pPVrjqRjsNknHxCg25nm1QVvbo/blkw1S
tkjFTCh2QjLdyzHHiClW7EVSU82HdBz5fvNTb3/qN6K1p2/1ktbRSVenM7h3
0Dov6b70pk1e0Hck3ZV0ZrWU7SLovUkx1gOp/1vCdw/FNO0H/hGcBTnew7SX
yUdIvkI9pf/Tfs2a3Z1nfZZiTaQTlW5U3wZS/k3Q+uyd5G8iXxmcjTnWcUjX
UZH0ZY51XtJ99QdnR55lCr21pxh6xY4rpvMR5rNJ2LSEMwDceyLmRW8c6a0j
7UHai/rIBpFwTLZ8Y7QmtTZl85XttzPpR8p3Mj6j8q1Te4T1FozZ1iYdpnSZ
ioFULKRw8ql/Ad/+y/GdTnc76UClC93Nt4KgbaSylaqPx2ta5yPdj/r4V02/
YSrbsnxy5Nv4e8K8yuftCPAPCfMmmV+yv2LsFGunN9H0NprewFFe9hDZUmQz
l+1cZ84W8GvEzIt0oNKFvhO3vUQ+c4ehdaXit/Lt0yrf1iZJry2tsWbAU6P+
rQvny4TvLLq76M2xJeQfi3vvkc5wuuyhUd/VWpNfSL6r3hDKc8yYYsdaFLlM
dyDdhXYl7WulM0m+norxUqyXxvRy+rY36dg/levs+ibps1w+n/L9lA+nfI1k
ox0ftAwtWVrlW5L2cZGvi3R804J+w1DxJXqz8IekdRjSZYjHRXHHcCqWUzr8
MfINS9r+JB9Q+YJennIslGKcFOukNy/1lshr5K9O2eddvu9LoVdX45uyb93/
v8EZ8psjwpdORLoR+bTLPih9tWIrO6b89ojoXQW8KmrfGt2BdReuFjNtxbiu
Af4Jnu8nP4Y6FaE/N27bm3TM86SrSfqtwgjlXwLnhewLLB3GHMpnBF0mH0j5
QuqNHb21I5o/x+0DIFuqbKrn05+XyKcK/EaB3irQGyN6a0RvQOktqK1Jv6Ul
nG3A4yi/Ic86aemm9WaW3s7SG1kz0tapS7cunA/i9uGWL658cv9I+U0Vva2i
N13eovxO8t3y/Cam3sacxPhcm+MYLcVqKQZJsUjlqf+27B1a0/mO+VDsh3y2
5bs9X/KIbFMJr1/hbEz4jq+7vnxE5CvyYtS2FNk0Zdu8MGlfLdlAZQudHnRb
ihEeJV+NuO+vshnJdnSL9Nt5flNCb0usidv3RzFcnwK/Tflg4OqaQ/JvJa17
kA7g4aB1EMpLpjpabB2v9BnyKdHbmp8l7Sur9bkuaR8G+TIoxnqJ3uZI+21K
xZB/TNnqqN/WUIydYu30ZoP0GxrvT5KOKVNsmWI00/K1CdqWKRulbJWb4469
k87kWfkzFPlsVoykYiW3p627kg5rR9p3IN2FpINaT91nQ5ZdpMOULnNQwrG/
eygfDHxrwrDGTGP3WdRno+7cb9H/jbL35fjN4K+jfqNGb9Xo2ybyo+OWZfQG
3p1x+wDJF0g63XMijplV7Kxi0BSLJp9a+dbKp2xLxD5Q8oV6mHxmyG8c6K0D
6XSk21GMhGIlZMNeErVPnXzrFENRF3rxiGVdxawmgPdEvdbk431AviRB3/0k
c93OeLaD5n0F9sGVL658guUbrDdp9TbtczHbfnVm6uwM6L5d4DP4B9nXo/bN
lc/eAODJMcdyKYbp/aDfINJbRHv51jxun0ztl/KBXxi2TkG6BdFsAe6zpM0F
vpPrbp4lfWiBfVyaws8z0GwMrU/knxn1HqW9Snua3krTGzJ6S0Z9uoJ8abHf
ylAM6RnAp+K2LchG85902fIxyXFM5Y4ix8wpdk5ttpatI27bg94Q6C9bbNRv
K4rH5yjPlX9njn06FwE3Cjl2XDHmk1P2UZOv2gpw/qBuUcK6R9ncQsC/R12m
N/xuoO7euHWp0qHuiftNQcXLSH8oW4t8KuVbKZnwkrB9GOTLkCl5EfwXQh5r
+RTJt6h5ym/LyifkdNAxt4q9lQ70xrh9LuV7KZ9J+U7KJ1W+qdrTEmHbAGQL
UIzjswm/YaS3jJbw7e6U33hWPL90WtJt6c0ovR2lN6L1VvRI0twCv7mmt9de
jzr2Sd9Gke+vOS9wzGC/lGOSFJv0KO1/BG5+xLB8Cu6TL0ixdXeKoepTbB9d
+erOYWnuR57JCHrv0x5YDG/3xOyLoJiINyj7NuW7pN50mknfGgbtmygfKflK
bYj67TLF5JTQ9sC4x1ZvQAwAPjNu3a7iQUqBa4c8FtKJvxH1GaizUD4t8m2R
j4F8DaozfnMTftNTb3uqzwPk2xH0W9B6s+GehGOwFIuVJZmc/KiYfbs3U96T
/KGgbc2yOdehfveE89J53AC8JOy6iqFSLJViUhWbWoFvz8i3LmFYPoPyHdQb
7YrNOEF6iLLHdafI929MvzXxLN5l815KPhG1r6XeMNdb5or5U+yfzsT3GI8e
CfMqnsSr7hy6e+iN/XSpYxIUmyCfoKHAU6L+LSsGf3LUPj7y9ZHNfZXOBvI/
5fmNcL0VrphpxU7r26iEbRTa7xXzPl7ydtJvwWsNaC3ozRX5bsiHQ75LPcJ+
+1xvvOut91uTluf1PwOagP94zPZL+WR0Ab9XwvzLJ6q35M+U31aUD9MlKa8B
rQX5SMhX4tqEfSWU76T5S/o9H70J31z+g0HTlr+W3tKekvD4qw21pTnQXCjm
YqPu0kH7kiuGolfSMQaKNXid8v0R35F1V9abETdH/aas9M96U/SymGVC7Y+T
WS+dgFdEXVdvXi6P2qaq/U0xsjekrNOQbkPnqd667ZWy77BiOHsCL5HPSK59
TpbL1hlzbJ7u1Bnw0ynq2CS9Ma23pgvlU1rg/wHwYcw6WOli9aZoO/Ifxfz2
gHC6Qv/6oN82UBvNKatZbN8++TTVDfsNBL2FoD17ZNRvDurtQenIpSvXG/J6
S14x1Utp/8eQZRu92aK3W6YlHBsvn1P5nsrmJttbBuM7Xb+PoGH9BvRbGBv0
21ayIdyu8z3tt4zlg3Jn2m9myN9abzhWKfIbYHo/QTp/6f7l4y1fb8W4XUL9
M6M+2+Uzfwbw+Kh9+eXTPy5qnzrZk/Rmaq2430zV26l6syMs+0DKcykb4Qcx
/48M6f5lA5Dt8v8APL57lQ==
         "]]}]}, 
     {RGBColor[0.8112093829472145, 0.8631975962960439, 0.8922679279723219], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFmXuU1VUVx3/gDMyDGeZx78zcuY9h7gVRUx61LFclYPi28rWspa6WOiSk
pfLKtcCUh5oo9DAEhEoJUHkoFSYt30AkpaIiYi1FBlQcBvBBgoArs++H72b5
x51zfr/fOfvss/d37/09Z9o7brjo+p5JkvxYf45RW+ydJOMak+TK8iQ5vZQk
C+qT5KbWJLm33v3hFUkyr97P9N/Rt/vU7u2fJHP07h79FkvO7Ogjb36M79sj
STrLPL9J7WmSP1f9SZIxqdLzmdud0jj97pIeKb1r1G9OL8uYF3KQPTfkF/V8
o77309x7enlt9P+p5k/Ub5ze9cy7rdCgR6XvteqnE3+f0OjnUk2SLOmTJNeo
31WbJLv0WyXZNfXuPy+dL5LOy/V8p3T+WM8XauwZGvNpVZK09/b6Ixo8n7lH
7NDL+9qtMVfrd66e35UOJ2n8FT0tl/FzNGZpveV/R98XtiVJld7fX5QPMklS
r/HPFpJkk/rXq/9yxnaYHXa7VD54Uvue2pIky+ot64Ccep/WHFNhXSdI71PV
P1X7GKX3UyV/sd7PkA0elN5XSp8PmpLkccnrXfDcx+s9v1v9hWpHavwejdlY
nSRlsutb+v6mfg/o26hyy2P+80X77yW1G5vsny/nPIe5x+jFC9r7JOmwX3oe
0JhNel8R31dpvQWS1ZG2/J4ae0fJ/n9BMqdktV+N25fz2m9ozNhyj78q7eeH
6q0vdviS7HKB+tdkbdd/6Ns08Cw9uvU8V+3kWuszl1hI+RnsXSu5y9Wu1/vh
stUJ4fe7pM9WyelqtY5bQ88WyTpVY/+rPe3Vb6X6n2tfO6Tv9FrL2l9p/39D
326q9Vqs26C589R2NdmWrI09y6X3LM3fK1yc2W4dnsnbh4/18VjsN7bWGMfH
+HqidPtuhddA/j+bjP1PNLdnP9u4LWOMdwdul4btsBu2vDJt3K6TTz6rMc5a
9D2jX/8exitrIP+Vot8/J5m3lPsb71fXe+5m9c+Rbmfr/TTpdkq5+71lt8n9
LecE+Wq0/DpU+xmjdqmw+ZB+mxLb+Y3A2zR9/4PaF8vs54XRH6jfobokGdLD
8x6MuQ+GnJ0at6TSMr6ZGPd8Y/zhOs9lX10p75P+KMVcs/olyR7e4HxF3iKX
kQuJwSGy6WfSaWjec99Lec7GonGUl01ubrb9iNdO2TMtm3+qudtKtv0I7fd7
Grdb48dr3jXV9uPH8sXdGn85OUHrdshG0yVnpuR0SLeB+v1L8/uXuT1JMlvr
rT+6j2u1rKWSv6fNcnarvVjfarTWHM2ZlLXs7jbb9t/1tu+cjPPVn6TPdu1p
f9h2S8ox1FHmeEI/nomRYfptKXdtoEa8rfUX5r3Wu9L9aeWX6Xr/ZGDg9gbH
zOvV7oOHr0mf46TnmjbPmx5rPSVbNWjMk2pPlsxjhP+vqn1YOF3c13EOHsAw
GNyotS6T/k9pH43NjsOMxnfXWc7xlR67NHLv/H5+d6/an0XuXaZ93B85mdxM
vHRFXcA/7JE+dWCZ+rWyz0HJP6DfIL27OO0+eKP9JPoPSN8l+h1b5jGdYV9w
Cu7fq/CelsS+DlX6udTD+fPRHo4v1qdWoQM1AIwtlm13St67KdfR/i2O6eMH
KJdGXiDm8PGqcscO6ywOfa5rN8aXCTM7Wz3u1pL9DE5O7mV/nBz4wb7YeaTG
/179r6v/94Lr3pgaP2OzTypc79Zpf2v1O6jnnMatlx+zavvkjYPNeX9f0+A5
GwqW81zBeEykw6Aezk+MBzN/Lrq+ZuTn3bLjLv0GaOx9et+g9hbp9Uh/z52d
cezsqXP8XJK33YjRX2U8728Z5yNs9Yj2NVnPdWBJOvSUvlfXOI8vTzseib3P
hdtdssklGvt6ypghLnakHD/kl7pm1+AfFI1rZGLL8Y3mYHCb9drTeP0OVzpP
kC/A4mCtVdvonLAibVywNtwFDnN+uXkHWASHYOZg2Gp+xvnsPK1fK11qUuGX
OusOn/pP3nL25b1O31gLrsR3ajnxDac4pcy5gJxKLUMGssg/+A4fV+tdKe1n
+m8HbxwmLI1ucV05UfYcWTJfnKH2d7XmTF29vN9B+tU0GgfwBfBzh+ZoSPJh
3vskF5OHs4Glxn6u4+0p1/WpBa9/drP1KaaNrSkttu0zBe+XdY7Ko89a28r8
jfdtWWO2kPVed8V+72w0l4KfwXWZz1y+d8cYchv5DqyyN+oq/WOl34FKx/tD
EffYtLXZtSvJGWtgG7wNCJ/hD3RZGzFCDBPLcIh2+XqR5O+Tnq+qP1xjL2z2
OPaNHdekjFXqcr+s44L4wCe74z0xQ+ykc86T5EjyamXmC34NPpuilsFTwenN
+v5aytjmPTFCfSJ3UUfpY5O8MP5Ene1xfdH964rmnbsCY9Q5MD5KvqrOmPOf
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
eO8feeiIPSuNMb79H8iUDl8=
         "]], PolygonBox[CompressedData["
1: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
8FeO7zzafdSjy6j/0QX+V8pm2f4fB9bGDA==
         "]]}]}, 
     {RGBColor[0.9031099715786908, 0.8938439938267397, 0.8510965466205365], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNl1ls1FUUxu+AhenKlCn/Mt2sM1RBE2mNwSVCKhIDkrgQozFxicoDisGI
Dy4QkKJQiusLYhQXqKhRoxGoUcEHTTXBpSwmauRBwqIRE5fERKESvx/fIfHh
P+fOnfu/55zvfOe7d866494FS8aklC7IpTRW9oZ8SlPHp3S+xhdnKV2h77tk
r9Zz5hkpZbJ91SmtrvaaBZWUltSmtKYlpZ/1bNX6dZqbI7tY87Nll+idyXp3
UuyxSu+2y993OY/ZB9sX44mZ3/9YtrOU0uuFlG4pO67pOa+ZMy6l4bqUHqlK
qUbrdmj9S7wn33fL7wPEou/vafyg7I+yi7V2WO++OMFr/lbC+yelNFPPvHG2
s2Lc2JnSBtmC7PN6f1DjR2V/0/Oh9qjuSOmA5lY0pPSCbJViXN7geL7Q3ks1
1tJTe16mZ7fG8zRxUHFuk71LT6vWDcoemuB1rBlqE7aaP6r4j0xwPPy+R3PX
VnnPF/Xxrnxukn1Bz5sar5Wt7rTfvOx8fT8pXzdmrgl7fivsd2feo0d+zio6
NubJ4R3huVA+nso8fjJzLvfot7acsXy8zrXvzzxuzrzHvthnU5NxeHacawQe
hZx5Q+3vlD1XzxjttVD2K9U1a0zpa9kdere1XhzUO/3CV0vSH+3m4GvyOZhs
t8b41RjDrZFqf2+UrxNav6rKHDsxxXuOylePYuzWUyg6zguLjm+P3t+Z856/
NJiLcPPyvH+DJwPi1YDynTrZdQcvfPXX2Xdv8BXeXkKORa+HS9tqvB5sr8kb
l2bt2xR9QX9syTuef8aaa3AVnpHL7eL9NznXHEstqOm+4Cp2//84vD84d1S8
OaxnXcRIrOQyKfxen7nfT0bPP6lemyL7ljBbKDur1jh8r/pM0rNZ64Yz8/BM
2TWZ43wsc/4jgf9OYXVMOG7sNFfwQc8eHuP9GPMePUmOqzNj05e5NmgG9YAP
2/XMVV7Txrt3dkfdyYN6rYwcZsluzMzVVZk1CazBGdzQB7ArNlsD/gzNgCfM
D+ZdO7iKNlB7fOBrJPztbTeGB5Tf5HbHX5KdqJgbi9aL8e3u1bzsFHFlVNy7
ruJYGFP7HyrG68EWayT8nh0c/6DWnF5bMe79FWPB7+Q7J9YWYu6KmN8VWt1I
fcLfOu2/PPOey2SnVru+5Hs87xio16vRQ4zXdJkv+xX/I1Fral4uWi/ocWpL
n1DLh1uM1Wz57G+xX/wPqW79De69tg5r9dQuc4XaVzL3/Qn1xq3oup4Laq3v
4EJsvdpnaZt5OFyy/TX8zm9yHGeP99yxmN/X7vjJA7zxC+aP6/2K1r45xX1G
v9H76AG/g2dNh2tKbdEAckRDzqm3DtJ38IsxGkrem0Mj2GtL1AU7GGPOQnr1
J+X0V2gvGtybudcLshM7rZnFTuMNf9A+MMXHshafAzPjLCBe4obb9MspTcvZ
9sQ8fOwJrUMfiIHaPSccuoXDjrL1iXl0Y0ucF5wb5ERNyIs5eg99AM/7m4wp
mnYydI2zn357u83nFmfNesV+Q/QmPcp+1BouowPoC/X6vOTxiOL5vdX7/iF7
U9nr20vu01017lX0DF3jjDgSY+oNPnwnl9syr781c674g1ejoaXUFA5ybqIF
5Iu+ESP3Bvr/jTbnyblObb8se80XZd8J6PWOkjlyVZP3JD7OOMZwjDOQGq/s
cB9wFhED6+HtUyV/f6PsufkxD5cZs/czcffgDrIpzv3zZNe2OAbuKf/mjSF5
nu6Tvdrz3C7Xa1qXcToSuKEBcLot4uQsJFY4yJh8b5aPnHK5NHMd8EXt6NHj
BeM6o96xoeEX1bt26Dhn+7txZ+irdS/QE4fGWc+JAbsjxt2h2+j33FiD79fL
xuNp5fRn6Cr6+knJddwmPN8vO54h2W1l68izJfc5/b6+5PNwX5yJ6Di8RjPh
LmsaQ0+uCsx7Q58farHuTY97J/pHH3AGDaBjer8rNJL46W1iIrZP5feVzL2z
ObPmgjuYwHXq9VnJeHbH/kOBCRg8U3LuYDA9eoZzk9jhKbU4GJgSD5gxBrd3
4n7FPWtDg++o3Fl6Ih7iQpuHwhc5TYu8NpacL1hyDyDmJzS3IWLdXrZf7q74
ezri/KjiuyzzizLXgH1WtDqnobjb8RwOHqIf4E8dtsb9jbrURdwvx7lTiRrw
/wBdpsfAmPMMXKkrtSH+RRHDh5n78USc+5zb3PupP3Gjo6xnH9bQs/QH9zY0
BC6MxjxreYeY0VXOezQW3PB7mhvlGFdijN6iwY2xHr7AFbT9VO8WXUdsIcZo
MjGgady3V8f/olNnftE6f1/mvlqaOeZDgecD8X+H/z3gejzOd/qU/qQ34QJ3
ezAvNLt3+U9zecXrB0q+o4PxlXGPPRIau6dsrZnf7P9k7Mv78Jd5OMo94kDc
jdGGGeH3P5Ap6q0=
         "]], PolygonBox[CompressedData["
1:eJwllEtszFEUxo+i7UwH1XKn05lh2imKhcfCMxGiISIU8YgFUumGekQtPONV
0VGv2BSRlCAeESEo8doQJF7xWIiwICQkLJBYoBq/L2dxZr7/vefec853z3cq
lq6esyrPzOqwbtiGcrOJhWZ/sElZs+Zgdj7frKG72S7wTSxZZPaB/WngBwmz
+gKzf3w/rzS7EnxvMGsjwJF+nOHe95yJgl+lzXbHzD71MouBV+LTwF4NZ0rA
O7FTxKsnXhP4GNbO3iXW2sDrscv474iY1YJ/JIkZNRvdw6yCXOaxdpq9G/hs
Br+jhlzMa3oL7odPK3f95cxC8h2Pz8d8r2kZeEiZWRwiSkrNNlaZXcPnT7HZ
SPZbOXsuZbYc3Eb+KyvMSjPE6WnWHZ8k9S3gjk5izZeBF2N3ol5DFPyY+/r2
NnuDNZNPO9/DCzzGdfAjbHGB+zwBz8ang9pqOZ/jbfLg7DHxB7EWIZ84d+6N
OSfrwPuxi3xvIaci8AxxQH1l1NQHvCk4N2fgKAVejTVF/I4ceHe5x1qFzxxi
3yNGHfl0sHYAvCP42yjGAXAi7W97nzcujXtMxW7FYuDjwbFyUC4j4I8/a2Qt
Anfb4TgL16/JrwbuJwTnTjkptxdwMKHIe+yh+K/0XAbyfZDv/vjMIp8G7m8B
T8H6c9d21qaCDxPjK7G+YUfAw+iX6ojXdDfhPaheTMLnVt7vM/Wf5v4W6muh
/h/sE96e8/Mz7T2mXhuFHcV/C/cNK/AaVMtU6uuMek9+Zy+d8F4LvOdTcr+V
9dyV023wHqypyGN+IXZLwrWXxWdvwnNW7uKgkbt7UFOqi9kK6h0OzgbXpjRz
EJzLem+d4I7J4KHBtZPH+YvBNSPtiKOZ4Olx16568AjxOoJzkSNmWcZ7TL1W
xf5+aT34XcpBuYwNrt1TWBLcqPvZP6n5EfxN9baq8Rr5f2btUL5rpiTjGpPW
pMlm6q8eQC/B/do+aBG8CM7OFvsMKY475+JeaxnyGTzAfaWRKmIVZry3pBFp
5Vmlcy9NSVuFaX9L9eCv4ByJq0nYRuJfSHnvawZoFqgG1fK7KzME3FtnCn1m
aXaNw7p08xmiWbIv4Vypx9Rr4kTciJM14Ooy7y3NwJfkMje4NjWzNLv2JPzt
1UPqJWlUWlXMMcFnjmaPZtoLzl+t9NmkHjzM2RPBZ69m0Enpvdxr08yqybom
pA3NpCXCwXtJGtoWfIZplukNUuD/wvjOEg==
         "]]}]}}, {{}, 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], 
        LineBox[{5863, 8210, 8211, 7707, 7708, 9512, 9514, 9513, 6180, 9041, 
         6792, 9040, 6793, 9042, 6790, 7341, 6186, 9338, 6791, 8209, 8208, 
         6430, 8793, 6429, 8909, 8910, 8906, 8908, 8907, 9095, 9096, 9027, 
         6778, 9026, 6779, 9028, 6775, 7337, 8557, 7633, 9180, 9179, 6776, 
         9024, 6777, 9025, 6538, 6540, 9387, 6539, 7239, 7152, 7153, 6433, 
         7835, 6432, 8797, 5904, 5871, 7689, 7690, 7448, 7449, 5907, 5874}], 
        LineBox[{7816, 7665, 7666, 7431, 7432, 5877, 5834, 7217, 8201, 8200, 
         7426, 6409, 6542, 9388, 6541, 6959, 6594, 9395, 6595, 6543, 8873, 
         6545, 8872, 6544, 9147, 9148, 8344, 8345, 7282, 6597, 8913, 6599, 
         8911, 6598, 8912, 5963, 6553, 8885, 8887, 8886, 6550, 8884, 6552, 
         8883, 6551, 7038, 9345, 6212, 7350, 6886, 9099, 6888, 9097, 6887, 
         9098, 6184, 7634, 9606, 7635, 7436, 7807, 9467, 5884, 8216}]},
       "40"],
      Annotation[#, 40, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwVjztvAVAYht9eknYRSeOubmWVtD8ATVttGU1mUTaCRmJRt/oHdLL7BRZm
nfoTSuMyEWLsxGN48pzvPd855zu+VD6RO5GUhJ1FurJKVpdkgUu3dAEbciO5
mcwEItvjNbmBfOCUPHbp1CudwTl7K/a25E/XUhreoEedxRmI2qQlfVOyF9b/
ZM+46JAqAcnPuk9WoI74pXccwiUcxjO8pm+Oh7zd4d0ufEGEc/cwoW8Kv5Dl
nT/sPs4KYc6+MnuNv8TwHbPcHv9NbYaBR3rgjkcYcf8P2feNNIY4/UHyD+6r
QRUaUIcF83ziNjRhSd3CZc4cAG0nNCU=
         "]], 
        LineBox[{6582, 7802, 6372, 7584, 7585, 7586, 6843, 7869, 6521, 7868, 
         6522, 7870, 6271, 7872, 6525, 7871, 6523, 9385, 6524, 6895, 8105, 
         6894, 8106, 7216, 7188, 7189, 6526, 8862, 8863, 8096, 8095, 9075, 
         6169, 8170, 8171, 8169, 7033, 8172, 6917, 7360, 7078}], 
        LineBox[CompressedData["
1:eJwN0D0vQ2EYh/HL0CZ01KIvqqcsogxeP0NbQ4mtWy0MKsEXMBmMXia+QJOK
CmPVQMUg3uILWA06NBgMruGX/7mf577vnHOCyuZytQco6yMJhVHYTUDeXFRR
K3HYyEJVuQxMKjUIUylImu003OtOp/Zm3dMZg8Bc8v7VsyvrN/NJL7q0fjZx
R8KeceuY/VHdjMCC2TRbulbJnjV754dhTrM6cb7fvrh3Dd/t0PrcPDIvzAOz
7t6MPS39OX/st52Z787nhuDT550AtrWldfsmPF/VvrMV89Y9NfcVVFReEc9m
nJ3W4wD8qs+dvfrRtx486yrsc0gdfWnP//QPdOc32w==
         "]], 
        LineBox[{7654, 7409, 7039, 9198, 7040, 9195, 9197, 9196, 6190, 9058, 
         8816, 8817, 8815, 6485, 7167, 7166, 5917, 9055, 6818, 8078, 6819, 
         6272, 9305, 6013, 7509, 6273, 7724, 6246, 7854, 6487, 8818, 6486, 
         9539, 8082, 9563, 6821, 9562, 8081, 9561, 8080, 8675, 6308, 9361, 
         7614, 8518}]},
       "20"],
      Annotation[#, 20, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwV1FtM1nUcx/GfQYcVopmiHB8ejo/VVhdYagdSS8VDuOKi1LQADyHwoFtW
XnTT1kEF2jIX1cJAi1rCWllWapu10krFpGx6VUvtJIUkVDbs9b94+/l+v7/v
6ff7PxKvTt7TOCqE0OafvowQOiaF8EM8hE76Iz0xMYQzdAf/J3oap3CveF5O
CDE8mh3CE0Uh3C6nn19O52SFsF/sM1QVh/ApPa5/jvjH7Fx6Uo9+vd6U/zvt
omdplXi5nPbMEN4Sa8oN4fFYCBtQoS7Jb0QDfs6zH16zw1naj7Xiz8tdqseL
em1ht9FUu12KTdiI1XqvL7A/HsED5iULQ+gxY7495uE28SF55e6wgJ/Gfkzf
YdqNQbEeOtfcU2Ys0+MG58Xsy8wooTfyl4ufZteJvcHuFuuiX6v/Ckud1ZhR
i2ocEGsXK2MfZH+JQ2g26zr77VW/D0/KuZafwB7+ZDra/We5c3a+D+s8k2Zh
oV7zo3tgKt7R67ye79J59o+zCxBDPvIiW14e8vGevDjdRad5lwH6rb7bzPiO
9mFYzRBm2OEO5Osbw132idOjznqRVPuN/GPoxVEk9Dns7AhanJfJb6Wz1c7B
nbje/Zbouxj34XtveELeft9/iA5jnfhcuSu9R4eeFexm796CNKzV8x8z/sXf
2M1fqG4RKvGrmlLx85Gt/yD9hS5QexPdFv3ecL85td6hBq/y2zFarw76tpkX
7LqT5iBdfJP8jdin/6D7PsPOdpaFTvtvx+Vq/lJ/Bc0TT9jjN/lN0e8ad6NP
r/FmZmAC1vHT7fYKXkajuk/UtOrfEn0DfgwpeubSVPqs+GY0o5xfJ96Aeqxx
x1LxlXZchRWYol8trcafqEGTuZvNb0ahvdaoLaBFmKk+Scc5uwZ/yB/AHn3O
0XNqp4sfo0XuWIgSFKMx+p2IV9Be2kDT1Zz096OFncNujWJmZNi13nf+SN/F
0d8W+gX/cyzhH1J/dbQDvcVv91ZMx155Y8TTMRYf+H+/GwnfYEBtKW3wliPy
tqp9TuwFOk6sTGwKv87s/9j1djnirI4epj3iPc676Sy9L4g95F7VqEEQf5Au
xzLMlDMD6+W16f8SxmIM3te/y7vuok+771OYwB+PqfrsMPN1dGIafzutcu+H
5a3GKmzRd6ezOj2uMucA/0p6kKZF+4lfdP6hnUdopbkpYiX8m/mL5I2IVdIz
3mUyO4ENci7xZikYhUxzU2kGDXQSHdF/Ir1IZ9P/AcMX8VY=
         "]], LineBox[CompressedData["
1:eJwV1FlsVVUUxvENLeAQQEW5LR1oiwodEAMUWqhICfggkdAKwgPEOCTiQO9t
uS0GeFOfNGoLiG0ptBgDyBAoGjRKYqJgZEpwoq0CRiBa4hO8UFoIv/3wv99e
a+39rbXPObmFLydr64aFEDb6uTw+hGlFIfRnhfAEvUafpFm0nP5Pp9OZmIGG
RAgluSGUoiwnhOuPWtPfxbPs/WZCCBflvqZL5UbaP1k8LzuEhPrfhSF00Uu0
k9arr1T/Sv0f8c68EJomhrAei3jsEHdgOyrlKvCUvV/kh7APu7EXe/C5WjO/
HH1z8Rl2YQPfZrO34ON4B+dTk0I4yv89c7yLdzBM/hn1I7TbTF/S7c72qXXQ
eXossD5qlnZxlbiNzqXj9Jmrd0OBO6HavvnRU71O7RCvY7wP0yJaiALkIR8n
nW3Rc6L1eGcm0Qt0ljmn45DaDHrWvpl0ldnL6Rnx/frchwTvZrNsRgsuebdj
zdJo3curifbRbby+d4fnnVmGGtTiT7Wn9R2gI8WneI+iI5AjPwFLnHsOxbym
oN4zL6EfqX2IRmdn869ApnNv6P8m5vB6i9ZhLUp4pMy7zvk0GjDfnTKcGY6A
Hl7ZPGtoIn6TGHL2Nn7iV+T+SedS+NYMdfwW850ifjbezwy1eMne4jgnBuwb
rU+p9VQ9yjCWzxg8gOXy09QffiyEhzAOJ5x/hB6ng3q/YM8W/ufNleaX6fs/
5h1n0ItqF7BZfbh40HoIt9AqLjTPi3wK4rtGEdrkB/jewo/xO3D2B9prnj70
4FV7runRjzVmfg2n7Rtj1jLeW61XqyU9g4P2Z9u/ht/rqOC1Sq2SnpfvwRXx
ZYT4znnNcY9W60r6KT1pz8/I9cz/Et9jz72xJ48quZtqv+izgp6jK2PM7xx+
xW/YInfY/brN1Bf/H8Tl6JKrkuuQqzb/IO2WP4Kd1jvwOCajVy5D/6vWmbRM
76kowb/iUrrWTKfs+y9+47x7xUPWPXShepe5l4s74/dON5h3I7aKP8E2JPmn
UMxnBY+ks3kxR8+Y9Q8+Z2labh02yS/zzPvN3+p8G9rxilpn7IlFuKNfSr4e
aT0b8b71B6hQq7F/b/z29N1DH6RZcgl8x7tJ7m2sj/9X+i/Vswa1qLYnHe/q
zG3cEF/HAd77sQ/57pKH3ep3Abaf3MA=
         "]], LineBox[CompressedData["
1:eJwV0klsjlEYxfEraBFUUfPUUiU2hCCkqCmUGGrYWLWGhdZUqSGG7kwJKhZW
ij2LitKKGIoaOqIDaixVQyQWpaaE37v497znee557v3ubWLWlozNHUIICf58
6xdCfP8Q1gwIIR2xA0MoHBVCDE3jO9HTfEeayjcOCuEj/5TWoQGtfD39alZP
sxZbuwj5ao/09tMU2cf0A/+E1kQ9tPC19LNsd9l0uYXYp1art5eOlq2i7/lq
+hCVeMdXRDNlu8nOl5uHHdF8vTyaLHufNvMP6F3cw1u+PJop20V2rtwcbFWr
1ttCk2Rv0zf8HXoTZXjN34pmysbKzo7uCpvVqvQ20UTZV/QL/5o24WX0O/kX
0bdsZ9npctPwXO2T3jOao95nmHMluzvsQxwfjyO+e9HekR8awgIskVuGpViO
lOHuDH+T3Kl5BdacQJm5e4Y4O60f6e3QZN3awd5UvRUJzt0u11WufUQIP7FG
PccZr9pzEx1j1lhMMaeH3mTaYM4Kc+rpStqs/hb/9GYkhrBdtsHsXFofvYk1
9zCVP8VvNC8bBdbvVTtOn5q1yppGuprWmleDUue+ih/OGeOcbc74HanWdI7u
Xm8GHUFTo/8jmqHXycwiGnBW7Z/eOXrNzL7OMMa8sRiND3wKzZYpt76Fz3O3
jXyb74bo7fTP+G0r+EKaQcebNwHr+PXYgEzzs5AfvbUZs2Xj+bToHcyoUK+j
lXSSvdqsmUj36FfTN+pX/L4SlGKn7Em9y75z3FmRPS5il/3HubulatucIReH
1Y9gil6x3CHfB3EAeWYfw1EU4xJK3HVc5OklzLL3eTNn0gs01Yzt9v5tzR/c
4K8j0/xf/G76H3cctLI=
         "]], LineBox[CompressedData["
1:eJwV1ElsllUUxvFThwhVFzjg3FJLRUoCEjUoIP2KiYahCm0prFAKCFSjC1C0
XweMKKgYwI0YCWgTkFIgKIOCYkFcyFCVFlBQBMWFCoSoCWKhxd9d/Pu895xz
n3Pufb+3BdXPlT+bExG1/ky/OWLdbREt2HZ7xHac9nwK5TdFzLJ+q0/EIgy5
I2LFLWKFETWYgZZbI2bSw70jVtpTg/qCiAY0YqP9g/R42fM8PKV2Ot7k9wam
yW0QXy+2DhPU7xLfiVb8ot9QsQcxBA9gr1j7nRF7aActtq8/esjlmbm4b8Qk
uUrrCtTxz6IW09RNxRLeizFL/43i1XymoJ/c3XhfbiVW4BU1u5xrIu8/1H5o
/Ts9hT9xTPxHfX6ic/V+WG2RdV8ccS/L+F10T+/QLvou/dt8n6gdrvaoHkfw
j9gZM2yW34S99u/DSDVf50eU0j30HM3mRazWb453Mhufm6lCrIz+lt4lHW+9
nZbT/uY8rf44vxMoU/MNr7H0W7pYrArFavrwy8c28d7yZ825iceT6V1YD0Oj
2mbrp9M5kxfdjzaMsd5n/jbsT/CZzG8+7ybn/ADL1RTy7ZLrTnm5S/Q98f9o
jppAjvUT9o6ibeKj6c96rBcrpJ85Xz1twAG5VXza6TX6Xo1rUezsA3DRGf4y
83l6AZ3pTOpH8drieTNecv8vYmvKiY/Ts2dRxKvqcnm9RlebaxU6eLZjt34X
6A6zHBc/kX63GOhdj7e/EhWYoncBzxFyJXgIQzEMC/iuocMxh0+tGbK4yxzl
9hbRfhhr//30oH6H0m9RfTNet38tPW/vCPuW0sfkyzAOj6PV3oXp25Brsv6O
7wF0oB0TMQlL+N9j9l/5ncQa3tc7+2CxG2iz9XW0F27ETn6X6XmJZxfm67FQ
TXe68/RteQ75nHQed7XFniK6lT7jvZ2RH6huEDL6lWKA2FVyj3p+BHX2Vru/
+9SclasyY6u+lfQLeqVco74Zz8vULPfc6Tlj3wTrKnxk/gbrqWrr6Tw0okbd
Ur3eRi56okWPrLtYS19wb8+jW68uNJm9R/pdoDa9T1qCPP711nXI4st0z3pl
0p3zuUKv3WKX06/SzDSX/qvmUzXn6FH/Lz7mcyx9czSbvmteJfpmMBKlmMvv
oPrveRyiP9B76QKz59vXmb4Rc25I3wL+ByuV750=
         "]], LineBox[CompressedData["
1:eJwV0UdwzVEUgPFLbIxRVkSQSF5iZKHEQl0wgySIjRI1Ro82rERZWFgqSfQe
jAhiESy0SBg1iU5ItzF6HWW0Yfze4nvf/9xzz7nn3Zs4d8WE5a1CCLF+YnqE
8KVbCDNjQ/jUPYTP+Cb+ivFdQhgozkoKoX3XEDbGh9CBcyIhzMIMHI5Ty487
h1Ckpli8MjGEPKxCmfo+eq/xvRpz7J2NgoQQHjj7r9w6fU+hDBPsX2HfctTK
L9TzpLVSNCBNfFn9AK7kiugMZrpoxkNczpPNHWNvstxY80R4HB+1Vowxemci
A73kUpDf0/niXPOkpegnLsf26B3oOQiV4gpcQol9V8yQLb/e9zm1F3AebcXn
nfPTmTv1/sVJ4kTUu6c3er0062t+xW/5Ba+Vv6v3HbwWv7N+Rv1pVMlVY4Qz
b4qH8y3+zoPtKzLHfXX3cMr538yRxc/lz/I4d3uOs7iH3Bv7m/VrQbo9VXqN
5mpOlWtnvVnfFjSh0TzPuIHz5HK8zUw0iZv0jKi96E0z+DZnco1eg/kqX8c1
HNH7BhdzvVnr8FmP93qn65eBURifbB7uhIg9rexP4o7ikWjtjdogBjlyH/X4
FL0zfMBZ9e/5ifv+hwG+07DMW9yRW8o93ccJbhaXcgmOo0l8jB+p+4v+6vph
ibXbcos5Qe1BbhQf4v0oQoP4AD9U9wd91fXBIms1crkcr3Yv14v38S7sQZ14
N99X9xup6npjgbVqufncXe12firewVuwDU/EW6P/Td0PpKhLxjxrVXJzuZva
Aq4VF/Im5OOxeHN0n7qviKhLwlDvNAyDMCT6lojTY6O9U31PxzRsEGfzFEzE
ZExCIf4DMRK6GA==
         "]], LineBox[CompressedData["
1:eJwl0zlsznEcx/GfwbF0cvSuPm2lA3qjJRKNqhKTgZAYSEy9plIJbdKBogsi
qmw9XC02iRJV1TpmPQzaPm0IKj0m1+D1j+Gdz+/7/X2Pz+//5ImdqD9YtyyE
MIcHSSG8zQzhHd5jXjxChzGEhZgcFrEqO4QVWInlyEwJ4XFqCI8wmBZCAr1I
W1GSHMJ+ejg9hObEEAbUN9Fn60Pox0vxQ/11dFRtgV15yEchstTWuKtFr7oZ
2kfHzRtDAZ8tPI0619n7BDE9qTl80WIzipAiTsak3KkNIZxGA9bIrcV1+XW0
Xf9qmoREVIsn+aylcbtr6DSNy83S+ih2PmnWFH3ORxV/jc5x72n09hn6OUs9
/UI/Rbt4ztdzjP9O51Iey/BDnG5GGhIyQuhx140udMol0in9393NIQ/f8BVn
7JqnC6jAEhYRV9/mbpreMaMbFXxn0By5Bnft/N7EDdxCBwp5KdJfjEKM2H05
yvF9hdereCPf5V17aTedNW+T75aHXOe/dDM24jhuy+X6Pj1q79t/L3qruSlI
xV3xjJrf9A9+4pCdv+gBfWf5asI5NGPC3jGM46NvO4GxyA+P1/g7alaVvftQ
iZ3mdMh9UL9Lf8zMcpoVeXKXzEOluz47d9Neuoce0TPsrlWcL75EC2iSXJu5
XXoHnAfxCi9wXk0/fYps/dv42YKS6LthK6rVDLm/QF/Tmuj3N7dFfZmZ5WaX
0h3YjqXY///qP9Rdle0=
         "]], 
        LineBox[{9311, 6045, 9312, 6043, 6694, 6692, 8138, 6691, 7820, 6693, 
         6119, 9310, 9309, 9311}], LineBox[CompressedData["
1:eJwlkLlyAVAUhn9tCowmYg2RJ7CNd0ChsVWWtPIGlp5R4SUUIgwz0mC8heUR
LJkQofCZFN/8/73nnP+euZ78e6JkkBSFlEMqPkltNGiTOujYJY1g75bOL1LT
Lv2ig2dpCJ/QeJRiXqmP/4A9PuuTMvBD7Uj/CbxOaUfOFg7wDV/kTWDBWwHe
bKFhj2SidmWXB/SCGtECWRuyl5xX7LRC12iI/h7ZfubT9OXweUiSVWemgI9T
m9/v6DVbpSl+BhZ4I9PH3q8QYyYOf2SXqVWgChHmi2R3yas5///qBnXENPU=

         "]], LineBox[CompressedData["
1:eJwl09tPz3Ecx/F3Lhw2mcOmIhFy45Qio7A5zMxciM7nnGpN+Rsqq7hBN27i
0iVTsS64IU1cO4xSrnLIohGReTQXz70+r8/79Pl8vr9fem1TfmNCRLxBWlpE
Y3LEpbUR9SkRl+l5vnRNxGeUoAxVyEyKKKeVqECz3A60ow3dqyJ2p0dU6zmg
RwV9Qqvo2MqIRDmDfC3/jJ6ie+T3qstbYf7qiFxaR/vEeszbJ3Z4fcReWsYv
Fpsj54X4MuslWIrN6yI2YQs24pici2pa0YIz8k/jrtxnfIW5ZSjHU34QhWqK
0WdOg5lZyJ6Fz6HbMWNdJKdBrwLapl+tu53jn7vTWVqPOmTz3anugWQ5D5Gl
foDfRh/wx3Fv9v7O8cvedbFpmqxvCmr0SaLLUW//HT+CSrzHKH7az1Xfo89L
+gqvsVOs0xly6CSt8c2qcWv2G/GZGRG7rH+o/+7bJLjPJA3a71yP0WVuL/9W
7yEMo8P+MIaQ6k3a6aQ3b6Mn9c/HCRRgq94TYl/xDaNyjpg9QjP02oBO62K5
RSjENf6v3Cm1F5zxj3UTnaa/cdv+DL0ib8r8q7Pv77d739uNO2spLcEdec36
H7XeId5CW7FI/iM6Y6+ZJpq5EDf17MINzPMOczEfY2If8BETzv6FjuMT+vkF
csq8cTkOOc8BHMR+5JnfnfT/f/YPxwuJWA==
         "]], 
        LineBox[{6737, 8467, 8468, 8469, 6739, 8465, 8464, 8462, 8790, 8789, 
         8791, 8785, 8787, 8786, 8788, 9116, 9115, 6418, 8113, 8112, 9114, 
         8110, 8111, 6417, 6910, 5890, 9253, 6416, 8782, 6415, 8783, 6738, 
         7526, 7525, 7524, 6736, 8068, 8064, 8065, 5991, 8066, 8067, 7008, 
         7623, 8537, 6162, 8538, 7624, 7009, 8154, 8153, 5992, 8070, 8069, 
         9007, 9413, 6737}], LineBox[CompressedData["
1:eJwl1GlMDnAcwPF/zLG5N1OREvWGDkXT0Jhjy5VjM7KJMjZs7q1CqDAyZjHM
Oe+cWa4Rb2xmszlesTkrFW8IkeMF+Tzz4tv3+f+u//E8K7Fo7bw1USGEeH/u
Dg3hUmwI8+NDuMAP+fCQEBbyvZgQFvAi5CPTujYuhKuIHhTCLaREh3Df+hAO
I0+sdnAIWYkhfJU7KNbGUQkhdMJrcwJ38A65Vvt/Rg+xXuiJb+qz9f80q8Ce
D9Td9rkOrdZJ5g9DbzOWWFclOZP1d31tZv12jy/8i8v1tvNJc68PDOGFupd4
hd2ReeIV/Ikr+fMwPfzXzA78Qa73mIY086dzKs/gXeo+mJPrDBXqKrHcXjvF
58jPxWzMxCwc0JfHZerLnW+F2uvueQ2X5U7IHUeJz8/FqtW1mJXH77mJk/WV
yp9UdwrPfL6h9iaKzTslv01dVHIIW+UDb+YtmKC2jLdjGzaaWaKnzLm3Ikvf
O/fZIL5TfqL6St6BclRbV/Bw+RbvtJ47eB1/9M6buNk7NqHRnDrvfdrnR+KP
8dZeTc5Xz83c3X5vnfsMv+bT/IbbOV1/GvpHfpdi53EOd8SmcDc1483OQRbG
YSzWOGOD2Y1o1vseLeiq/qwzduE6M24h35lSOUdPgdx43uh+KWINqMdo9SX6
S1GMJHMbxHK8a5X9lrrjHl7MOfIFvDfyW1fzi4/YY4Q568xdi37euQ/64qjc
TzU/InVqntr/KBeasV9sCT+xfozV7rwSq7AvkovsjUIcky/iZcjWE+c7icdg
JGCkeDo6oyu6YaB4LAYhBmP0lZpTgmIURO6EVmcaac9RyEAmauSv4KLvcYDe
TL2X3G2f2otcxTU8BZMwFZOR4c5fov//z/kHXN6zGQ==
         "]], LineBox[{8422, 6066, 8423, 8421, 8420, 8948, 8422}], 
        LineBox[{7991, 6677, 7990, 6676, 8957, 7301, 7987, 6673, 7907, 6674, 
         7988, 8515, 7609, 6723, 8053, 6722, 7328, 7263, 6097, 7577, 6735, 
         7620, 8536, 6161, 7621, 7622, 7443, 7986, 6672, 7985, 5857, 7077, 
         6675, 7578, 8037, 8038, 6714, 8039, 6098, 7579, 7264, 6516, 8852, 
         6518, 8851, 6515, 9273, 8310, 8466, 8308, 8309, 8667, 5950, 8311, 
         8313, 8312, 8856, 8860, 8859, 8857, 7612, 9384, 8517, 7991}], 
        LineBox[{9569, 9339, 9568, 9567, 9569}], 
        LineBox[{9489, 8389, 6039, 8387, 8933, 8386, 9486, 9488, 9487, 9489}],
         LineBox[{9587, 6038, 9586, 9588, 9585, 9587}], 
        LineBox[{6120, 9321, 9319, 9320, 6072, 9322, 6071, 6745, 6421, 8115, 
         6419, 7821, 6420, 6120}], 
        LineBox[{9581, 6065, 9580, 9582, 9579, 9581}], 
        LineBox[{9501, 8463, 6100, 8461, 8930, 8460, 9498, 9500, 9499, 9501}],
         LineBox[{9578, 9462, 9575, 9574, 9576, 6062, 9577, 9578}], 
        LineBox[{9600, 9602, 9599, 9601, 5887, 9611, 9600}], 
        LineBox[{9485, 8356, 9483, 9482, 8411, 8413, 6055, 8414, 8412, 6259, 
         9484, 9485}], 
        LineBox[{6969, 8015, 8013, 8014, 7969, 8011, 8010, 9230, 7061, 9465, 
         9466, 9224, 9220, 8224, 9229, 9227, 9228, 9216, 9219, 9217, 9218, 
         9222, 9221, 9226, 9225, 9223, 7595, 9464, 7596, 8180, 8181, 8012, 
         8969, 6701, 8130, 8129, 8131, 6969}], 
        LineBox[{8223, 6080, 8438, 8222, 8952, 8955, 6666, 9175, 8156, 7292, 
         7972, 7971, 7973, 7970, 8954, 8953, 5852, 9252, 8221, 8225, 8223}], 
        LineBox[{9497, 8449, 6088, 8447, 8446, 5854, 9495, 9494, 9496, 9497}],
         LineBox[{9523, 9359, 9357, 9358, 6284, 9523}], 
        LineBox[{9529, 9527, 9525, 9526, 6322, 9529}], 
        LineBox[{6992, 9409, 9407, 9408, 6710, 9550, 9551, 6992}], 
        LineBox[{7131, 6159, 7130, 7002, 9171, 7003, 8365, 8367, 8368, 7006, 
         7149, 6233, 8983, 6234, 8027, 8026, 8028, 9166, 6991, 9167, 8148, 
         5856, 9506, 9507, 9596, 6366, 9508, 6367, 8076, 7123, 7124, 7007, 
         7126, 7125, 9234, 7005, 9172, 7004, 7131}], 
        LineBox[{9534, 9370, 9368, 9369, 6369, 9534}], 
        LineBox[{9353, 9351, 9349, 9350, 6231, 9353}], 
        LineBox[{9609, 6281, 9608, 9607, 9609}], 
        LineBox[{8641, 8637, 6016, 8638, 8636, 8641}], 
        LineBox[{9604, 9603, 9605, 6017, 9604}], 
        LineBox[{9302, 6288, 9301, 9300, 9302}], 
        LineBox[{9292, 6354, 9291, 9290, 9292}], 
        LineBox[{9364, 9363, 9366, 9365, 6089, 9364}], 
        LineBox[{9326, 9325, 9327, 6096, 9328, 9326}], 
        LineBox[{8837, 6504, 8838, 8836, 8835, 8837}], 
        LineBox[{9383, 9382, 9380, 9381, 6513, 9383}], 
        LineBox[{8855, 8858, 6517, 8854, 8853, 9540, 6099, 9332, 9330, 9329, 
         9331, 6724, 9541, 8855}], 
        LineBox[{9315, 9314, 9316, 6049, 9317, 9315}], 
        LineBox[{7941, 6644, 7940, 5988, 7982, 6671, 7981, 5990, 7335, 7398, 
         7334, 5989, 7941}], LineBox[{9479, 6667, 9478, 9477, 9479}], 
        LineBox[{9546, 8002, 9545, 9544, 9546}], 
        LineBox[{9554, 6832, 9553, 9552, 9555, 9554}], 
        LineBox[{9559, 6838, 9558, 9557, 9560, 9559}], 
        LineBox[{9594, 8355, 9593, 9592, 9595, 9594}], 
        LineBox[{9538, 8784, 9537, 9536, 9538}]},
       "0"],
      Annotation[#, 0, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], LineBox[CompressedData["
1:eJwNjz9LQmEUh38uOdgUdK9pZjcNIqWhdHNS1AtKon6AwqGhovZKcOmPbjaa
fgEdbKxdcPNLKJSRUdkN2nqGh+e+5/2dc95rVc5LZy5JFRga0sK65Ib3gPQB
M7A3pOs16QbmnB34gTpnx0cuLP3inFdqW1IHTGYY8MfMEXxxPyP3jT/hPsQM
3MRznKR3Z1PqBaUxs2tkU9QmfHvgkDdEV6QDHMEJ+o7oa/CGRc6n1Mv4GJfw
Cfaa0hZzlvzSA7Vb3nMHdXikvw8FMq94Ci9QJfuGL/AVOPRf4ip7TLJ+3uKD
PdiFPLXYqhSHFjsG5J7Z/QQGd1HqyzjCzm3oMbsLRbJZbEMaavxLBu+T/Qdb
dz5o
         "]], 
        LineBox[{6563, 7200, 6277, 7416, 7119, 7120, 6399, 7811, 7810, 7510, 
         6276, 7725, 6268, 7858, 6492, 7857, 6490, 9379, 6491, 6892, 8102, 
         6891, 8103, 5919, 7169, 7170, 6489, 8819, 8820, 8086, 8085, 9067, 
         6155, 8166, 8167, 8165, 7032, 8168, 6906, 7355, 7072}], 
        LineBox[CompressedData["
1:eJwNz8sqBGAYxvFXodwAc8QgVriAGVZm7K0kGy6AbNzBDArjMBQlC6fcgWxs
nMIaN0CNYqPYIL/Fv+d9n/f0fbnp2bGZhoiYQj0dsdId8ZaKWKZVrKKcjDjo
ijhEuTOigpG2iMFMxIeZ+/aIB9zhTG+Bn8cwUnad90SkaUUtpT8vL5pvVS/R
gjzDT+Omwxy9pNe4QkXfI54woPapv58+yxfszIqHeKN2HXvjIu+ILtETmqD7
6rc0iXFeita8dz3nfiLi3a6aeBMbmLfz1d/zalX5Gnr9uw8t7ry0RsyZqdNT
vd/iL1zYW6JFTLiz5cY2frIRf/jFJH+Ht4tGNKMJe/gH82g94g==
         "]], 
        LineBox[{7656, 7412, 7050, 9205, 7052, 9204, 7051, 6202, 8775, 6201, 
         8590, 8589, 6402, 7194, 7193, 5955, 9081, 6845, 8097, 6846, 6530, 
         9386, 6528, 7873, 6529, 7874, 6263, 7875, 6532, 8866, 6531, 9542, 
         8100, 9566, 6847, 9565, 8099, 9564, 8098, 8753, 6379, 9371, 7631, 
         8556}]},
       RowBox[{"-", "20"}]],
      Annotation[#, -20, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.4], 
        LineBox[{5830, 8196, 8197, 7657, 7659, 7658, 7812, 7146, 7425, 7424, 
         7423, 6408, 7082, 5878, 5835, 6477, 9378, 6478, 6438, 8798, 6439, 
         8212, 8213, 9108, 9109, 9107, 6903, 7013, 6410, 8809, 6480, 8807, 
         6479, 8808, 5908, 8876, 8877, 8875, 8879, 8878, 6546, 9126, 6921, 
         9125, 6920, 9127, 6923, 8119, 6922, 7241, 6442, 9085, 6881, 9084, 
         6880, 6173, 9510, 9511, 9509, 7692, 7691, 8203, 8202, 5840}], 
        LineBox[{7809, 7704, 7705, 7703, 7706, 9515, 9517, 9516, 6185, 9038, 
         6788, 9037, 6789, 9039, 6787, 9426, 7016, 7132, 7421, 6918, 7361, 
         7080, 7413, 6786, 7340, 6427, 8897, 8898, 8894, 8896, 8895, 6005, 
         8900, 6585, 8899, 6586, 8901, 6428, 9376, 6960, 6919, 9122, 9124, 
         9123, 6589, 8904, 6590, 8905, 6471, 8806, 6472, 8232, 8233, 5899, 
         5864, 7889, 7890, 7888, 7892, 7891, 6593, 7886, 6592, 7887, 7240, 
         8795, 7831, 7832, 7681, 7683, 7682, 7836}]},
       RowBox[{"-", "40"}]],
      Annotation[#, -40, "Tooltip"]& ], {}, {}, {}}}],
  AspectRatio->1,
  Frame->True,
  PlotRange->{{-5, 5}, {-5, 5}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.4734391866589146`*^9}]
}, Open  ]],

Cell["\<\
One way to change the value of objects that are updated dynamically is of \
course to set them as commonly done with other variables. There are much more \
options, though.\
\>", "Text",
 CellChangeTimes->{{3.4733543202045493`*^9, 3.4733543762086477`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " is often used in connection with controls such as sliders and checkboxes. \
The full range of controls available in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is discussed in \"",
 ButtonBox["Control Objects",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/ControlObjects"],
 "\"; here sliders are used to illustrate how things work. The principles of \
using ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " with other controls is basically the same."
}], "Text",
 CellChangeTimes->{3.4733543890162697`*^9}],

Cell[TextData[{
 "A slider is created by evaluating the ",
 Cell[BoxData[
  ButtonBox["Slider",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Slider"]], "InlineFormula"],
 " function, in which the first argument is the position and the optional \
second argument specifies the range and step size, with the default range \
from 0 to 1 and the default step size 0."
}], "Text",
 CellChangeTimes->{3.4733543997646885`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Slider", "[", "0.75", "]"}]], "Input",
 CellChangeTimes->{{3.473354403477495*^9, 3.473354406457101*^9}}],

Cell[BoxData[
 SliderBox[0.75]], "Output",
 CellChangeTimes->{3.473439186690115*^9}]
}, Open  ]],

Cell["\<\
Click on the thumb and move it around. The thumb moves, but nothing else \
happens since the slider is not connected to anything.\
\>", "Text",
 CellChangeTimes->{3.473354419436323*^9}],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.4733544274547377`*^9, 3.473354433944349*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.473354443694366*^9, 3.4733544637560015`*^9}}],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`x, StandardForm],
  ImageSizeCache->{9., {0., 9.}}]], "Output",
 CellChangeTimes->{3.4734391867057147`*^9}]
}, Open  ]],

Cell[TextData[{
 "This associates the position of the slider with the current value of the \
variable ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.473354505040074*^9, 3.473354507894879*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Slider", "[", 
  RowBox[{"Dynamic", "[", "x", "]"}], "]"}]], "Input"],

Cell[BoxData[
 SliderBox[Dynamic[$CellContext`x]]], "Output",
 CellChangeTimes->{3.473439186721315*^9}]
}, Open  ]],

Cell["\<\
When dragging the slider around you change the value of x. But the connection \
is not one-way. You can also control the slider position by setting x:\
\>", "Text",
 CellChangeTimes->{{3.473354518690098*^9, 3.4733545646321783`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "=", "0"}], ";"}]], "Input",
 CellChangeTimes->{{3.473354546083746*^9, 3.4733545493129516`*^9}}],

Cell["\<\
The slider position is linke to the value of x. If we evaluate another slider \
they both are linked to x.\
\>", "Text",
 CellChangeTimes->{{3.473354579904605*^9, 3.4733546037258472`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Slider", "[", 
  RowBox[{"Dynamic", "[", "x", "]"}], "]"}]], "Input"],

Cell[BoxData[
 SliderBox[Dynamic[$CellContext`x]]], "Output",
 CellChangeTimes->{3.4734391867369146`*^9}]
}, Open  ]],

Cell[TextData[{
 " ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " is a simple building block, but the rest of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " turns it into a flexible tool for creating nimble, zippy, and often fun \
little interactive displays."
}], "Text",
 CellChangeTimes->{{3.4733546747527723`*^9, 3.473354684471589*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Slider", "[", 
      RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
     RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4733546973572116`*^9, 3.4733547028640213`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SliderBox[Dynamic[$CellContext`x]], ",", 
     DynamicBox[ToBoxes[$CellContext`x, StandardForm],
      ImageSizeCache->{9., {0., 9.}}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SliderBox[Dynamic[$CellContext`x]], ",", 
     DynamicBox[ToBoxes[$CellContext`x, StandardForm],
      ImageSizeCache->{9., {0., 9.}}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SliderBox[Dynamic[$CellContext`x]], ",", 
     DynamicBox[ToBoxes[$CellContext`x, StandardForm],
      ImageSizeCache->{9., {0., 9.}}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439186768115*^9}]
}, Open  ]],

Cell[TextData[{
 "The great power of ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " lies in the fact that it can display any function of ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " just as easily."
}], "Text",
 CellChangeTimes->{3.473354731458872*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"10", "y", " ", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "0", ",", 
        RowBox[{"4", "Pi"}]}], "}"}]}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{3.473354750428505*^9},
 CellID->2116427372],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SliderBox[Dynamic[$CellContext`x]], ",", 
   DynamicBox[ToBoxes[
     Plot[
      Sin[10 $CellContext`y $CellContext`x], {$CellContext`y, 0, 4 Pi}], 
     StandardForm],
    ImageSizeCache->{225., {64., 71.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439186783715*^9}]
}, Open  ]],

Cell[TextData[{
 "Note the position of the ",
 ButtonBox["Dynamic",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dynamic"],
 " command that wraps the ",
 ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"],
 " construct. The following does not work "
}], "Text",
 CellChangeTimes->{{3.473354781285359*^9, 3.4733548105878105`*^9}, {
  3.4733550041685505`*^9, 3.4733550132633667`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"10", "y", " ", 
       RowBox[{"Dynamic", "[", "x", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", 
       RowBox[{"4", "Pi"}]}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{
  3.473354750428505*^9, {3.473355026180189*^9, 3.473355046382225*^9}},
 CellID->316307126],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SliderBox[Dynamic[$CellContext`x]], ",", 
   GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQzbyf69xj04l2DFAw8VPM5mmTztvD+NZHvbicih/A
+QVVfombC17A+bk7UvuYlD/A+VdeeHIuT/oC53fpf2PYFvkDzi/UPjH1wNI/
cP6v5Ox1d/MYHGD8pL1hARPSmOD85I9XDhzoYIHzewy25y9rY4PzmQ5sN2+p
4oDzBbW8z92fwQXne8x3WvxhEg+cL/7+jFv9dj44f9bxXYzMmQJwvo2s43+F
FEE4X/uBwJPaEiE4f+0KoYytRcJwfs292MvabSJwfqGNhfe8KaJw/q/5Lkmv
J4jB+RcKZiWULxKH8y3dlf7dXSgB5590tVzhMEcSzl+6cablo9VScL6osk5W
3EppOP8SI0eT5B4ZOH8rR/GyCydl4XwdUYGspKNycP77vm8ixtfk4Xzl9nb9
/CwFOP9R1O1bTs8RfI+nl39uzVOE8yuKUjPE3iL4fttme4mVKcH57/5k1TB/
Q/AXXm/cklesjAiPDNuEyt8IvuzfidGFVSpw/jP37lMcLKpw/mG1M/Zy3Qh+
FscyFkVONTh/+wIV28MTEfxz1jZHgwTV4fwfWbODE/oQ/BMB80N5xTTg/CRL
m+XLpyD4htYrvX8rasL5AGpkq6Q=
     "], {}],
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->
     NCache[{{0, 4 Pi}, {0., 1.}}, {{0, 12.566370614359172`}, {0., 1.}}],
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], 
      Scaled[0.02]}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439186830515*^9}]
}, Open  ]],

Cell[TextData[{
 "Because ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " does its work entirely in the front end, you cannot use it inside \
functions that need to access the value of an expression in order to do their \
work. ",
 "The ",
 Cell[BoxData[
  ButtonBox["Plot",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Plot"]], "InlineFormula"],
 " command needs to have specific numerical values for ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " to make a plot, but the ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Dynamic",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Dynamic"], "[", 
   StyleBox["x", "TI"], "]"}]], "InlineFormula"],
 " inside the function being plotted does not ",
 StyleBox["evaluate",
  FontSlant->"Italic"],
 " into anything in the kernel. It remains inert as ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Dynamic",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Dynamic"], "[", 
   StyleBox["x", "TI"], "]"}]], "InlineFormula"],
 ", preventing the ",
 Cell[BoxData[
  ButtonBox["Plot",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Plot"]], "InlineFormula"],
 " command from doing anything sensible."
}], "Text",
 CellChangeTimes->{{3.4733550768022785`*^9, 3.4733550874726973`*^9}}],

Cell[TextData[{
 "Another way to look at it is that the expression inside a ",
 Cell[BoxData[
  ButtonBox["Plot",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Plot"]], "InlineFormula"],
 " command does not appear directly anywhere in the output.  ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " is a formatting function that does its work in the front end, not in the \
kernel, so if it is used in a way where it will never be placed as output, it \
is probably a mistake."
}], "Text",
 CellChangeTimes->{3.4733551101863365`*^9}],

Cell[TextData[{
 "You can use dynamic expressions with ",
 Cell[BoxData[
  ButtonBox["Panel",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Panel"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["Row",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Row"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["Column",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Column"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["Grid",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Grid"]], "InlineFormula"],
 ", and other formatting constructs."
}], "Text",
 CellChangeTimes->{3.473354767791335*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Panel", "[", 
  RowBox[{"Column", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Slider", "[", 
         RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
        RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"10", "y", " ", "x"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "0", ",", 
          RowBox[{"4", "Pi"}]}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.4733547742029467`*^9}],

Cell[BoxData[
 PanelBox[
  TagBox[GridBox[{
     {
      TemplateBox[{SliderBox[
         Dynamic[$CellContext`x]],DynamicBox[
         ToBoxes[$CellContext`x, StandardForm], 
         ImageSizeCache -> {8., {0., 11.}}]},
       "Row",
       DisplayFunction->(RowBox[{#, "\[InvisibleSpace]", #2}]& ),
       InterpretationFunction->(RowBox[{"Row", "[", 
          RowBox[{"{", 
            RowBox[{#, ",", #2}], "}"}], "]"}]& )]},
     {
      DynamicBox[ToBoxes[
        Plot[
         Sin[10 $CellContext`y $CellContext`x], {$CellContext`y, 0, 4 Pi}], 
        StandardForm],
       ImageSizeCache->{225., {64., 71.}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"]]], "Output",
 CellChangeTimes->{3.4734391868617153`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Localization", "Subsection",
 CellChangeTimes->{{3.47335545354854*^9, 3.4733554554829435`*^9}}],

Cell[TextData[{
 "Using multiple ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " constructs with the same variable be lead to unwanted cross-connected \
outputs. "
}], "Text",
 CellChangeTimes->{{3.4733554832197924`*^9, 3.4733555266502686`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"10", "y", " ", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "0", ",", 
        RowBox[{"2", "Pi"}]}], "}"}]}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.473355448618932*^9, 3.4733554529869394`*^9}, 
   3.473355530721876*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SliderBox[Dynamic[$CellContext`x]], ",", 
   DynamicBox[ToBoxes[
     Plot[
      Sin[10 $CellContext`y $CellContext`x], {$CellContext`y, 0, 2 Pi}], 
     StandardForm],
    ImageSizeCache->{225., {64., 71.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439186908515*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Tan", "[", 
       RowBox[{"10", "y", " ", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "0", ",", 
        RowBox[{"2", "Pi"}]}], "}"}]}], "]"}], "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SliderBox[Dynamic[$CellContext`x]], ",", 
   DynamicBox[ToBoxes[
     Plot[
      Tan[10 $CellContext`y $CellContext`x], {$CellContext`y, 0, 2 Pi}], 
     StandardForm],
    ImageSizeCache->{225., {64., 71.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391869397154`*^9}]
}, Open  ]],

Cell[TextData[{
 "If you move the slider on one of the outputs you also change the x value \
from the other. ",
 "Although this can be very useful in some situations, most of the time you \
would probably be happier if these two sliders could be moved independently. \
The solution is a function called ",
 Cell[BoxData[
  ButtonBox["DynamicModule",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/DynamicModule"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.4733555418602953`*^9, 3.473355571827948*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["DynamicModule",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/DynamicModule"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["x", "TI"], ",", 
      StyleBox["y", "TI"], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
    StyleBox["expr", "TI"]}], "]"}]], "InlineFormula"],
 " ",
 "represents an object which maintains the same local instance of the symbols \
",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["\[Ellipsis]", "TR"]], "InlineFormula"],
 " in the course of all evaluations of ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " objects in ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 ". Symbols specified in a ",
 Cell[BoxData[
  ButtonBox["DynamicModule",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/DynamicModule"]], "InlineFormula"],
 " will by default have their values maintained even across ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " sessions."
}], "Text",
 CellChangeTimes->{{3.473355589034778*^9, 3.473355595290389*^9}}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["DynamicModule",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/DynamicModule"]], "InlineFormula"],
 " has arguments identical to ",
 Cell[BoxData[
  ButtonBox["Module",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Module"]], "InlineFormula"],
 " and is similarly used to localize and initialize variables, but there are \
important differences in how they operate. "
}], "Text",
 CellChangeTimes->{3.473355581359565*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "=", ".5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Slider", "[", 
      RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"10", "y", " ", "x"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "0", ",", 
          RowBox[{"2", "Pi"}]}], "}"}]}], "]"}], "]"}]}], "}"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`x$$ = 0.5}, 
  RowBox[{"{", 
   RowBox[{
    SliderBox[Dynamic[$CellContext`x$$]], ",", 
    DynamicBox[ToBoxes[
      Plot[
       Sin[10 $CellContext`y $CellContext`x$$], {$CellContext`y, 0, 2 Pi}], 
      StandardForm],
     ImageSizeCache->{225., {64., 71.}}]}], "}"}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.473439186986515*^9}]
}, Open  ]],

Cell["\<\
Now, the variable x is localized and does not interfere with the values of x \
from the above lines.\
\>", "Text",
 CellChangeTimes->{{3.473355611108817*^9, 3.473355633806857*^9}}],

Cell[TextData[{
 "Another important point is that you want your  ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " to evaluate in under a second, preferably well under. If you have an \
example that simply cannot finish evaluating fast enough, yet you want to be \
able to make it respond to a slider you can use asynchronous updating and \
simply accept that you will not get real\[Hyphen]time interactive \
performance. ",
 " If that is what you want to do, setting ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ContinuousAction",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ContinuousAction"], "->", 
   ButtonBox["False",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/False"]}]], "InlineFormula"],
 " in the slider or other control is a good idea; that way you get only one \
update after the control is released, avoiding the starting up of potentially \
lengthy evaluations in the middle of a drag, before you have arrived at the \
value you want to stop at."
}], "Text",
 CellChangeTimes->{{3.4734117392897215`*^9, 3.4734118315794835`*^9}}],

Cell["\<\
The cell bracket becomes outlined, indicating evaluation activity, only after \
you release the slider.\
\>", "Text",
 CellChangeTimes->{3.4734118360878916`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "1"}], "}"}], ",", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Slider", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "10"}], "}"}], ",", 
        RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], "]"}], ",", 
      RowBox[{"Dynamic", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Pause", "[", "n", "]"}], ";", "n"}], ",", 
        RowBox[{"SynchronousUpdating", "\[Rule]", "False"}]}], "]"}]}], "}"}],
     "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`n$$ = 1}, 
  TagBox[GridBox[{
     {
      SliderBox[Dynamic[$CellContext`n$$], {1, 10},
       ContinuousAction->False]},
     {
      DynamicBox[ToBoxes[
       Pause[$CellContext`n$$]; $CellContext`n$$, StandardForm],
       SynchronousUpdating->False]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391870801153`*^9}]
}, Open  ]],

Cell["\<\
Another, much better solution is to provide a fast\[Hyphen]to\[Hyphen]compute \
preview of some sort during the interactive control dragging operation, then \
compute the full, slow output when the control is released. Several features \
exist specifically to support this.\
\>", "Text",
 CellChangeTimes->{3.4734118679431477`*^9}],

Cell[TextData[{
 "The first is the function ",
 Cell[BoxData[
  ButtonBox["ControlActive",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ControlActive"]], "InlineFormula"],
 ", which returns its first argument if a control is currently being dragged, \
and its second argument if not. Unlike ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["ControlActive",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ControlActive"]], "InlineFormula"],
 " is an ordinary function that evaluates in the kernel, returning one or the \
other of its arguments immediately. It can be embedded inside functions or \
option values."
}], "Text",
 CellChangeTimes->{3.4734118799395685`*^9}],

Cell[TextData[{
 "The second feature is an option setting ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["SynchronousUpdating",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/SynchronousUpdating"], "->", 
   ButtonBox["Automatic",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Automatic"]}]], "InlineFormula"],
 " for ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 ", which makes the ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " synchronous when a control is being dragged, and asynchronous when the \
control is released. Together, these two features can be used to implement a \
fast, synchronously updated display to be used while a control is being \
dragged, along with a slower, asynchronously updated display when it is \
released."
}], "Text",
 CellChangeTimes->{3.4734118912963886`*^9}],

Cell["\<\
The displayed text changes depending on whether or not the slider is being \
dragged.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "1"}], "}"}], ",", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Slider", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "10"}], "}"}]}], "]"}], ",", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"{", 
        RowBox[{"n", ",", 
         RowBox[{"ControlActive", "[", 
          RowBox[{"\"\<Active\>\"", ",", "\"\<Not Active\>\""}], "]"}]}], 
        "}"}], "]"}]}], "}"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`n$$ = 1}, 
  TagBox[GridBox[{
     {
      SliderBox[Dynamic[$CellContext`n$$], {1, 10}]},
     {
      DynamicBox[ToBoxes[{$CellContext`n$$, 
         ControlActive["Active", "Not Active"]}, StandardForm],
       ImageSizeCache->{131., {3., 10.}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391871113157`*^9}]
}, Open  ]],

Cell["\<\
A simple number is displayed, synchronously, while the slider is being \
dragged, and when it is released, a graphic is generated asynchronously.\
\>", "Text",
 CellID->671323377],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "3"}], "}"}], ",", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Slider", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1000", ",", "1"}], "}"}]}], "]"}], ",", 
      RowBox[{"Dynamic", "[", 
       RowBox[{
        RowBox[{"Graphics", "[", 
         RowBox[{
          RowBox[{"ControlActive", "[", 
           RowBox[{
            RowBox[{"Inset", "[", 
             RowBox[{"n", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ",", 
            RowBox[{"Line", "[", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Cos", "[", "t", "]"}], ",", 
                   RowBox[{"Sin", "[", "t", "]"}]}], "}"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"t", ",", "0.", ",", 
                 RowBox[{"2", "Pi"}], ",", 
                 RowBox[{"2", 
                  RowBox[{"Pi", "/", "n"}]}]}], "}"}]}], "]"}], "]"}]}], 
           "]"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "300"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "1"}]}], "]"}], ",", 
        RowBox[{"SynchronousUpdating", "\[Rule]", "Automatic"}]}], "]"}]}], 
     "}"}], "]"}]}], "]"}]], "Input",
 CellID->1118194978],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`n$$ = 3}, 
  TagBox[GridBox[{
     {
      SliderBox[Dynamic[$CellContext`n$$], {3, 1000, 1}]},
     {
      DynamicBox[ToBoxes[
        Graphics[
         ControlActive[
          Inset[$CellContext`n$$, {0, 0}], 
          Line[
           Table[{{0, 0}, {
              Cos[$CellContext`t], 
              Sin[$CellContext`t]}}, {$CellContext`t, 0., 2 Pi, 
             2 (Pi/$CellContext`n$$)}]]], ImageSize -> 300, PlotRange -> 1], 
        StandardForm],
       ImageSizeCache->{375., {184., 191.}},
       SynchronousUpdating->Automatic]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391871269155`*^9}]
}, Open  ]],

Cell[TextData[{
 "Sometimes you might want a preview that is some kind of reduced, thinned \
out, skeletal, or other elided form of the final display. This crude preview \
can be computed fast enough to give a smooth preview of the final version and \
it does not block the front end. This behavior is so useful that it is the \
default in ",
 Cell[BoxData[
  ButtonBox["Plot3D",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Plot3D"]], "InlineFormula"],
 " and other plotting functions."
}], "Text",
 CellChangeTimes->{{3.4734119829621496`*^9, 3.4734120586534824`*^9}}],

Cell["\<\
This displays a 3D plot with a very small number of plot points while the \
control is being dragged and then refines the image with a large number of \
plot points when the control is released.\
\>", "Text",
 CellChangeTimes->{3.4734120638326917`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "1"}], "}"}], ",", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Slider", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5"}], "}"}]}], "]"}], ",", 
      RowBox[{"Dynamic", "[", 
       RowBox[{
        RowBox[{"Plot3D", "[", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"n", " ", "x", " ", "y"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
          RowBox[{"PlotPoints", "\[Rule]", 
           RowBox[{"ControlActive", "[", 
            RowBox[{"10", ",", "100"}], "]"}]}], ",", 
          RowBox[{"MaxRecursion", "\[Rule]", "0"}]}], "]"}], ",", 
        RowBox[{"SynchronousUpdating", "\[Rule]", "Automatic"}]}], "]"}]}], 
     "}"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`n$$ = 1}, 
  TagBox[GridBox[{
     {
      SliderBox[Dynamic[$CellContext`n$$], {1, 5}]},
     {
      DynamicBox[ToBoxes[
        Plot3D[
         Sin[$CellContext`n$$ $CellContext`x $CellContext`y], {$CellContext`x,
           0, 3}, {$CellContext`y, 0, 3}, PlotPoints -> 
         ControlActive[10, 100], MaxRecursion -> 0], StandardForm],
       ImageSizeCache->{225., {85., 93.}},
       SynchronousUpdating->Automatic]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391871581154`*^9}]
}, Open  ]],

Cell[TextData[{
 "By default, ",
 Cell[BoxData[
  ButtonBox["Plot3D",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Plot3D"]], "InlineFormula"],
 " produces a similar preview, though with a somewhat less extreme spread of \
quality."
}], "Text",
 CellID->1235109669],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "1"}], "}"}], ",", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Slider", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5"}], "}"}]}], "]"}], ",", 
      RowBox[{"Dynamic", "[", 
       RowBox[{
        RowBox[{"Plot3D", "[", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"n", " ", "x", " ", "y"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"SynchronousUpdating", "\[Rule]", "Automatic"}]}], "]"}]}], 
     "}"}], "]"}]}], "]"}]], "Input",
 CellID->1273405741],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`n$$ = 1}, 
  TagBox[GridBox[{
     {
      SliderBox[Dynamic[$CellContext`n$$], {1, 5}]},
     {
      DynamicBox[ToBoxes[
        Plot3D[
         Sin[$CellContext`n$$ $CellContext`x $CellContext`y], {$CellContext`x,
           0, 3}, {$CellContext`y, 0, 3}], StandardForm],
       ImageSizeCache->{225., {85., 93.}},
       SynchronousUpdating->Automatic]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.473439187189316*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Control Objects", "Subsection",
 CellChangeTimes->{{3.4734121538448496`*^9, 3.473412155716853*^9}}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Control Objects\n",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/ControlObjects"],
 ButtonBox["Generalized Input",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/GeneralizedInput"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.4734121583844576`*^9, 3.4734122021581345`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " offers a wide range  control objects, all specified in convenient symbolic \
form."
}], "Text",
 CellChangeTimes->{{3.4734122854154806`*^9, 3.4734123804352474`*^9}}],

Cell[CellGroupData[{

Cell["Slider", "Subsubsection",
 CellChangeTimes->{{3.4734126344420953`*^9, 3.473412635128496*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Slider",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Slider"], "[", 
   RowBox[{
    StyleBox["x", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["x", "TI"], 
       StyleBox["min", "TI"]], ",", 
      SubscriptBox[
       StyleBox["x", "TI"], 
       StyleBox["max", "TI"]]}], "}"}]}], "]"}]], "InlineFormula"],
 " represents a slider with range ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x", "TI"], 
   StyleBox["min", "TI"]]], "InlineFormula"],
 " to ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x", "TI"], 
   StyleBox["max", "TI"]]], "InlineFormula"],
 ". Specifying ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Slider",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Slider"], "[", 
   StyleBox["x", "TI"], "]"}]], "InlineFormula"],
 " ",
 "represents a slider with setting ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " in the range 0 to 1. "
}], "Text",
 CellChangeTimes->{{3.4734123985936794`*^9, 3.473412416580511*^9}}],

Cell[TextData[{
 "A slider set at ",
 Cell[BoxData[
  FormBox["0.8`", TraditionalForm]], "InlineMath"],
 " in the default range ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]], "InlineMath"],
 " to ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]], "InlineMath"],
 ":"
}], "Text",
 CellID->258827707],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Slider", "[", "0.8", "]"}]], "Input"],

Cell[BoxData[
 SliderBox[0.8]], "Output",
 CellChangeTimes->{3.4734391872361155`*^9}]
}, Open  ]],

Cell["A slider with its value updated dynamically:", "Text",
 CellChangeTimes->{3.47341245550058*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SliderBox[Dynamic[$CellContext`x]], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391872517157`*^9}]
}, Open  ]],

Cell[TextData[{
 "A slider with integer values in the range ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]], "InlineMath"],
 " to ",
 Cell[BoxData[
  FormBox["100", TraditionalForm]], "InlineMath"],
 ":"
}], "Text",
 CellChangeTimes->{3.4734124676374016`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "n", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "100", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "n", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SliderBox[Dynamic[$CellContext`n], {0, 100, 1}], ",", 
   DynamicBox[ToBoxes[$CellContext`n, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439187267316*^9}]
}, Open  ]],

Cell[TextData[{
 "Example: ",
 "Selecting the ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Null]", "th"], TraditionalForm]]],
 " prime:"
}], "Text",
 CellChangeTimes->{{3.4734125044702663`*^9, 3.4734125128866816`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "1000"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Slider", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "n", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         SuperscriptBox["10", "5"], ",", "1"}], "}"}]}], "]"}], ",", 
     RowBox[{
      SubscriptBox["p", 
       RowBox[{"Dynamic", "[", "n", "]"}]], "\[LongRightArrow]", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"Prime", "[", "n", "]"}], "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.473412516069087*^9}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`n$$ = 1000}, 
  RowBox[{"{", 
   RowBox[{
    SliderBox[Dynamic[$CellContext`n$$], {1, 100000, 1}], ",", 
    RowBox[{
     SubscriptBox[
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], 
      DynamicBox[ToBoxes[$CellContext`n$$, StandardForm],
       ImageSizeCache->{28., {0., 7.}}]], "\[LongRightArrow]", 
     DynamicBox[ToBoxes[
       Prime[$CellContext`n$$], StandardForm],
      ImageSizeCache->{36., {0., 9.}}]}]}], "}"}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391872829156`*^9}]
}, Open  ]],

Cell["Example: A color selector:", "Text",
 CellChangeTimes->{{3.4734125215758967`*^9, 3.4734125230110993`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"red", "=", "0"}], ",", 
     RowBox[{"green", "=", "0"}], ",", 
     RowBox[{"blue", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Grid", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Graphics", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Red", ",", 
               RowBox[{"Rectangle", "[", "]"}]}], "}"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "30"}]}], "]"}], ",", 
           RowBox[{"Slider", "[", 
            RowBox[{"Dynamic", "[", "red", "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Graphics", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Green", ",", 
               RowBox[{"Rectangle", "[", "]"}]}], "}"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "30"}]}], "]"}], ",", 
           RowBox[{"Slider", "[", 
            RowBox[{"Dynamic", "[", "green", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Graphics", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Blue", ",", 
               RowBox[{"Rectangle", "[", "]"}]}], "}"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "30"}]}], "]"}], ",", 
           RowBox[{"Slider", "[", 
            RowBox[{"Dynamic", "[", "blue", "]"}], "]"}]}], "}"}]}], "}"}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"RGBColor", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "red", "]"}], ",", 
            RowBox[{"Dynamic", "[", "green", "]"}], ",", 
            RowBox[{"Dynamic", "[", "blue", "]"}]}], "]"}], ",", 
          RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}], "]"}]}], "}"}], "]"}]}],
   "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`red$$ = 0, $CellContext`green$$ = 
  0, $CellContext`blue$$ = 0}, 
  TagBox[GridBox[{
     {
      TagBox[GridBox[{
         {
          GraphicsBox[
           {RGBColor[1, 0, 0], RectangleBox[{0, 0}]},
           ImageSize->30], 
          SliderBox[Dynamic[$CellContext`red$$]]},
         {
          GraphicsBox[
           {RGBColor[0, 1, 0], RectangleBox[{0, 0}]},
           ImageSize->30], 
          SliderBox[Dynamic[$CellContext`green$$]]},
         {
          GraphicsBox[
           {RGBColor[0, 0, 1], RectangleBox[{0, 0}]},
           ImageSize->30], 
          SliderBox[Dynamic[$CellContext`blue$$]]}
        },
        AutoDelete->False,
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]},
     {
      DynamicBox[ToBoxes[
        Graphics[{
          RGBColor[
           Dynamic[$CellContext`red$$], 
           Dynamic[$CellContext`green$$], 
           Dynamic[$CellContext`blue$$]], 
          Disk[]}], StandardForm],
       ImageSizeCache->{225., {109., 116.}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391872985153`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["VerticalSlider",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/VerticalSlider"]]],
 " represents a vertical slider. Example from the Documentation:"
}], "Text",
 CellChangeTimes->{{3.473412570684783*^9, 3.4734125828060045`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "=", "0"}], "}"}], ",", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VerticalSlider", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "x", "]"}], ",", 
        RowBox[{"Appearance", "\[Rule]", "\"\<RightArrow\>\""}]}], "]"}], ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Hue", "[", "i", "]"}], ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "i"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.1", ",", 
                RowBox[{"i", "+", "0.01"}]}], "}"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "0", ",", "1", ",", "0.01"}], "}"}]}], "]"}], 
        ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"30", ",", "200"}], "}"}]}]}], "]"}], ",", 
      RowBox[{"VerticalSlider", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "x", "]"}], ",", 
        RowBox[{"Appearance", "\[Rule]", "\"\<LeftArrow\>\""}]}], "]"}], ",", 
      "\"\<   \>\"", ",", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Hue", "[", "x", "]"}], ",", 
          RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}]}]}], "}"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`x$$ = 0}, 
  TemplateBox[{SliderBox[
     Dynamic[$CellContext`x$$], Appearance -> "RightArrow"],GraphicsBox[{{
       Hue[0.], 
       RectangleBox[{0, 0.}, {0.1, 0.01}]}, {
       Hue[0.01], 
       RectangleBox[{0, 0.01}, {0.1, 0.02}]}, {
       Hue[0.02], 
       RectangleBox[{0, 0.02}, {0.1, 0.03}]}, {
       Hue[0.03], 
       RectangleBox[{0, 0.03}, {0.1, 0.04}]}, {
       Hue[0.04], 
       RectangleBox[{0, 0.04}, {0.1, 0.05}]}, {
       Hue[0.05], 
       RectangleBox[{0, 0.05}, {0.1, 0.060000000000000005`}]}, {
       Hue[0.06], 
       RectangleBox[{0, 0.06}, {0.1, 0.06999999999999999}]}, {
       Hue[0.07], 
       RectangleBox[{0, 0.07}, {0.1, 0.08}]}, {
       Hue[0.08], 
       RectangleBox[{0, 0.08}, {0.1, 0.09}]}, {
       Hue[0.09], 
       RectangleBox[{0, 0.09}, {0.1, 0.09999999999999999}]}, {
       Hue[0.1], 
       RectangleBox[{0, 0.1}, {0.1, 0.11}]}, {
       Hue[0.11], 
       RectangleBox[{0, 0.11}, {0.1, 0.12}]}, {
       Hue[0.12], 
       RectangleBox[{0, 0.12}, {0.1, 0.13}]}, {
       Hue[0.13], 
       RectangleBox[{0, 0.13}, {0.1, 0.14}]}, {
       Hue[0.14], 
       RectangleBox[{0, 0.14}, {0.1, 0.15000000000000002`}]}, {
       Hue[0.15], 
       RectangleBox[{0, 0.15}, {0.1, 0.16}]}, {
       Hue[0.16], 
       RectangleBox[{0, 0.16}, {0.1, 0.17}]}, {
       Hue[0.17], 
       RectangleBox[{0, 0.17}, {0.1, 0.18000000000000002`}]}, {
       Hue[0.18], 
       RectangleBox[{0, 0.18}, {0.1, 0.19}]}, {
       Hue[0.19], 
       RectangleBox[{0, 0.19}, {0.1, 0.2}]}, {
       Hue[0.2], 
       RectangleBox[{0, 0.2}, {0.1, 0.21000000000000002`}]}, {
       Hue[0.21], 
       RectangleBox[{0, 0.21}, {0.1, 0.22}]}, {
       Hue[0.22], 
       RectangleBox[{0, 0.22}, {0.1, 0.23}]}, {
       Hue[0.23], 
       RectangleBox[{0, 0.23}, {0.1, 0.24000000000000002`}]}, {
       Hue[0.24], 
       RectangleBox[{0, 0.24}, {0.1, 0.25}]}, {
       Hue[0.25], 
       RectangleBox[{0, 0.25}, {0.1, 0.26}]}, {
       Hue[0.26], 
       RectangleBox[{0, 0.26}, {0.1, 0.27}]}, {
       Hue[0.27], 
       RectangleBox[{0, 0.27}, {0.1, 0.28}]}, {
       Hue[0.28], 
       RectangleBox[{0, 0.28}, {0.1, 0.29000000000000004`}]}, {
       Hue[0.29], 
       RectangleBox[{0, 0.29}, {0.1, 0.3}]}, {
       Hue[0.3], 
       RectangleBox[{0, 0.3}, {0.1, 0.31}]}, {
       Hue[0.31], 
       RectangleBox[{0, 0.31}, {0.1, 0.32}]}, {
       Hue[0.32], 
       RectangleBox[{0, 0.32}, {0.1, 0.33}]}, {
       Hue[0.33], 
       RectangleBox[{0, 0.33}, {0.1, 0.34}]}, {
       Hue[0.34], 
       RectangleBox[{0, 0.34}, {0.1, 0.35000000000000003`}]}, {
       Hue[0.35000000000000003`], 
       RectangleBox[{0, 0.35000000000000003`}, {0.1, 0.36000000000000004`}]}, {
       Hue[0.36], 
       RectangleBox[{0, 0.36}, {0.1, 0.37}]}, {
       Hue[0.37], 
       RectangleBox[{0, 0.37}, {0.1, 0.38}]}, {
       Hue[0.38], 
       RectangleBox[{0, 0.38}, {0.1, 0.39}]}, {
       Hue[0.39], 
       RectangleBox[{0, 0.39}, {0.1, 0.4}]}, {
       Hue[0.4], 
       RectangleBox[{0, 0.4}, {0.1, 0.41000000000000003`}]}, {
       Hue[0.41000000000000003`], 
       RectangleBox[{0, 0.41000000000000003`}, {0.1, 0.42000000000000004`}]}, {
       Hue[0.42], 
       RectangleBox[{0, 0.42}, {0.1, 0.43}]}, {
       Hue[0.43], 
       RectangleBox[{0, 0.43}, {0.1, 0.44}]}, {
       Hue[0.44], 
       RectangleBox[{0, 0.44}, {0.1, 0.45}]}, {
       Hue[0.45], 
       RectangleBox[{0, 0.45}, {0.1, 0.46}]}, {
       Hue[0.46], 
       RectangleBox[{0, 0.46}, {0.1, 0.47000000000000003`}]}, {
       Hue[0.47000000000000003`], 
       RectangleBox[{0, 0.47000000000000003`}, {0.1, 0.48000000000000004`}]}, {
       Hue[0.48], 
       RectangleBox[{0, 0.48}, {0.1, 0.49}]}, {
       Hue[0.49], 
       RectangleBox[{0, 0.49}, {0.1, 0.5}]}, {
       Hue[0.5], 
       RectangleBox[{0, 0.5}, {0.1, 0.51}]}, {
       Hue[0.51], 
       RectangleBox[{0, 0.51}, {0.1, 0.52}]}, {
       Hue[0.52], 
       RectangleBox[{0, 0.52}, {0.1, 0.53}]}, {
       Hue[0.53], 
       RectangleBox[{0, 0.53}, {0.1, 0.54}]}, {
       Hue[0.54], 
       RectangleBox[{0, 0.54}, {0.1, 0.55}]}, {
       Hue[0.55], 
       RectangleBox[{0, 0.55}, {0.1, 0.56}]}, {
       Hue[0.56], 
       RectangleBox[{0, 0.56}, {0.1, 0.5700000000000001}]}, {
       Hue[0.5700000000000001], 
       RectangleBox[{0, 0.5700000000000001}, {0.1, 0.5800000000000001}]}, {
       Hue[0.58], 
       RectangleBox[{0, 0.58}, {0.1, 0.59}]}, {
       Hue[0.59], 
       RectangleBox[{0, 0.59}, {0.1, 0.6}]}, {
       Hue[0.6], 
       RectangleBox[{0, 0.6}, {0.1, 0.61}]}, {
       Hue[0.61], 
       RectangleBox[{0, 0.61}, {0.1, 0.62}]}, {
       Hue[0.62], 
       RectangleBox[{0, 0.62}, {0.1, 0.63}]}, {
       Hue[0.63], 
       RectangleBox[{0, 0.63}, {0.1, 0.64}]}, {
       Hue[0.64], 
       RectangleBox[{0, 0.64}, {0.1, 0.65}]}, {
       Hue[0.65], 
       RectangleBox[{0, 0.65}, {0.1, 0.66}]}, {
       Hue[0.66], 
       RectangleBox[{0, 0.66}, {0.1, 0.67}]}, {
       Hue[0.67], 
       RectangleBox[{0, 0.67}, {0.1, 0.68}]}, {
       Hue[0.68], 
       RectangleBox[{0, 0.68}, {0.1, 0.6900000000000001}]}, {
       Hue[0.6900000000000001], 
       RectangleBox[{0, 0.6900000000000001}, {0.1, 0.7000000000000001}]}, {
       Hue[0.7000000000000001], 
       RectangleBox[{0, 0.7000000000000001}, {0.1, 0.7100000000000001}]}, {
       Hue[0.71], 
       RectangleBox[{0, 0.71}, {0.1, 0.72}]}, {
       Hue[0.72], 
       RectangleBox[{0, 0.72}, {0.1, 0.73}]}, {
       Hue[0.73], 
       RectangleBox[{0, 0.73}, {0.1, 0.74}]}, {
       Hue[0.74], 
       RectangleBox[{0, 0.74}, {0.1, 0.75}]}, {
       Hue[0.75], 
       RectangleBox[{0, 0.75}, {0.1, 0.76}]}, {
       Hue[0.76], 
       RectangleBox[{0, 0.76}, {0.1, 0.77}]}, {
       Hue[0.77], 
       RectangleBox[{0, 0.77}, {0.1, 0.78}]}, {
       Hue[0.78], 
       RectangleBox[{0, 0.78}, {0.1, 0.79}]}, {
       Hue[0.79], 
       RectangleBox[{0, 0.79}, {0.1, 0.8}]}, {
       Hue[0.8], 
       RectangleBox[{0, 0.8}, {0.1, 0.81}]}, {
       Hue[0.81], 
       RectangleBox[{0, 0.81}, {0.1, 0.8200000000000001}]}, {
       Hue[0.8200000000000001], 
       RectangleBox[{0, 0.8200000000000001}, {0.1, 0.8300000000000001}]}, {
       Hue[0.8300000000000001], 
       RectangleBox[{0, 0.8300000000000001}, {0.1, 0.8400000000000001}]}, {
       Hue[0.84], 
       RectangleBox[{0, 0.84}, {0.1, 0.85}]}, {
       Hue[0.85], 
       RectangleBox[{0, 0.85}, {0.1, 0.86}]}, {
       Hue[0.86], 
       RectangleBox[{0, 0.86}, {0.1, 0.87}]}, {
       Hue[0.87], 
       RectangleBox[{0, 0.87}, {0.1, 0.88}]}, {
       Hue[0.88], 
       RectangleBox[{0, 0.88}, {0.1, 0.89}]}, {
       Hue[0.89], 
       RectangleBox[{0, 0.89}, {0.1, 0.9}]}, {
       Hue[0.9], 
       RectangleBox[{0, 0.9}, {0.1, 0.91}]}, {
       Hue[0.91], 
       RectangleBox[{0, 0.91}, {0.1, 0.92}]}, {
       Hue[0.92], 
       RectangleBox[{0, 0.92}, {0.1, 0.93}]}, {
       Hue[0.93], 
       RectangleBox[{0, 0.93}, {0.1, 0.9400000000000001}]}, {
       Hue[0.9400000000000001], 
       RectangleBox[{0, 0.9400000000000001}, {0.1, 0.9500000000000001}]}, {
       Hue[0.9500000000000001], 
       RectangleBox[{0, 0.9500000000000001}, {0.1, 0.9600000000000001}]}, {
       Hue[0.96], 
       RectangleBox[{0, 0.96}, {0.1, 0.97}]}, {
       Hue[0.97], 
       RectangleBox[{0, 0.97}, {0.1, 0.98}]}, {
       Hue[0.98], 
       RectangleBox[{0, 0.98}, {0.1, 0.99}]}, {
       Hue[0.99], 
       RectangleBox[{0, 0.99}, {0.1, 1.}]}, {
       Hue[1.], 
       RectangleBox[{0, 1.}, {0.1, 1.01}]}}, ImageSize -> {30, 200}],SliderBox[
     Dynamic[$CellContext`x$$], Appearance -> "LeftArrow"],"\"   \"",
    DynamicBox[
     ToBoxes[
      Graphics[{
        Hue[$CellContext`x$$], 
        Disk[]}], StandardForm], ImageSizeCache -> {113., {52., 60.}}]},
   "Row",
   DisplayFunction->(
    RowBox[{#, "\[InvisibleSpace]", #2, "\[InvisibleSpace]", #3, 
      "\[InvisibleSpace]", #4, "\[InvisibleSpace]", #5}]& ),
   InterpretationFunction->(RowBox[{"Row", "[", 
      RowBox[{"{", 
        RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], "]"}]& )],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.473439187454516*^9}]
}, Open  ]],

Cell[TextData[{
 "You can also use a similar control object to give 2 dimensional values: ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Slider2D",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Slider2D"], "[", 
   RowBox[{"{", 
    RowBox[{
     StyleBox["x", "TI"], ",", 
     StyleBox["y", "TI"]}], "}"}], "]"}]], "InlineFormula"],
 " represents a 2D slider with settings ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 " in the range 0 to 1. "
}], "Text",
 CellChangeTimes->{{3.4734126450969143`*^9, 3.4734126946894007`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Slider2D", "[", 
  RowBox[{"{", 
   RowBox[{".7", ",", ".3"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 Slider2DBox[{0.7, 0.3}]], "Output",
 CellChangeTimes->{3.473439187485716*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider2D", "[", 
    RowBox[{"Dynamic", "[", "r", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "r", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   Slider2DBox[Dynamic[$CellContext`r]], ",", 
   DynamicBox[ToBoxes[$CellContext`r, StandardForm],
    ImageSizeCache->{68., {3., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439187501316*^9}]
}, Open  ]],

Cell["Define a range:", "Text",
 CellChangeTimes->{3.473412724891054*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider2D", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "4"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1"}], "}"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   Slider2DBox[Dynamic[$CellContext`x], {{-4, -1}, {4, 1}}], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391875169163`*^9}]
}, Open  ]],

Cell["Define a range and step size:", "Text",
 CellChangeTimes->{3.4734127330966682`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Slider2D", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "y", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "4"}], ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "0.25"}], "}"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "y", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   Slider2DBox[Dynamic[$CellContext`y], {{-4, -1}, {4, 1}, {2, 0.25}}], ",", 
   DynamicBox[ToBoxes[$CellContext`y, StandardForm],
    ImageSizeCache->{79., {3., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391875325165`*^9}]
}, Open  ]],

Cell["Example: A simple camera controller: ", "Text",
 CellChangeTimes->{{3.4734127468558927`*^9, 3.4734127509586997`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Pi]"}], ",", "0"}], "}"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Slider2D", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "p", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "Pi"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "Pi"}], "}"}]}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot3D", "[", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Cos", "[", "u", "]"}], " ", 
           RowBox[{"Cos", "[", "v", "]"}]}], ",", 
          RowBox[{
           RowBox[{"Sin", "[", "u", "]"}], " ", 
           RowBox[{"Cos", "[", "v", "]"}]}], ",", 
          RowBox[{"Sin", "[", "v", "]"}]}], "}"}], "3"], ",", " ", 
       RowBox[{"{", 
        RowBox[{"u", ",", "0", ",", 
         RowBox[{"2", "Pi"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", 
         RowBox[{
          RowBox[{"-", "Pi"}], "/", "2"}], ",", 
         RowBox[{"Pi", "/", "2"}]}], "}"}], ",", 
       RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
       RowBox[{"Ticks", "\[Rule]", "None"}], ",", 
       RowBox[{"SphericalRegion", "\[Rule]", "True"}], ",", 
       RowBox[{"ViewPoint", "\[Rule]", 
        RowBox[{"Dynamic", "[", 
         RowBox[{"4", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Cos", "[", 
              RowBox[{"p", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{"p", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"Sin", "[", 
              RowBox[{"p", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{"p", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
            RowBox[{"Cos", "[", 
             RowBox[{"p", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
      "]"}]}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`p$$ = {2 Pi, 0}}, 
  RowBox[{"{", 
   RowBox[{
    Slider2DBox[Dynamic[
      BoxForm`RemapVariable[$CellContext`p$$, {{2 Pi, 0}, {0, Pi}}], 
      BoxForm`RemapValue[#, $CellContext`p$$, {{2 Pi, 0}, {0, Pi}}]& ], {{0, 
     0}, {1, 1}}], ",", 
    Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
R9ny727beqj0u9q1b5iadYHNXFW7cozKHomP5DiTuJPQs4TrQVyvPR/Xho+L
eJavV0+VnYiDmJctnxfiqcIP1twPiNcWftvI/YZ4/q6A2KQvdyAj3LhOaJ4b
1Ox46kVEdCZ73c+ueGf0XzAjxyb9Y8EJxHc3zD5lGxgBhcEtNi/b/DfiBtuP
/Hns0VFNyFCrF5HRmYjbVv3SYmxgBKvg1vieh0o+e/8b78jov9iA4ILp/6j0
T50XX+3ClzuMzclN9FPZI/E4jjOJvxR6enM9iE8R45bl4yJu4rcpXmUn4lPF
vIr4vBD/W/ghhPsB8VfCbwu36/yGeJ1fqyK7l3oKXxs5m4Y7e8KVfv0mnVXW
7bTziC6dA9Ih48DRghEZFxEPn5bn1HzaPjhe9NGy4qwsxL1ffcxyPH0f9DrP
33DGMBWChh16MFTZTx4GG+6NME3SFN2eE6isH8o/PeNYxiMkAcrsXurY+VAu
yhf8dbZCm2n7WOqhrCr6Kv2VzP7yMQlIZ13Nez8YprLHxK2dhWdIAosf4bTe
WKXH787IYmVerLflz+1bVfNa7msVP/n0fTZm/dLdJ1V2SvkWXJ5J+epiXBM+
LuJFws4r3E7EfYR+O66fSf3tJt59qPIDyvcQ9u/n9qP8BOHny9zPKB8t1uUb
XxfEzwh/Vuf+RD3VxfqubKxbX5SfLNbLjK8XyhdMnPnP5oJXsNZh7sbr31aj
f5ya2jfS+tf8zZa7K5RxJD6izPIN9+u9g26+Dz09W62D99sXjjNU8vSLpG9d
Tij+hTuFQU7KOFJ+/pCv+zvpPYbRDxZ6Dl5wA+XXpFVIOuh2WZMyJswi/dVr
lB+8dubZQ77H4btTtdNfP79AeY+d855c/baadXRMMN2i2CvlS4/5YHhamc9b
s8jkSapx31y7t+Ko73F29H7vxC8qPafGfVuo/Hs2bOz8rpdV8z2RtfOKsd5j
Vv5Rm8YDVXZKeXMuj35bPtOryYN671jZje5vF6r80GP57H+06+pU8VLkMmWd
/y1f4KeTZ1K+vLD/Obcf5c8Je75n6exB+WHeEckqv6H8BzHfI3y+KH/Sb6Hf
RWWeG20tj2nnIeXPiPWayNcL8brC/5Wn6PyPel6KOMnlcYLyw8T6+vP1RfmB
Ik528ThBnIgfSCjdO1vLo2/VMcwxMSqykPJE/ECD0n7ZJkapGp+K/N9JeSJ+
YFy/9l3dFTuqdl9xWzu+lCf0ABE/QMQJNKmi+/dsdZMerWbUKtdN6ifiBIh4
AGLdYUPQ0+cqO9GfxLrDq/GXd81TxgsJ9Z6pHUfKE3qAWHcg1hfXq3XB66fK
emn+n3UH4pyh1h2I/AKDJvB5bePzQn8S+YVadyDyCBD5glpfIM4TIM4NIPIF
BAg7K3E70W9EvqDWF4i8AMT5T60jEPsdiLwAxPkPBK8A4vwHgm8Acf4Dcf4D
wSvAXJzPrvx8RnmCb0DZ8fycdcr3jH5brUw3KU+c80Cc50DwCiDOcyD4BhDn
ORDnORC8AmzEOrrzdUR5gm8AwRuh4tpRCyso/h28t+WEdso4En+7bvXNoYof
vzcu3d5U0Yfr+N/8UPFzwosgha+0nv0yTTuOxNvmf3k2XLHj23C/B51Vegi+
BwSvg/KZM/Zq/birrO3xllq//kv/R64fcYK/Qe/0YdZ+yniWFifb91DGkfh1
Md9aTXTzRZzgY0DUNUDUNUDUNUDUNUDUNUDUNUDUNUDUNUDUNUDUNUDUNUDU
NUDUNUDUNUDU3UDU3UDU3UDU3UDU3UDU3UDU3UDU3UDU3UDU3UDU3UDU3UDU
3UDU3UD0hYDoCwHRFwKiLwREXwiIvhAQfSEg+kJA9IWA6AsB0RcCoi8ERF8I
iL4QEH1gqm8MRH8YiD4wEH1jIPrAQPSNgegDA9E3BqIPDETfGIg+MBB9YyD6
wED0jYHoAwPRNwaiDwxE3xiIPjAQfWMg+sBA9I2B6AMD0TcGog8MRN8YiD4w
EH1jsE+70ES7P/2aLfu1VdkHss9p0efy4QHK/mxQ43qSss8QL5z5fVoZZX+G
13m3QtmXiI/9fmJhFWU/VH98rZUaP5E9Zv8gZf+kW5isCVfp0WwcOEC730Zl
HQzeqBp3gT3fnw2PLvSscvG0mcSThPwALo/92FNCfxrXj3i4sKcqtwfxtcL+
Hdx+xBuL+Rrx+SLeS/jnIfcP4g0nNuygzRO+FbLHGCvnsexnBo++uK67kiey
Zz55rZz3iLvH3ri6Q8kTAVPNhij5AXGrchOG71HO5SDLxu+uqvBv+xuH9VTO
8dNfvkXuUump0ve2o/bcHzCr29n/qcbNPsjzxApTv9b/e3LfTOLVhXxPLo99
12Kh/xjXj/iWkvYgXl7YH8ztR3yxmO8HPl/Eywn/POb++d1Pvt/AS8tXBieu
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
rVPeLje+xFwerWrkZ5+L9hPyQMjje1TJX+W4jk3aWGi/37G9YcyOI6p1vOd2
Yrfy71mHRuuClhlfwnEJeSDkIUi8i74j6gT8vUBeA9M9+/KZ9/BHASeDynaT
/pHfzZB6pbyTGDeAj4t59kf8o67a+urdmQZ2lZS6U9pJyAMhD+XF7028xO83
5LiWws/TuJ9x3MgRxT3s1mYyzdIoC1vlbzkuIQ+EPL6vlv0dOe4mwVtmiT6a
xN/t4nW9Aa/rsc/w51vOl1w4X0L56SLON/E4R/vzTu7v6aGs0/HSb4w2Kusm
7SfkgZCH4GfJemeUdbU4PrjRN2Wd5bh5Yr+78/2O4xoPHRq0QYlLu6q9B65Q
4hTvif5bHgh5GGV4wuuLEsdt2/Q2OK/EtRx3lOClxZyXIr7fhfOqhHoZQ7ZM
LtdN6gkVvPcPznuRFyW39rqrzfPPJsyvcKGqXjeJlxV8vj7n88iLcs7zOqI6
ryPwvoCoUyDyRdQubT7vnH1uj9O172YSby7qoBReB2HdTeRfGG1ifyUpdCv0
6+Tw7aR1Jt6zDw/4Uhx7YiFsTPlrhX7oPcSJ/AsWhaW8UkK3Ms/c4sFqPR7h
Eeb7Tyxk8yfp/ayg0kPkXyDyL7Rn/Vpp7+8/nHV93Lpmf7zHbyNwA40OR/21
qx0zNFd4x/kFJ1rVu/HeDOf13/kXJgn7Pbj9qP/PkvYjTuRf0BP+HMb9ifI/
/Lk//bk/ESf4GBB8DAIzi0dp3xP0sms5usZtE3xXIPFxHMf3CX7vR/QNU/L8
sGaz8qvvzjaTOME/geCfYDFtz3Bt/f/xe9PIh5G1sQ/QTeD1f+hw7DMcN2nw
OVbJ84frfF/saXnJTOLEuzUgeDgQPBzM0j+11t43NN/UYNqQAw8T5b2DxEdx
vI/Ev695t36Acs4tCcyMXpHpZ4b3FP/9Do26B2HEfQcj+i2M6J+w8Lo/ymrl
Hk7ukPzmtz9Zv/qVDLTvSx5/ihzS5Pf6soTQXznP9B/A9GU/0rr+jn9GnAOY
Z5/Y1M7fdmsU9u29r194rH3fU3bE93WvVf0N4t4BiPsFIO5ZgLg3odaFEevI
iPViEcJvvybp/IZ+HiT81oz7Dd/1HRN+C/fQ+Q3f4/kKP2iG6fyA/Z8Z5Y4e
SKqey8Kcpu72ezMMfw9LnPOMOM8Z0W9nRB5hBC8For8BBD8E4h4ECL4ERP8B
CJ4AxL0GEPcUQNQXQNQXQNQXQNQXQNQXQKwvEHUiEHUiEPUUEPUUEPsLiDgE
Yl8DEc9AnA9A7Asgzhnq3GbEOc+I85wReYcReYoR+YgRPIQRPIQRfIMRfIMR
PIERvIIR/IERPIERPIERfIARfIARPJB5x/Vuen3cM/bJ9Fncr3WNWc8xR80P
XU1iBN9jtW34d+6+H/NOOuj22QK/v5r6OE373jQ8fGfEOlXf2H3f8bnacy25
V9S84N/9PbbqLOx6l5IHteq3r/w5Pgbr0ParTp97qZw7A1yHVRmvnBMSJ3gv
I/qH7Om2avO192EfTzQKfa/S//NdN2vtuTOw0uQjNir9z4T8ay7P/i3fmcsj
Lv2QtarWRcUPGvxeq/DDwu06P+C5PU/4oW1vnR8QXyL8YMX9gPpbCD8kcD8g
3k/UHa153fG7z/zfOEwT9cjX1rp6BOvWmqd43bSH102oh8DhnKinOvJ6CvVs
F/VjIq8fUQ+Bw1JRV9YW92dST7Gof7/y+hf1EDh+z9BP/L5a6nko6v1WvN7H
Oo7AIVT0Aa6LfCz1dBD9imm8X4F6CBxyRR/DRrzPkHo8RN/GifdtUA+Bw0jR
z7nA+zmop6voRx3k/SjUQ+CwQPSpNvA+Feoh9h0Q+w6I/Q7EfgdivwOxH4HY
j0DsRyD2IxD3SkDsLyD2FxD7Goh9DcS+BqL/DET/GYh+LxD9YSD6wED0e4Ho
9wLRbweiPw9EHx6I+wIg7heAuEcA4r4DiPsRIO5BwEXw1TZWpwIs11TC7271
WF1sbfH6IsuMfTQ++HgH/K6UY+LIsxW7ZrLkaj1+pvXri99N8rWc2WSscyhs
vvAt+4l9Nn7Px0Xw+RTO5xG/4GSU7Ogcytb7P5ysyCPPJ/QDYQ9lP4wTvPq0
YWbUyXVJ+P+XcR31zUx7Hzze9tPWYk0Y5utnb2OCtfk7RlO7+QMl/0ucsB+c
hR4Xrgf5rdSTyPUgLvmDUxcdfwDJHzZ/7nslf0AgO5zRt2KdKkPwvdy+D2k/
k5oHsydH+1plxhkh7jmlecOtjqfZMzMH+/vH5uN9U7FXyA/P+2dZHf0bO7fP
G434uftLa165d5OlLy8acu7OWrwnmls15XLxplssaMT4druPz0I8NSXJMi3v
ODxt2qJgmEEG3qdoGj0+F3V4D7S9e3Bx7en3f//uyejxGu3+8T00+aKdso8l
ntx4m792/+x9Fn97lLKPJX7SKsTkplIHB7UulTzUIAPvQWYFFj+LO7yHNUjx
cDKYfh/xm4Vd2+t/OQyTql4p6tnwb+Tt4Gy/dYxDDOSO3lPDz/U24lcqto/R
8rxLeftjkxXeJ3G7kOm9tTyv74TU8D0K75O4deOxe6p8Ocy2NuxoqOhH/r+w
5jbNeIcY5h3o33uD623EnTOXmfs8TGZ33Uobe4StwLrA0TfKJrv4MjPRM16y
fuUUxIcY7kip1/xP1vnigwjXjU5YFxhO3nc2K3Q/W1v21P2XFgMQ1x/zot7g
zvPZt1Jba94yaYPvP3039bRJy1zAGlraHljdpjLi57eerKn9ndKG7gWrV6nq
uPLlDedr68/OfbyTYxzs8LsuQVuWTrw0MBja/3ksY/ORy9jv0vtl53dGiY/6
A+y2KfGC55ux+P/cuRvnPNZ+v0XKzzOKqcTurGW2s7cHXVbiS8rbdXjwM0qJ
p7zreh+V+EI9lQwf2uw/PovZDd0cro07iXfOLRO8WPGjR9FLP8Wv6LfAgaVS
PcNWsIOHKz/3Vvwt8Qy/+237PfWBDu2reZ02TEX7b4rvSAT43Dt8yjAV7fw/
FBBQsQ==
      "], {
       {EdgeForm[None], GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxN3QeUPUXRBfDZ92ZFQHLOOWfJknMUJAcBiSogiChmFBAliCAiQZAs2QAK
oig5K/ETBUmCIIiSRJQk8NVv+77z55ydMzU1NT39Okzful3dO9+en976wEHX
dWtO0XXDOv+hLt6t81/reKjk94113d9K/mPJg5Kfcq/kaUv+R8kPltyX/HTJ
T5Q8dcnPlfxoyVOU/GzJD5f8/pKfKfnxkj9Q8t9Lfrrk6Uv+Z8ln18unqOu5
PVPnmev8QukvKf3cdb28fNR5xjo/X/p/ljx7yS+V/P6S5yx5+pInL3mukmco
ebKS5yh5upKfK3nWkl8secqS5yl5ppKXG++6Bfuum6p059W7pqvzQnVvmjov
UOfZymbqkucvedaSpy15wZJnL3nGkhcred6SZyh5kZLnKnn6khcuec6SP1Dy
vCXPXPJMJS9e8nwlz1XyB0terOQPVh4WqzzMLo91LFX6BUt/UeVnlrpeUj7q
vHSdFyr9zCUvUfL8Jc9Z8nIlL1ryHCUvW/Ii0q9nP13yAXXMU/oV6rxE6Y8p
/UolL1XyAqVfteTlSp6v5JVLXqbkRUtes+SVSp6/5FVKXrbk5SufS1c+F1FG
daxW+uWVT6W5YF1/qK4XrvPqdV6h9IuVvFbJK5e8Qj27XD27XOmmK/sl6ryO
sqvzinVesmwWL3ntklcpeamS1yt5tZKXLnmDktcseZmSNyx5rZK/XemsX/Lq
6qLk5eveJt5d583qvG7pVyp585LXK3nVkj9S8gYlf6jkrUrekE3lbfXK2+ql
m6XSWbPO23pHnbev8yZls07JO5S8acnHl81OJW9W8or17Kr17Cp1f5fSfbSO
D5d+m7LZoHSb1vXGdd6yzluXfvbS71ny7nXsxbaOrUq/bqWxadntU9e7eaaO
LUp/VNkvWvLcJe9f523q2K7kfev8iTq2LXn7stmint2urg+qY0dH6U8q3R9L
/mnJvyybPer4Wl1vXu/6WJ13Lf2/S969jv3q+j91PrjOO+s7Je9c9ttXGjuV
/PHS71H6F0resI5d6/rndX/eOr5c8j6l+1Sd9y6bTUreuI5D6vpXdX+BOo7U
p0q3T8m7KY+St6jjC6W/pI6T6ziinj24dJ8t+ZMlX1u2v63jaO249J/xm0u/
bcl7K8OSb677u9bxnbq+rc6713GC58vmE3UcXvLvSrd3Hd8reZfSfbSOQ5V/
nfes47CSD6nz5+o4quT7y3b/Ok4r+Z46f7KOU0q+pe4fUPIZJZ9Vx3F1fKXy
MFvpLy75+3XsUPL2dXy15PPr+G4dXyubg+q5z9TvPl4fKfm8Op9TxwV1nFjH
18tmq7q/c8k7lfzZsrmo5JN8Oyq9M+t8rH5SNuvW+UNlc0jZfL6uT63rFUs+
puTfyVOdL6zz8WXzC/VUxzElr1Ft9VB5q/uXl+70Or5V+ivrfLb0S766zj+q
4zslz1P2c9fxw7r+onqu584t+Zo6fu23lc29ld4jde96763zoWXz45J/U8el
flvZfL10N5R8mm9C2fyk5MvquK6Onym30n+tbK7QDvTxsrm25N/6vSX/ss5X
1XFY2dxY5x+UzeHqtq5v8hvqfLvfUPojS7615DNL/kbJt5T8w5JXrt9xTD3z
zdIdW8fv1U/pjyvd0XV9Z10fVec71ItvS8l3KQs2Jd9T8kUlr1LpfL+e+Z7v
d+XtiDrf7Jul3ZV8v7Kr8711vrjs9yj74+v6PuVV5//z20v/U7+jjm+WfGLp
/1Dyj0u+v9L+S6V1d13/vm+/XX18v2z+pLx8u7THun6orv9QNn+r60dKPrV0
f1bfZXNmyU+oq5JPK/nhkn9R8j/K9od1/Rf1X+fH6nx16X9Q8qMl/7LkM0p+
XN8t+aySn1SfMEC966V6/jllVPqn6nxt18Z547kxbtX6vT8ou7ONp3X8re5d
X/oflfxsyTeWfEHJfy/5Jt+TSu/8un6mrv9Rx8ulu5W+5H/V+bY6Xir5lTrf
7ntV8qt1vrOO//hm1fl3yqTee3a997XSvVHHa6W7q463Sn69znfX8bZ7db7H
7633vlvXb5Z8asn/KvnfJY9VXt6q8311jJf8dp3/r2vYB8aBMbqxho+m7RpW
golgjO8PGxaCl4b17P/UZx3nlvy09t41HAQTwR6wFUw0Y9fGU+OmMcsYusZY
G7PgLPgIDoGJ4Be44uRhw06w0DnDhntgJ/gIbpqja7gIFprPd6DK5ofDhofg
ILgJVpks2GneruEvuGiBrmEYeAZmgGHmG2vYA76D+2ChKYNtYJWpg5dgj/OH
DSfBUdMFCy3eNUwFO8Eq8JJxzbh/ZeXtR8OGpWYMRoJDphw2rAP/zBJc9MGu
YSRYCPaAi5YZa3jj4WAoGGiO4CIYZs5gLThkpmAneOYDw4bDYMt5gkN8V+cL
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
j3qub2lNNWxlyA9dt2ucA55h+b75qeumXlZLGa8QG7qVU078lydKXqlvPMWG
1QY3GG9l6jfzcZSBclk75eA3r5cy+FW9/+Lk4dd1vmTQfNin5KFvz0w7bPlf
J8+sm/pZMmUg/TX7pufbbpD38pGnT3/UpzfJezdN+5wjbXWGYcsD/3fZQfOd
+dTXlHxp9D+Jr8yn3rh+30bjrRzXHzS/kq+q/jZMXfy77D84aP6586ZJc7vS
rzhoPuwKfStrfvT/Sr9h7DbK/d3LfsfSrz1o/qm62Tz1svKgyfxN6UmDn75s
8iOfm1YeNxlvdfNfPtyw+ajKZavU3Sp9q0tzIZsMmk+9h3qu51ar46f1zGqD
5kfz3zcv3WbjrW7opcPf/3Bs+NS/KfmyQfP91x00f3+n5HnL5HOtvtUZnsH3
dbukMyzdlrn2u93HFVyW8l+ja/W3Q+p65mFrM951cT17XPr/R1Jm/Pf1+vY7
cAIblbztoM1ZqFN8w+ZdK7PdUo/yvHPe+3zZv1V268FDJV8ReevYmJtwH7+A
W9g06ajrXUq/w6D5/h+uZ7cbNN5g/ZzZ/6r0vx00XkPed0r7pPvxoPEeGyYN
eZtt2Nok/QSfkbpep29t6738iPbzcunfKf1myhS/MWjzJbsNWzsjaxf7pC0N
ymYMZ+H31XnnQfNzN8lZmq+U/l99S5MtnmWvtIFPRd4yeVDXe5TNLoM2r6SN
7Ju29Grp9xy2d9Hvn/ZzWelPSFlsF722sZf6GjReYrdqg3vXsWsdcw5be8PD
aDsHJp0N+tZ/8DufqPPHck/aB6dN/pq/PGg2B+JpBm1uSd0elDawY2Rtad9h
a1tsXtOv6timrt9K/eJoPut3DRoPs/+g8SRHdK3NfDbpfKrS2WvQOJkZ6jdM
7/cMWvvCP320bK4btrZq7myfpI23mWfY2sYX63pKXFRd71jXN9b544PG79Dh
6g703r7Vt+sPlHxL7K+r46d1fKX0tw9b2zBX9YmccY/v9K0NS3NsvLUHvORv
+lYfOKtZS39HyfvWvd1Sp/T9eKsvfNGBw9YGzK99MmmY53qj7F9PGU423rgR
5TV7ybPVsZ82NWjcizKcCw+W6ynGW53invbvW93gu+4atmfopxpvdYF72i/3
D6l0Dhg0zhUfdX3JP6vjm3U9Y6Vzb9ntDjMOW3tgd2DSMEd20KBxVniqacdb
PeKyZujbOzz7m2GrY/OVM5fNTKnf3/atXr+dOpUOTu9Pwzanhwe7adjqEud2
S84HdK1uj08buK5v9XdC6u6E1PXBw1Z/uLLP5owrU+Ynpk4/FxlvdkPf6g5f
N0fJB+cdX+xbndHfVvJDw8a1ac/4tMPr2TnweMNWR38eNu4Nz3ZIbHBls9az
s/StbcxfNj+p8xFjrYzxjp8rm7uHrc5cz1Vp/kGfLbub+lY3+EO82i9SPuri
9NTdF4atLnF3yu/M2HwxOjzeo8PG9Z3StbTN2R5V8peSDg5w3nrv7H1773FJ
R73MV/rD+sbxKZezUv7a4I/zG4+LXnvA/ckrPvCGsrl80DhM5XpubBYatn5H
f2vf7PCbX+pb/b2X61R3Xx62ujT3942+nXGJ6vCC1KMyviB9Sv1emGfZkfEV
d/StLvGkJyZ97eHLfatHevV2cepXPV6aOqW/JL/31Mj6I86RzTldq/+LY6+P
nJ26uNF3bdB410WHra+Rnxw2/hPPqa+dlr75lb7VK0720GGrS3zmiJ9Vp+d3
jW/Ef54e/TdTp1fEhv7y1O/xfUvDc+r58vTl3/Wt7+F57yr5pkGbZ/152pv6
vLNvv0F+HovtqJ6vTF0vMWx1je+Vxs8jnxsb9f7VvtXlaB736rFJ9XN16muB
am/f6hvH9PCw9Svc71F9Oytv52vGJpX9NSlz8m9SF6N5d/W1VqW55njrw0sP
W13gkO+pNG8eNL5YmV2Xcvt638p9xCNfl3LTj65PeXruF0ln4Ur723175319
KyP1+kTsLyj7xfvmt7x3Tg5u36Ke/XD62C2lu3LQuOhdjB3jjb/+SJ23TLks
N2xlywbvjH/GS+Oyb4nuyL71k1vS7m9NOS9aaZzYNy77VvUzaBz19/rGZ+PG
T+rbNT756L6V++ge/hw3vltwB658hWErB+lsXbqtUhYn9K3NjbhvZ/yz9npX
ylP53J02/EzkK/WFvvUN/PizOePD8fj3pr/8MjIuXTnh1d3/edLHpbtHb+7+
x5Xmd4eNM1def0hZOfDqyu/XkfHY18QG977ysNXL/Wlbd6TtLVHvPaVvHP22
JW+T8sWj4brxajhIvPQDXePKceb4+VWHrfxx78rywZTtjV3j52/qmh29mIFf
RP/z/MY/p1x/Uu87cdjSuSH6G1Oej6Qcnhu2346Tf6BvZfpo3ven1O3Lsb85
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
jKqYUHpxoWJRn4mszT+Qsp0x+hdSj0/lWbjeXCzcLq772dj4LuFG1k7/eiH9
QiyqmFRx4eKuX0g/EnctzlUc69bDFgc7Tdfiup9P35wtz4plnSI2L6U/vpg+
qK/9K/1LH38p/Ve894vp7+K0/5X2r+1oQ+ocp44fx42L9345fVY8uXTEnH8t
+flD+tEr6afivV9J/9U3/5P2r4+/mr4p3vvf6e/4xlfTf3HSuOzH08f/m/4r
Jvw/6e/iul9L/xLX/Xr66QPJvzpaN+n7VuiXb6bf6ddvpC+LJ38j/f0PsXkn
9fJcytazb72nX7+eb8jM6fvqSF98O20en4hz/FDatbaubesf+p6+80T0U6Vf
vps++Ghs9CftVHudMv2SzWTRiwXXR7R9fUNf0Na0uZnSHrVpbfKvsZkm+dW2
5PnB5HmY9i5WWzt/Julot08nnenSj+VH33ku6fj+aXditbVPXC9sBBfhm2Eg
+IeNNqrNXhi98dfYDWMZ3y9MubG/KOksH/uph5PG92kiG9Php3XSD6Sv/Rv3
YbJVk860yc/ikdcJfpgusm+nWHzfT9ysNOEx/PA06bPWIGiH1gUsl74MM8zT
J26+azgBNto2eZs56cACODTYGHc6U+TVY8Mex+jZ7WM/U9LHH8KLcMsGSQf2
wGHhskbYY/boxQGSYQ/xb7Aj3AInwHbnBNvMEfvLko734ojo4Un5nyV5YzNX
3oVPg0HhT+nAmuLQrHmcJzL9PElH7BkbOMraRtyO+B/4Bx6Fi8Q7keFScVyw
KYwkLgh+hV3xDPIPl8JRcyc/eIeF8rtgJ/bfTPoLJU1xNTAurAWb+M76xrJZ
OM9Kc4HkjTx/fqM0F00eYCE4FV7CIcC7sC5sBh+P8BX9VcnPYtEr/yWSf/KS
scFveBau/nJsrgreWzp6aS6Xd4nN4PvBgYfGBqY6PDaw4ueTZ+/FLcDi53YN
Ey4be+kvE1lcivzAkDgEGP2MvPeDSZM/Dsefl3RWSJqw6PKxOTp65UPP9+Y7
4ASU2+V5dsXYHB+b+2O/SmSY0ThnjMMXLZ90+L58gytSF6smzZMjiwG4KjZk
cUTKH5Y2RpmzNE6dkHddmnF5xvS15/NeuNXcBP06XRtDjCWjOWVjoXEQDjXO
GeOMpcbUlzNmTtiMNRvPGoOMmeaejb/wpnF3tM5OOq8HqxrnjHEwrDHyteRh
/aTzn9jAtr4H2+Z7AmMaR42hr0aGPf+ddN4MFvDe/2ZcNX9sbIVVjanGU9jW
uDhar2d8HeFf8v9iY04dBoYzfQP/lrESDjaGvpF0zDUas+C/EdaD84x92yT/
vm2vJQ9wuvEC7rGmbt6+rbmC5eA6MszmuW3y2+9I+cMz5pfoN827vNdY+UL6
Ph/F3NF2+U7irsWyfqZrfPvO+Xb5Lu6Qb6O5Dnpx2BPzPMNJMeo75huLl8fP
iy3fPs/6Tk+sLx+2+RxpeAc+39zIbvk22mNnl6Q/T2zkwbp7NuZV+J7ybO5L
TCjO39wBrp+Mt94q6dBvlvmC/bq2P4+YYN9nfDJZvOjEPMmwzZWI3d0j8gfC
Ofs+vxK9uOsvhudXVvYR2it6a9ilI8Z7Yg5g2OJ+J+ZAhi3uGtdvjgmHLV51
9+TBXkCfiA1bcwC75RtM9h3eLzbmESbqJPUiZvST0U/Yxl4sJBwuZtV8jthg
Y4o9iMTo+s5bqy7GVUyy/YXE64rHNlfw6WGLExWTaH5BXKJ5BDZf7Nrcx4Ep
hxkzB2Hc8dwBscGfmz8wBomxxPsf1mX/n2Ebu8wtuMbBzxqbk/ItmsDWY22e
QVyo8UtsKNn8w0JJR/rmNrxXHLL5hM/lXWI6yWIzcUviKn0PJ/YLGraxwnyC
a5z6otF/o2t8Pn58xJO7nhh/x1o6+KolYkOPfxDfiO/n74shxJdL75CkiavH
lRu7nF0b4/D3ZDGES8eG3p5ON6Zt492laewzb+BdxixzDvIm1pLPIq6Ib2J/
G3Ff+En7olg7Nn++XXx436WLol+ga36H2BoYz/4t1u6JP7EXnPVx4j3O7ZsN
3+Ts2IhLsc+JtV1iIcQtWMNlLt7aN/t22WPtktiIeVg/NvYrO6NveX6wm7Tu
i721YMfEZtHoxUKcnPyIS7Hmxd5nmyVNa0jMHZtHnlhDAU/2bU+x0fofZ3O1
1lnYv8weX9bCixnDoz6VcsP3Hpx02LwQmxu6tk+OmDccr7zI0/N573HJj3Hh
+ylDa9XFno322yHjaZUfm79lPMXvGAd950/Ob/xn3oXH1l9uTJunOyV69X5q
8qMef5D0vee0vFc+z02a/MrTUtfGkzOSf+PY6cmPZ38QGz4CvbW6fCX21rSK
UTon7YosbslaTjE/1pjN27X9dsjz5PeelTIRp2QfnmmjPzvPinU6O+1K2zwn
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
vHkXP1SdrJt6sbfD9knfHpX2F/1slz0cSj6oa/uB7BSZbpfI0pZv492/YgM/
iIWe2C+0a/HmOyZ996Ulv2LKpcOWr4SLN2bR7fqe95LZ2kvEnqgHdy2/OyRN
/unE3hNd852lg4feI3p+6655rzStO5AODOMsXf618VjsOt/NfhR75l2zRTZO
Oe8V/QRn3bd1BHR7R79HZOm5r0y9U4y3/VKP6Nq4r0/hxfdOHjwrtl7sPVt7
XHwideH8ycjSE6PPVrkrB23/k9Gz2TfvJW+Zdqh94grMs+IBcEf2X8Pz2KNV
XP3nu7auwV6y1jjABPTfCmaA3Sf20Ojbnil8dvtsfDrP0h0Q+TOxGeldS09c
uj1g4QH7pdif9gtde89nYm9vjc9Fb67S3CdeeeL/AvQtj5+PzOb1pAMTyqv8
iKWUxiGxsTaAfFTam/kMfjfeA7+/V+5/PvYHRI9rws3j8XHq5o3NK58XLPfF
tNvPxeawrnHk5iCP7Jr/J178hPxe6csL3aHRm4M1Fzvi0cl8auv32dgTQIyx
Ped/0jWd5/mXi+VduPmDkzecxqEpN369vWGtST+va7GFYsXFhts/XyyyOWTz
veaA3Z/Q9W3e2dzyEZGtrfesOWLr99lYp2+P+m9E7/43I4sXFzcuxty++9bx
n9W130MexZYfEz0e334A4t49Yw2+eHXno2NjX9yjIk/Et/ctjt1eAdK5Le+S
rvdbm29/f2v2na3RP7dr8w3kc7q2tvG46MWlK6vzuzan/Z3o3Seb63b/hJSn
OW1z5GIq7R9wUuro6ORBPtXbidF77rt5Vl7pR/vrfi82yvWwlLl4cnpx5t7h
eXncL/0Rhhd37r1s900fx2GK2bYP/2+7dj4lsnXorq0999zJea89dU+Njfhs
8d7isq3z96z4bddsrk2a3sHWXLW16+K3+fLmNvjpp8Xmt7lvDfXvu+Y386WN
Qfbs/2H09rk9M7L80YsP987Tko75+Im12F1bl3127MU62pcTh+/+OdGfHdlz
+AFzOfx0fLu1x6M9830PzQXg5KUz4uHZLNA1Ttt6YLy3uQ5zMOY77H3qHeIB
zNuYvzGfY/7HPNBoDodsfufY2KyetqH81eG3k6b5HDy8d+Hw7bHATj3Yd125
wZ/ikXHf8AMOR/y9eRBxDtY84HZwPuLj+ebmfMz9mKvB87DBC+GIPIu3OSE2
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
5yQ/eyWf8rJ70mG7d+T/B9eE+kU=
          "]]]}, {}, {}, {}, {}},
      VertexNormals->CompressedData["
1:eJx1XXlcj9vzzxohW3ErO1mThGz5jLJvCdm3rCFrIaEsWbKmbNmpkDUJRR9N
2tOqRbtU2pdPZM32O0/n5Hfd13fuP1537tw57/M+85x5zzzP/dzOSzdMX1FX
SUlpeQMlpXrsz1tP00793FwIvnP1lLuG5EPEzJHnLg1ejIVKEHNI7R3Oab67
6mCKE+S6Bt7RKi7CIcPbTIwqK8Fqjx4dVo/NAcc2s6bk9j6Hfv1/eXgNLIC3
d8MXbVQuhIdoMOx9E1c8oqfR8eygAhwTpfywbr1C0DzRfVnO8Ws4r4eOVZ7S
G+w9aES6s2EZXNefcq/XHg9s87C3eb0veXB5xLYpsUrFgEMXxYU/cULrPg+G
Fv5WoJL4q7/1nT0ZRdY40yDw+0nVd2CiWNPmx5DruONBb+VuBUUYPte405nC
ErB3vN7ygEkOvp0+r23j7ufw1/bF09tWKzDo+qH3nivcMSZhuHap+Qr0MVWc
Pz2oAPKbfChSqleIuqBU2uXkNXSa1qt7ltIbeDJsePoJwzIM8Xx9JmWfB87d
rRNV90seyuufDmY4MV/W8VoCw3lN63yIQ3sfyPnU31SjWIEfVi801sxdiT+i
XTxNOlyWjfnxm/2lAB21+aGmu3YEnGhrk3/VMwO+fF9ZddC3DKqszDNHBj5B
TEgO35lVBOc37/GekpQH8XXCKtNN5PjFRX3q654K6KC71MvNKhqaf/80t9f0
W2hwo3tbZscjN+7PvsHs9VcnbdBh9tPBO/qzOLjyZr6lCYtzRy3XNIPF+XjE
bfAVzwz0sjBa5MjWNXw8NQbYuituxi5eoq9AJ7fg0HbbX8gfF5ksObUrGiuF
vzf3x1r/kyL+Kh4fb4n4gwQeD44HNQSebwL/l741+LG8muMPF/s9wfeLUWK/
DwQ/FZwfVLbm/JieHXvrX3xik6G/a/hcJnh2+8559rXdX9237rGAeuFmPioT
M2CHas6MGTPL4Leu1Vvj++EYPOy51aj5RTB4kUnrzWvz4EV47zpPR8ZglHXp
HXNlBRRHPbRrYxYNBXfH+fide4Z6Bh3WMjseVLqrqcnsX0Pbl/gz+/gJ7TON
5xdhkq9BuBQnynyruRTHo01268YTM3Dn3lFh0rqKoy9jjNi6TqGN1JPSyvCN
6ufEp/0eyBd/mTXA2SsDrwp/e+6PZcK/Nn4yj48vRfy+As9VjgebhHE8MQJ/
EMePgQJ/lNivDt8vBoj9dhH8WHF+sGU/zs+jM5xnwSd+cNf/LvGpEsV5HljN
edYyTBscUt81IP58d5sre9PBZNnhvLEHSsE38KambtNEbKg5ytplWiG8gl0L
XVxzIWt6SMgsvRT0zfDb8uh5BexqYH4tsUU0VKjJM5olhGKrLR+7MTtmOj7X
TmH29SVg1YLZrYz8Mp2nFWK/c171T7I4Sul1VGazOENOpH+8tDcdQ1pfXT6O
rft9TJ+Jfdm6dosq38paFuNZN/fTbXs/ll9tH/1WkZeHBsI/lPvjV+G/ScTX
4/HxZxqPX4vnPceDuwSeZwL/bI4fEwT+5mK/4Xy/mC72qxD8jOH8YKTgx/w0
51nwiQUXVw2R+CwN5zznfeY8zxzgUDko1y3AourIVi1FKrRrZXlrel4x1DXw
dNzdJxO97yVmPJqTD08fzXf42CAHpt2+cWT7g7eoa7sv97BmBXy9H90ta0cU
WD9M1MLoeFyTXbKO2fGUptHmt8y+8ODX+i+Yfci7B+NYHNw0S0ftE4vTxGL1
YylO/tdHvTUVqYzv/aNmsHWbPMm32cXWvaImD73R6N2f+9m123nV91VFmCf8
h3F/VBH+g0V8ax4fVUR8C4HnDseDawSeAQL/a44fFwr8T8V+H/D9oonYr73g
pyXnB9sIfsCF8yz4xIqyqho+QwM4z33LOc8ZPm4bp47xCpi5f7qhzCkZOrh0
mrVqaQEEXRlvV9b7HTbz35IlO50D2bfmNZM1yQT7dgVGvsEF2KVwtH3KpjJY
uXOHR8evkfBFt97idRPSMSdrhu/rTWWYCP03d2H2kVpzVTYyu/GhSTNZHNzr
NT9fijP75ZFVUpyq862mj3BKxk8dWrVazdb1nDChtJStm7I48PSezAyM/dDt
YGLGTXhhds+mQ2gZfhD+n7k/3hD+tfH38/g4U8TPEHjecTw4VeDpI/CP4/gx
TeBXE/tN5PvFHWK/KwU/qpwfjBb8aB7iPAs+UX/xwk0Sn12PcZ43+nGeZ7m6
9HOzDwxIsNfZ5K0UDaabujf50ioLAvvbpa5zK8WgSXmzXw1OhqUPT/d9VhoP
lhdPNq33vQwH/1INyrtYAI3PDpihcT0EqqyPXgloUoAVW05Oyr1YgA8z0yI1
mT2lwr9xILObDr59MX5wMva0un5JirO3cmcHKY6zdtcnD5Sicfz0L9u+snW9
Itrvk9a9+ivjYlPHGFwy6oRFpn6Yoeuj5vV/dWF1UfhP4v5Y6z9VxO/F46OD
iJ8n8PhzPPhW4Bkn8H87U4Mf3wn80WK/8/l+cY3Yb7bgZxDnB0MFP9tmc54F
n9ir+acaPju+jbnpyHRIekXJts7FCgir3ruuY+Y1w92rte6oumfAD8+7RxMz
y6D2eS1werZ2aKNiCEpO7TZBkQexwzp803W4Ziib//tC/jAFzK/ophdWFPXH
f5xKMwtmx8Iq9XeRzJ5Y+XX1L1+Uf7d4mDykUTFGXtiVK8X5lvhrYD8Wx+ma
38em7hnYqPDSJ2ldW/8ffu873zXk0SrRwuo+WvmMHDEhN7p+Vf5zQ5e//f/c
K59F/Fc8PrrVxPc2rMVTxfGg6uPtcb8ifQ2NBf6BHD8a31kXXO3rJM8V+w3j
+/0T/6bgp4rzg42rnJSrGM5hgs8MzucffyKfZUQ+A5HPQOQzEPkMRD4Dkc9w
WeSz+d/5DEQ+A5HPQOQzEPkMRD4Dkc9A5LOMuJ9lxP0MxP0MxP0MxP0MxP0M
xP0MqSsO7kxukIlvG3yLOjDkhNz4l5NedUgZEPczEPczEPczEPczEPczEPcz
EPezjNAbMkJvAKE3gNAbQOgNIPQGEHoD/qs3znG9AYTeAEJvAKE3gNAbQOgN
IPQGEHpDRuhnGaGfgdDPQOhnIPQzEPoZCP0Mu4R+tnLoZ9VxiFx+hetnIPQz
EPoZCP0MhH4GQj8DoZ+B0M8yoh+UEf0gEP0gEP0gEP0gEP0gEP0gHBf9YLbo
B5fwfhCIfhCIfhCIfhCIfhCIfhCIfhCIflBGzDdkxHwDiPkGEPMNIOYbQMw3
gJhvwEox3zheM9/wlvvw+QYQ8w0g5htAzDeAmG8AMd8AYr4BxHxDpt+Oz5fe
8vkS3OPzJdi4pueoCNV3aKUZUn9drBP8s6N7OywvgstnZq5UbfYG0m5XR00e
WgbDo8q99Y55QO91uw3M+hdAK9tPHTooF0JR6W/tMKdr0Me24Zlu1QqcN3ms
e8BUd+ievbqkynwFRIX0aXW2sARW7lW5d8AkB9QXvbeZ1ukc9BDzt7uVNfM3
uMTnb0DM66C7mO+d5PM9vMHne6C1qqNhjtIbTDmYHeJkWIZH1gcUvd7nAW5r
hu13H1SA9TZcvbG/YSF+fTlRuYOKK0TF98t0PFsA9RZYzHWYcAG7vrt34tT1
ArhanK3BcOLroVbH95nkYKcxjYIbdj8Haz6VbGc48euprgVKQ6/jocmpaySc
7mL+GcDnn6gzq2b+Cf9sXpq/0jYazpwsmDRUTwEh3l26JDQ4hwW++73fl+aB
kX1n+47fi6D74jFhfdXusnX6R5yJKYPDy5s7ZD7PgGNqavtPHLyBWr/5+a31
WcCej+Myb8+nXz5qzw846ae2mPmj25HeA98w//FbOpx0Zv7L/a99qizNwxvt
l6t1YvE3hjZdKcXPOu8ybJltNJYaqO+V8JS/76gWx/Ak/W3HfGH/Txy0FnGc
xbrX+bo4Qaxbi/PSu9W3Gc6AAc1PfpNwaot9beL7wl1iXx8FD0M4D6greBgv
eDvFecNiwRvBJxB8AsEnEHzKCD6B4BMIPoHg879xavkEgk8g+JQRfALBJxB8
QsEpZ4Ob1iHw4fSFfQ/L80EnZdCyRHkBvm7n1zSb7b94w4He0jodL3fVdGHn
1SGG38+rxP08b00J480yoGXYlfaT84MhJUxz7IDzCrj4aPLDoNCzaGK5f7HE
l52/11m2bxi3oXKQdL5Di+NfTNBKA7VnpzYusywHjbpW6Qd3X8av+3UuSTxm
3Om9YgnDe+dQh2Mx7NwXmCyZrHxDgbm9CgYGFgbB1cVnvZ5f24qdCn6ulPYz
ybG6+Qrmf82s84V45l+188KNCdFlWPBlF3jnZcCCS3EP7jQ+jh6xxpESL3rP
Ts6QeFql3uuMhGeW1qG8oRr5eFz+fOUY1SJ4N7zn6AOuhzHj68X5WYzf67/d
Tko8rB6n0VTK8+uHA/cNahGDLoFLU/f1UkCoQVmQ+tMDWDS4XYnXy/+/rxp4
F9tc7fkcT7ed/sTDOgTPBaTdZTxjyYrl5hLPKX/HRwsR/06m03fng8E4ZJBy
7vtLCvw20GxX/fFn0U3gH8Dx4wqBX74u6YbdhXwM36l8q+nZQpw0aayfneU5
7Cj4Wcr5wSeCn90p+RKf4NurWQ/GJ3Y6V++KxGe14P8h5x8PCv63JozSZ3xC
WeRZ//t5GRjToMLsi8ZxnCXOdxM/XzQS5zv2UKcpwzTy4ZRjOxXGJ0Y0mn5I
4vOLyKs8nlc4UOTV0Lbfg6a3iIGpgU+DT/RS4NR1RTtUDuxHK1G/1oj6FWN7
9KuUb3N27elwa2U0OOQ90X+opYDSpQd2eZr74M4kgxXFt/PAUBY14OStIljg
ZZ3zcH8ouj3ut9XjRBk0j/vRs5dDBvy6ciL33ZwXWEc8X6biHnhdZ+GrotZb
Ag5fNmnE/NHkufqr3sx/Q8+WXvnMv9eadfeKbufhhovjXkrxJy91PifFP2Z9
e/v1ldGo/wPX1eCp31T7BsNz4G87Fgh7DxFnE4+DJiLOIbGuKV8XN4p1a3Ee
EPfAvmPRCRLOm2Jfn2Nr9oXvxb4OCR76cx5wmeDhgOBtN+cNGy3jvD2afSsq
eEg0dJ2/XrG2uALGLvkWETPhBS60CN91v3UeBIUrT6osLYTJw2dnTAhIwPzh
gwvu/S6FznkGfQ9/SYfnap5WaxxjMeQXx9lW8LlV33Td47K9Ae0zj69j/rih
eG3gEeYf77Yt2pL5XzUb/+pe6zwcMf5pjhS/v8mmq1L8RVo4JHBINL7bqWew
juFZOGjIkyiGx+xvO84S9st/x0E9EaedWNear4uJYt1anFMEnwf0z6+XcJaK
fTXh+8I7Yl+rBQ9+nAecJnh4K3jrxHlDc8HbuAG7jyQkR0HbeqtMm9lVQPW+
enV7d43CUQrV4/0VObBr7BGPPnYF0Db8yyA11md3WOhl2ju9BAxPxLimZKaB
+/DAIJ0pKThc4Dz7kPM50zpQYyrDq1LXJaRXegku+KVUP435H3xq97gv86+4
6FSpp8jBkevWDtNh8Z8kqhe1ZvErLBe0i0uOwme6nl4Snidex1K6MzxFf9vR
S9hLRRwjHgcfiziNxLrmfF08JNatxRmZx/l08ojRknB2E/vqw/eF58S+pgoe
NnMesKPgwVrw1przhl32c96sXjcunlX2Em467RtnalcOY46a1VPJS8JzIwe6
6B3MBl11r3fbQvLgt0+65cpLeTjtQZx+wfYiaKneYc3HkylQ0jCo7frCt9h4
dYOuH0anQGh3E9+Qvlkw5dF2vcpfxfhW3C9TvTnPF9zkyzd9ORtQ7Xne4Nyw
PNB313Dsvz8BFD3kRlkphdjjZx3H/O1FeKAg8MgnFn/y1va3pfg7Kw2d+x3M
xsM+RZttGZ6hHUKMJDxG8rsbXYflYUiP/rr6LM5g0HohxTk/w/HljLKXeGLv
mkxpX+Nz0F+Z7SthtcbO96NTcNQeH89QhrPJ2H9aSTidhb8L90cj4W/z97o4
TKyrLXA6cpw4ReCMF/FH8/jYVMSv5cEhl5/jl2OLVko8gMAfyvHjEIF/vuC5
DucZcwXPd8S5aPNzwTqP+LnUu8X57M75xGLB50Vxvlf4+eJScb5txHk94eeF
U8V53f/QzlxnUATo9j1onetQAj3ab46+lPkWfQsN90j8+r583IzhBdfgl0pv
WPxUQyfjI0bPYML3RiWGQZnQctnSnZ9WlOGPASs7hzF+dda692R8wP0mhXWl
+HP9kksbfHsBo+8ta7HrUBh0e/sjx6mvAnO+cH4u3+V5cmStf8nDfdcD1LWG
l9pVxkH23RS1vsEB0K4k1fA4VuDzV5Y/GT40mVQ0tA/DuySpnqqEc0CCkp7E
e/AqpzhpXbCf0Fla94ftaPWdlXEYEfv0qhTHKKnPXCnOttM+rXsPisDmW00P
5rH9Dtt1cupFFsehfcROhhPdN4/MkXB67z+WKeG0Ev6tuD8OEv7nTtWzOGz0
DDPDfbOB8bCguT9+ZDyMXKmdIZ1HfW/3ROmcfzy23COdi6vwz+f+OFf4DxT4
Izh+HCnw7xF4bnA8WIunlrfYLJ5XP2/ol0m8fft7v1i7Xx3NQS3fsX3+88q+
vCfbx9X2XZ0vMPyNB/Lz6szPC++K8+oj+E/m/KOW4D9a5EkXnic4VOSJuThf
A36++Od8RZ505XmCGiJPiPyBLWHONXp4Tv6vGj0Mz8xaVTyKDyDyB2Y95Tzg
Jp4/67sPZv6BVP7A+6lvl8sYDsf1kUnsHMArULWDhIeIIyPyB4g8gUYbYuJt
uspRs9GjTsHnjsq3bMlXXRiroPIEiHwA4tz/7LfSjZ/7S9t5raX9EucOusuc
5hmx9Rp4jfh2iK2jOtViycd/7fc/cWTEuQNxvhB5YkyNnpzNzwv7bfGrOS/i
3IG4Z6hzlxH1BZqIfTXj+4I2fF9A1Bfq3IGoI0DUC2j8v88XiPsEiHsDiHoB
WQLnUY4TfQROol5Q5wtEXQDi/qfOUUY870DUBSDufyB0BRD3v4zQG0Dc/0Dc
/0DoCjAW93M9fj/DT34/A6E3YPwq5RFWtsk4J/lAn/GzwuQbthXuUteuAOKe
B+I+B0JXAHGfywi9AcR9DsR9DoSugGBxjjf5OaKbOEdCbwChG+HaJJd2nxm/
W7pd0Gd4IbzHpCopfv19DZ5LPF4a/6IF2zc0ivPTkeIQ+lC2/vAXZ0mvjNWI
nDuTreM1/HB2IxZfkRelI/G1xdWvpYTr6Jq4WVIcQu8Boevgl72iWtq/9etV
WRKvtwMV5hLOChF/G4+Ph0V8Qr/JWm3L6j6NrWe6f9zw6Wydzzs/nW3I4jcV
+z3O94vKYr+EHgOirwGirwGirwGir5ERfQ0QfQ0QfQ0QfQ0QfQ0QfQ0QfY2M
6GuA6GuA6GuA6LuB6LuB6LuB6LtlRN8NRN8NRN8NRN8NRN8NRN8NRN8tI/pu
IPpuIPpuIOZCQMyFgJgLATEXkhFzISDmQkDMhYCYCwExFwJiLgTEXEhGzIWA
mAsBMRcCYg4MnnJ7zaEtYqDl0zse0vyz9K3Sgwq/A0DMh2XEHBh67+ltf8+l
CE6qF3p1aJ0DlSmWj+X3XwMxB4Y5dn3PbIoqg4XTPAx7FWbAP3qevm01jgMx
BwZ7MedM4XNOGM3nnEDMgaFHcfNh9hfyMSan6cRmZwvhjN24xgMszgExB4YX
Yk47mM9p4Sef00K33PAHayIUeLH6WVDMtzOwpfnhXnoGz8FdzIHP8jkwlPI5
MBBzYKg+xOfMF/icGXsOrpkzAzEHhhlijn2Cz7Exn8+xgZgDw4+tthulObl6
6ncV77wMHN3qSMrdZseBmAPDQjGHD+ZzeNzJ5/BAzIHB803GdPnEt/B1yLkd
6yJz8MopV+9pyvlAzIGh/7XLFacPBoP566xn0txbLeqAfgPGJzEHll0S7y+q
+fsL7MnfX0B5/y7X+7DnM6jFolfu7DmIWjlNvWDOCwyO3K9+ij2f23wcp7Hn
DF4OvLpFmotG7R99RHo+75QEeLqz56BFXOwXD3MfDNk43FR6HjZXn558k9kH
GUyYfpPZFesa75Ken8SO0xtLz1OfI3ufS3HqjGv8U3reknoDSM9fr4L48dL8
9uxelebL9Cswa/62h14arnDNsnPpxk7J+HMs90/h/thD+JeL+Mk8PvYQ8Wvx
HOF4cIzAEyPwO3D8+CmW448W+13P94vhYr9N9Tk//pwfTBf8yIuVDx9ldWL+
7WH9pft4WLa57VrHWByr3Krve1YnGr5stJ3d95Ax7ddeaf755LDzXKlOxH2d
sCGA3cdbXVPuvpzwAhuvi2sl1Yn6wwfWDWJ29xhXjGb2NY7mZ6R7fMWbgz2l
e/3O2HfPpTjDCl99lu59t6Z5t6R1py4+0VGa02b1e2X0RqMUI6tmDSq7fh5W
2Oo0jfr1Fgf/7Y9ThP8qEd+Cx8fbIr6ywPMPx4PeAs9Tgf82x4+LBX5Tsd8f
kTX7xVSx33TBz3TOD84S/Kg9PP9U0itbZzjYMx0BKhszdXWnpOB6pYX7Jb3S
rCruGtMdYJzQ7YU0R/0+cny2pFda7nm5PIbpgt2+0421u0bhP5qNdkv6oP70
isR4Zs+5HLG2J7O/T9uhkPTE9LFTQdIXP+IaNpfmpRbjLUxSmf4o97qqIumR
pT87GErz2NbbFNt+Xy9Aw5eaXYZZXoGlj46php0uwOXCX8H9cYnwr41vxuNj
bfw2Ao8mx4OfBZ7fAn/Z7hr8uEDgtxH7rcf3iyPEfnUFP5acH9QU/BA6HAkd
jvYDFkwDpqd2WBm0lL5TG3bpzQ7p++GmQt9u4foWWtjV6Fv8VKiyUfqubrPb
h0xDp2TYc3aCm/Q9M6HbkdDteHu2xiPpu7eRzvrhI1gctS/jB0rfJ/8W+tyK
63O4y/U5murMt5W+n7O6Zn5Owhn0cchMCaf2lkv98jbmYCf9lb/vWHgbOtXt
dMMkqQQJnY+EzscpIr41j48vRHxLsa8FfF/4QuzLU+A35vhRXeAn+gIk+gJU
KuJ8ruJ8oq3g01ecowU/R3wlzvGIOK+N/LxwhDivNcU6+7Wuh8Bt/5knci4W
QMKJxADpe+YJZveSpe9QLz5sBvGDk8HVdVMP6bvlTqJ/1OP9IzwU88Cfcdn9
vrXKgn02l+c8UIqGXaoVc6XvmZdkqQZJ34PeTrjZWvo+VHPXlPuSneij0dH5
0grpu1JvHFstrdt+nKO6tO4E0Udbz793vbVfdG0fjYYvDqhK361GGLxqKH2v
enSYhxky/EOEPYrb0VHY9/8dH2vj+4n5wAI+H8A1Yj68SOC/w/GjlsDfMp7v
dwffL+4Q+yX6Ypwm+DzK+cQLgk97wb8r5x/fCf6ztqgGRBVFgVr2ycnS9861
77F7/JxuNFGRB/nTdA8PaVQMgzQV06XvsYm5Fl51aNM7KbMMBg8/qNHUPQPs
TMfGbNZ4bHjdf0JrM5vPMvPNb2v0oedaL+k7bXn0eO0X0nfSyxuWxDVj/o3m
jTX/0FluuGDoXQfpu+pLOw06S99ZXzmk2rafg7d80qb2KhFFUXhvwIE9/8Y5
9m877pzqc+aH7xXDxSLORR4HzWviXJMT8yuME3jmcDxoFTwwYgvDb27qo/Yv
/LhQ4L8j9tuQ7xeL1H1avu980VBf8JbFeUMbwVujrZznVpznP98LEM8FEM8F
EPkPRP4DkedA5DMQ+QxEPgORt0DkLRD5CUR+AnH/A3E/AHH/A3GfA3FvA3Hf
AvH8AnHfAnF/AnFPAlHXgKg7cO1dp0lBzXNw/tc17ha6HvC4vUGDjyqlQNQF
IO5tIPQMEHoGCD0DhJ4BQs8AoWegVs/kRnI9s4zrGSD0DBB6Bgg9A4SeAULP
AKFngNDPQOhnIPQzEPoZCP0MhH6GWv08+G/9DIR+BkI/A6GfgdDPQOhnIPQz
1a8B0a8B0a8B0a8B0a8B0a+Bq+jXkkW/5sr7NSD6NSD6NSD6NSD6NSD6NSD6
NTgm5mnFYo56WvP+4JD6jgFHa+eBYi5kVGE6VLL7/eR2LeGfPmlJ5aBclz/2
qWLOmXbq9nvJPkl8n53sxf3rn1mzceqYK3/syjncf372ESvJ3r6C29e5c/9m
rbf0c7N/8Md+MYn7X/Q5pfdv+3/8ZYS/jMAjI/DIiP3KiP3KCD5lBJ+yKtVu
VSN8FOgbdvrAJxc5eLudNr6g/Qh/tPqpKfNh51sU0K7CRY53q49pnGH27Ju/
73Y8rsC7YQ2n7d4kB40OBV6hVxFvzzpayOyg7Z2nZLtJjqN0vns+Z/Y5L+JP
L9NR4M3kxyctNOSg/3hs00TjSHy5eZHSch0F6Md1PmCuIUfdOnteRjN7+pau
flm3yvHIGK9rv+XPoJmLS/lB1RT8qj097s2tctCyiT/yTf4MP38LerGX2Q3K
fr03Pl+CHWz0jO9U+4KqR+/JsQdzIN1/Rtsx50ug8MTR9BvVvvhs/M0uUcy+
S135cfzjCtzmeKLrgfv+8Ku7Ue6A8/FQZ/iG2a8eV0BG4zPLd933R0h0fteP
2VNHdvYevEaBObFzortMk0OS4biew5OCoePv/T+ZHXIvp53SmibHB2eW9jFg
9sgLuT2OeigwrelYnyf75aDuruOva/YUqqp6z2Z2CO7vPsNrvxz3ZC0e3ZPZ
8w8P7bStSzJsWjwRtAZUwNyJdYb5lznDO8eZ7rMuF8DiftnuM9mfN34NmvHt
+UVIXV/4RPLb1cVw6xb276ks3yB7yvxv1p08SLtNKWbuH7CnXoMciGhrOik6
/xys/zJKi/09jly0YQv757BntU15FLOPbvx5lNMtdk7zTmabRSsgY9DThbfP
2kLohRNzt3ZJxmWWjZzYOthW5WqhFD/KveE3hgO/ttE1YbiwfgODGjyylb0s
JL/q1vmGNuzfk92NP/GM+a/yc3ksrffLwuxxXbb+hseXnaR1V7fuWijh23O9
56duDO+SwJ63JJxBViZ45pYcJozaF8LwoLWZwecHDM9CYZ/I7aDJ7UjwhvNF
/CM8Pszi8ZHgE80FzsaranDCNo4TCZ7xVlyTBAnfVZlbnZMMV2L4l1v3GB4Q
PFRyHmAo5wGJc8FowednzicIPpE4L4wU57KUnwto8XNB4hxxwN92jBF24nxx
rVh3FF8X7cW6xLnj9b/3heFiX0Q+oGaeZrmEr0nChANHGK5vl7a3vMnwZAie
LTnP+HMZ55nIH1SIczTj54i150jkFVaLPFnP8wQtRJ4Q+YZEvgGRV0DkD2iI
/c7j+4WRl2v2C0SeAJEPQJw7EOcLxDkCcV7gKfI5gecz1o2oyWcgzgUI/oHg
GWQlJ8Ia74iGo7F2mvX1FdDpYs76FlWO2FO8Z7ES71lsl7Ue16zF/IBZODnS
930edHRu+XlB3WK4vzD8sluDi6hqERL6KaEMvlvVSW4UnAGXnCKqXWzPYPTw
XSsvXy1A9PhdOOp8ATj5/y5/WHUV9bqrL2T+2Mih+IAK808IdGp0ivn73lZp
xuLjvkYmRxey+OrFjjIp/vSLrv9U/eu/05kc+6XqlXwtFsd102q4IxqVd4Op
hD/VMm5pM4Y/T9gbcTu+EvZHIv5BHh/bivj9BZ4mHA++FngEfhD4sRZ/a7Hf
Ar5fdBb7XSr4acP5wSeCn2DT5aOrf///HKGO5qQnrj2W4TrBvyPnH8cI/qtF
fY/n9R3eifr+QeiBEq4HMFnogUpRv9T0a+oXhPH6hUS9+6MHbLgegItCD0QI
f5VmNf5oJPyJ+ohvhN7I4HoDTYXeaCfqb78rNfUXCnj9RaJeY7jQGw5cb4C1
0BvJwl81rsYfPwp/or6jmdAzCVzP4HyhZ74N4/qhm0qNfoC1XD8goTewTOiZ
uVzPQJ9qrmd2Cv8b3B81e3B/Qp9gktBLj7heQn2hl4KE/vnHuUb/QBbXP5Re
ovyhp/Afyv2xq/An9BUS/kDsFwi9BwSfQOwXCH0IBJ9A5AMQehWIfAMiH4DQ
t0DkGxDPCxB6G4jnEYjnBQh9DsTzCMT9AES/AMS9AUQfASUqBRpV/7qvunae
6LbIfy1VL4CoC0DUBfjPvVpbF4CoC0DUBdDpushGrfL/68KoUmO7Q4VeQNQF
+G8dmZlQU0eAqBdA1Asg6kXtvvBR9tz0l5dq/zwDRL0Aol7ANvE+WtRf1K58
JNVfGVEv/vBZu69aHITOQYK3P/X6v3EIHYIEzoAhvx5cbt6lCBYlfu5wNi8e
jPRtF/SS5eHxs4MufHcrhZlL188fPTwSAtUWVR/yzkLXdNNnql2KsEth87au
zP9QidXo3sz/tLBrczseEXavPfe9q91KUT/m0/uxwyMRlisnHmVxjMW6M/i6
OFSsa3KsvvnLpFug3GFU9xGemXB4677OA53L8KRN+jjvokxY3/HDwqHDQ6BV
hwXrG2uUoXzOwWE7DfNgStsFiaVOLyD3WpjPmv7FuNp2xcJ1lqEwvd+alhXV
9+D8kJj5w+wVlB02LI2Z5VWUiSbLAkqk+Lme2YVSfOvVqV1HemZih6uNPSMZ
rs4d+iwd4EzaYZvHItVb7L7WnHmr/mh2r49vvto3mt3na4W9E7ejsbDvslet
jEi6hYVG6zuPYvvdceiVmz6LT9jBQuCcznHiO4Gz+eNrHtsN89B22cygMqcX
+DB9QrYl4+FeVv9LlpaheDtH34rtFw/tsV8v8UDY4ZbgeSXnGZsJno/frN9x
LMOxrGfrIRKuo342ef2dSTssFefo277mHPGyOEfCDtvEfqv4fnGb2G+9rcY1
eVvi+r0mb/edj1bfGvRWNvvb8w3Fu97Blmt+RRO8o6HlSHUVs92FEKOi3K5h
WRHkLT2aEBkYBo3W23RLhTzINa5cVbTrHQ5tVtB3EvP3+rHnteQ/9AOe+cHq
XOvEZ6Okuleeenv2flbv+gh7G27HHGHPEnFG8Dj4UMTpu7N/Sv2yIsxv9hCj
AsPw1vuzHmls3WUC5wqOE1UEzjtGzeMiTErAxf/j3QGrE8BX75rV7E3Z0K3i
uN9SlXKYXt1m3nKHl9Cx4LT99qUpEL7kdUvmj25+BvkDmb9PbMtBc5l/sLB7
cjvKhd0lcVUzFgeTDFRnWTi8RJePBl93sjg+Yt39fF28IdYl+ggZ0acDcf8A
0Z9S9x60FN+tLRHf17V72CvUdJdlQK39pJizJek2DpfsxWL+Zij8TZdMq+5b
1+6PfZ3wVxoy6YdkVxP3XkNx7/28r5RQ1Hp/wKazPYu1zKLB7tTgydLvWzyJ
cNz//Nwz7Ct+j6K5mCMWd89b97jMJaD7mLLC1BbRsEXm8sPneQW6R+153jIh
FHuc4v6lX8X6029rTu1wOUBl3Het3B1R4Kl6eYD0ezBaRYe/Sb87F7FsVtPO
XyPRY1m0pvS7O9E69x+tn5COjZ14nB1VPM6Dp1tXbPpyM+B6i6aZXb9GQszM
jBnS7/dsqK5nvon5EzzICB5kBM8ygmdZYFHfOY2jFNDgxikPc0859FSzX+s5
7yQmtNhiyOyY2ahBx1WecpSf/L3qHrMT/pAo/O9wf7jA/YGIAy9EnMfXa+Jg
VWsep73AaSnwd4jMHdusxaSAWvtlgf+W97Pxkj1Q/H5Ig9rvDzP3vpLOfZQ4
99383MFJnHu9STZZUyMUkKl680PpdTm83ZM1s7fFVdxxcW4gs2M3136WVcze
7IOSky6zW0a2V88MVsCTqkvORdfkYJo6I6e9y03cLvxncn/sJfwbiPhHeXz0
FvF3v3j6KSNYgV++NlauvCbHkX4D3ndlcdLE7/mIPAQPXauaPPw2muehLc9D
cBB5qNG2MrbbcwX84xKemn5BDt3bT7Y6v9YLX1h3vMvsGIAOE3KZfWncKwc3
Zg8U9jJuxzPCrinihDnXxMGYdjxOQiTHI/Ic2jh+1pDyPGssz/P7PM+hjshz
3xDuL/IZNnkWLpfyeZfI5xSez2Ai8jlIPBc3+XOBoeK5IO5tJO5V/N2o7tZ7
rO/quMcs24jV327KZW/jWJ0d0X9Q+RJ2X3V+1fxn7xWPYMrPqHrfdjDdJ+rg
dV4HwVHUx43nl17c55iEynMsTec8l0OfX9reI/5h/ef/rlO4yPbFlV4rHqHM
xtRiGbvXIuRw9AuLP0vYR3M7Bgn79deWOcuZ3+63VsY92T//3N9H7TOz7xT6
xITrEzwndEtc2rpeBxyToEfer9DZz+XYarjdBgkPUR8DhjfmPNThPKCJ4KFu
0cJ5Omz/C+trWpszPMFVs3dUs3UJ3QUEn5BZyOPs53HgIo8DhE4DQqdBgNhX
P74vUOf7gilCV1hzXQEXha4gdBoQ5wvE+VI6DQidBsT5AnG+lE4DQqfBOpFv
zXi+YV+ebzBF6MzuXGdib6EzCZ0GRF4BkVdA5AkQOh8I3Q7Ecw3EPSAj6iAQ
9wAUpJU2Xc76/zqX20ZJc4JPectK44wjgaibMqJuAnFfAXG/yYj6LiPqOxD3
MxD3uYy4t4G4n4HQJzJCnwBR74CojzKirkFtnQrndQra8joFRN0Eoq7BWhF/
OY+PqiI+UTeB0G8yQr9ROkFG6AQZocOR0OFI6HD8KvJTiecn1H9Xk59I5C0S
uh0J3Y6Ebsd1fjvjpboYt/5QfiGrh8NN/AxnsjpI9EdI9EdI9EFI9EGYM2/q
kYms7sq1Zpex+gyX3SZtlOK/EXbkdrwg7A1Gdox8yfqixcYXbRuwPumg78F3
0rpEP4VEP4V2Yr8hfL84Vuy3cFJsRq9J/qD0WDPH5JUC3LpZbbQd7mlI1Bck
6gvuE/fnRX5/Qlt9Xpe/b+2oNJXF3djO6VUntk71lpwjVsNd5cML+H93qnpn
fk2+yXUns/obH0DYZes8fj+fYlSBv7/PXDk7NQncFPWOrD3zwPBi0dekrpP8
MeN4xCeGH+8btEzdzOITdQGJuoC9RB3U53UQlwidc8h9U6kUN23KstTubJ2R
m4y62fwLv1Hmqprnotn6jW3+jf8/dtlQl/RmJkYVMGKa35mZqUl/+j8iD4HI
E1AR+bCA5wMc4/kARP4Ace5AzK+AmF8BMacCYk4FAW/CcqT7sYX3wPMzvgyC
6H03fextKwOaBKrJJX4ezR9ducN2pPizMmCApaODh1U02rbvMED63b7Cgfnv
ek+/hX2EfQe3Y7awm5uV3ldI/cDmoljp/ksevsFKh/UFm/+2Q7aw+wz0ybdg
93st73vkij67I17hSot+k/8xi8YPyfWPSvf8M/lDk2esr1kk7FXcjj7CPvG2
tvMbVlcOhx18LtWZpdWqOy4znb/gbztYC3uTpkZBsb9K/6zrovzwfl+lbGwQ
eXxZcototLs1a4r0u5v5dX91b876kV8R3G7P7Zgt7PnXNtfz2S/HGZEHQJqX
PxgdtquP2VP89rcdUNivzh/TRze1EP9pu+H1S6UQw7Xaftumzc7Hn7EuJ6Tf
b9XaFrlPQ5EK/pb7FPZ9MlEneG1n7ZulsGeWnbr+vESI0Jug2BqQhueSHDud
TS6H+HmuzsWGUbApupfunicJaDxt22fp91Vn2VyN12RxdnwbqyT9rvt89db7
ut0sxQ2dXm4fwOLo64cc2MbifH+5+9KZ5HJ0qZgVVcbi3HkwZYwDi1NZeCD6
zY4oPHVvsKekK3Q7rWwRyPqgImE/ze3YU9hLh5/T6zhNjoPdZqRI7zGKK5Ju
DUkKxmphN+B2+CjsJ9q0+L7ePhd3ZT54G9bZSz61Tku7+e1LcKTAP4/jRzuB
f47Ab8Px4xCB/4vAf43jxycCf4M4zqcy5xPvCz71BZ9WnE98Jvi8LPh8wPnE
hYLPx+I56sSfI+gt5r31Z7YO2XvfH410hjeU3kcd2786r//5ePxkxu3G3I77
hF3VdNDIGWtS8fb5SYrmTpmGyrnTvm89VY6u4rkexp9rvCbm0hdybhdIv3Nh
ARN676iMg17jZlpIv/thYnjWTdL97jr/PF/D9G+fbik2Uj9F+APhD8fjupnM
Yfe1onerM+z+/jPH8rpz3PNf/RfEHl9V038dz74/YfehMNCbYTRG+v2JrJTk
NOl3RS6uOOy7ZOAjaGE/O9Gc/fn97otXcdEKJPyB8Ifv56cXSvOzoLQ7+Zf+
NVczFvdzE34//7Frib7DmvcdcFvMhx1FXfjJ68If/+OqCduk38t4V2zySMLT
YcCYbAn/7uIfJx3jn+GG7RdUx6Y9gAPRq5+0fsHw/29/IPxhTlbdgxmdSvFA
fbuNmV/f/ll3wPOIedLvdwwJBiXp9zwKF9edJJ1j34D4/DFpD9A9udeAQ/HP
wNv3xiNpXcIfCH9w1Z3XmK2Hm1sfCmfr/1l3rfLzFx69QnEBxAeEr3OXa1vm
Whk7KTBF1OV0Xpf/+OuJdUfwdbEW5/eDsUZSf/Xr2iS7tazvvJelvULKN8If
CH+Q9ThoP4vVV7125fmSXrDv877EkumEWp4LOM9Yey6XrVZ1ZHmCNmtsLaU/
W94TefW//YHwhzVax4dLc93s+Rud/z3fXSp0y4gfNboFH3PdIo8Vff1o3tdj
snj/8kPopUKtGr2EZlwvGZ4Ted6L5znWPhd3X85KkM7Jrl7D59K53XXLeyid
L+EPhD+ojW/eKJOd65XZg90y2Dm/UbE+LOvoZ3hTPO9G/HnHPuJ+mDpk5WAp
Lxs3jP94kOWpbo6On7Qu4Q+EP1xMu5Ii5fH16zvHSnk9z1TvFHT0k6tN/kuX
4jRtSZe6yh9Zj4nun3sPM4pNvPrfyTcEpckpjT4oYJDQvSlc98IV8R5h1ue+
qlMvvcLfv/fLS3bEyhM8vydfDq6ADKHn47iex6/r+PuOM6KPCOB9BOwV83+i
T4GH/S2adSx4g6Nt9Bermr41fL7WZGedhmWgI/ogPd4HYQPxPoKov1A2WK9O
wr4y+PSo/jWzT4lQ0KA4dI9aMhwN7RTRf1oFJJlEWwfdi4LjgcfCdPRjgai/
YH/jyo5X+8rwetI57VksTpM2UT0dWJwDZaMWszjYPtQ/KZTFcfMwMtZjcYj6
C0T9BRv45LlzkxxV6ox9Kb3nD7yz8e6LqwgHhL0xt0OMsHttXfUlZEo+3jU4
qfHp3SvDrZten33ythCI+gs7BP57HD+2Evj3Cvz9OX70E/iJ+gsfBJ/vOJ+Y
Jvh0Fnx6cT7RQvBJ6DEg9Bi4zL396r2LHIe4tFCW+Sjw+auW9121H4H733aI
EPY59eKbnFIv+XMvOKf/7L7yUC4Q+hMI/QnTvsyYXMb6/21hlg0ygxXYNGpU
cSeXm7Dsbzv8I+y2lhu+4DGmuxJzmjLWDK2nvjwRcjgVLhTV6HMsa15Q35Tp
88ojd+vttK2UETocCB0O7VOjlyz3ZHrbbtpE6b1EvdcBJbfnnQQdYX/A7dBM
2O18pyS+P6TAOlUPnO6ufClPG3XB6OuN0D/9goz3C1jO+wUZ8R4EifcdSMxb
kJifoMFXfFHF/PY8Uy6Q/j2nK12/dWf2xXp7hn9zkUOvQ4Ozpe9KstZppFzS
foQDxv3zzWGTHHpMeuok5X+Kw3yfyKuIY5SirtRd+gYTLGDJKZ8sQ4OgXj2V
e5fhMJ0h9ubl/uj2I26X0/cKsGs474IsPhrTgnZpWmrIIfzNIXNpvjF6S6++
r40jqfcOQLxfAOI9CxDvTahzQeIcccd/ziuVnxcmfOG87eO8gUzw9rUf560P
5w3OCt4Sx3Le+nDewFLwZit4iOM8QOVmzkOp3ce9JkPlWF3vWPfoqQosNDW4
N29aGBL3PBL3ORLzdiTqCBK6VEbMN4DQh0C8BwFCLwExfwBCJwDxXgOI9xRA
9BdA9BdA9BfQVPQXnqK/aMj7CyD6CyDOF4g+EYg+EYh+Coh+CojnC4g8BOK5
BiKfgbgfgHgugLhnqHsbiXse/3ufb+b3ORJ1B4k6hUQ9QkKHIKFDkNAbSOgN
JHQCEroCCf2AhE5AQicgoQeQ0ANI6ECsnt0jb9mpu7jRfrjngVgFti95+jmi
nx8Seg9LvPn7Aods/r5gWL3ckof7HgcYbrp8t+7zZzBO9ahO1q1yOKC93eGw
agpOiR79JJrda/P9wgayew5GtPNcns7usbe7u/UfNjwE1ijGLrpflAlLll/r
pqJRhnpfXw0tZ/eO/uf7abbsnlg8r8mWtayPIHQvEvNDTDSe4yG9D9PJnzH1
AYsfXtD+jvT9Uo/g1InS+7Yru09t2MHivx7nOEHqf+OF/wDuj2HCv5vwd+f+
+Er4y3by9xH7OA/Y02ZpqcTDUcHDYM4DvhQ8rBI8TOI84DTBQ6HgYTrnAS0E
DyMED+05D7hB8DBR9B0ded8BtX0KYYdDoh/x4v0IzBX9iKvom3bzvgnuiT6L
sP/pp67yfupP/1vbP27l/SO0Ev0mYf9vXwnXdOusMIt9Jv8h+t9q3v9Cbb9M
2GGE6Iv78774Dx4d0e/f4v0+PhDzAcIOV8QcYAOfA/y5P2rnFRv5vAJr5xuE
HUzFHOM0n2P8ieMh5jYN+dwGa+c8hB26XuDznLN8noOPtDk/ZmIe5cTnUVg7
vyLs4CnmVKV8TvUHD/HcAfHcAfG8y4jnHYjnHYjnEYjnEYjnEYjnEYj3SkA8
X0A8X0A81zLiuQbiuQZi/gzE/BmIeS8Q82Eg5sBAzHuBmPcCMW8HYj4P/53D
r+FzeCDeFwDxfgGI9whAvO8A4v0IEO9BIOyj83dtDzmGaJk1MgtTwNC1Rdt/
l7hju8nJC16flaN2+zkX7vgpYOm8C34b071xZode+o92yjFbvaed83kF3Lzz
Vp5mIkfckGvkrloKv1zmrrVRJEDspfQm4Zsy8fvfeh6qhJ6fcfnOaTfVUhzh
0vf5NkUCFk/NexbB/In4QOCh8EP38tZzO92S474pnRLSWL9T5Ty/2a87h0BN
rj5Ben8c9Mpqo/Q+eeb+tBlzNmXjmkutUlew+t0j9/tSqf6vtF7pv4PVcQI/
tBVxAnkcmMvjwKa/48BaHgc6zOH6YQPXDzBc6IdJmxO6nGuWjF0/hK6cpF4B
17UqxswqeIJz1Lx3LVwXjfcPTbNQ7aqA77pzfzaq9MLm91889E1KQjPZycn1
Q8rhofEY7yj/UGxxTsnoybhonJwzziz+WwUkb1/5LMM2APO6m14KX5CE8pfL
77n9Uw6eaxc/rdv3Fd67MfXZuM9ROD5S497lqxXQem8rzesLInDcs8I6SdkF
EDFt5/mSgEywnVy09E33HKzT19X18MhieLvAw9h0eir0nzU2pkfuG+z7vGuE
pMuflmECe57gweOG/jYBaTjH00a3lD0/mq/qZ7PnCQ4H+Q/d+yQB72xpuDIx
uwDTJrTwLQ3IxEmDnfyl+EG7V38+NLIYr24t3D5teiraHIsu7snix6bb/y7o
XwRb9r/2CrF4A63mus6uE5cJLxNHGKmtKYEk5W0fczemgcOibcH9b6TB4LFT
l81kOi9bYRHAdCK0aznPZq9aMjxpOrpbCNN5o+c9PCnpvjp+Fvt09WPhwM9t
q1l8bKhwUIRavMFA7PdLih+Yvvd+6zUluCZbZ9q7jWmYuK5hmD6L/0733tJT
7kmo9fuRXYxdObzQ6xPV9HoUKNscK/fqHo03707p6JFcAR4XPT4b2AYDTo68
5/85CU03z5l45WM5WI6eo71leSBcio3ZN2VRNK6yXpV1vBWrF7Hms62Ln8Du
w6WrfbWSsfLksSKbXhVQPqnV4gy1OxBm55d+aWs0Nrj7ykGvrwLKtAcPVM50
g9UezRwO3fcH388Jy+JZH/fY95+cQaxfa+zc3STQ1B9m32x+JGRKBXTe4BF6
eXkibC7pfV36/wsmHnw04NLedMisU56j0zQRVG7sLZTyo3VU6/iwBUmwMyin
C8sTaGKo3k36/ws6nVF6cnlvOp7fv/qh9P8ZLCwfa838ccXuo2siWH51bZU1
tR7zv/khOFXKp/pOZT/GfI6Cxic+33ZfEAGXLm3Yw+w45NlDmwks75zW6h66
wezfko54Szza93587KR7EhhFzkhowvi83OPNBGbHhf2vDz7N+B7oXDekGbPr
aQw7+HZqOZg0XX54g0MShIfvnhWQEwu6M8I1mB3PNDfuu8khCXd289sRyOz/
B84eARM=
       "]],
     Axes->True,
     PlotRange->{All, All, All},
     PlotRangePadding->{Automatic, Automatic, Automatic},
     SphericalRegion->True,
     Ticks->None,
     ViewPoint->Dynamic[4 {Cos[
           Part[$CellContext`p$$, 1]] Sin[
           Part[$CellContext`p$$, 2]], Sin[
           Part[$CellContext`p$$, 1]] Sin[
           Part[$CellContext`p$$, 2]], 
         Cos[
          Part[$CellContext`p$$, 2]]}]]}], "}"}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391876417165`*^9}]
}, Open  ]],

Cell[TextData[{
 "A more sophisticated ",
 ButtonBox["Slider",
  BaseStyle->"Link",
  ButtonData->"paclet:ref7Slider"],
 " version is ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Manipulator",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Manipulator"], "[", 
   StyleBox["x", "TI"], "]"}]], "InlineFormula"],
 "which represents a manipulator with setting ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " in the range 0 to 1. "
}], "Text",
 CellChangeTimes->{{3.4734228220923944`*^9, 3.47342284238803*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Manipulator", "[", "]"}], ",", 
   RowBox[{"Manipulator", "[", "0.8", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    DynamicModuleBox[{Typeset`var$$ = 0}, 
     PaneBox[
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`paused$$ = 0, 
       Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
       StyleBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEExpressions", "Manipulator04"][
          Dynamic[Typeset`var$$], 
          Dynamic[Typeset`var$$], {0, 1}, Medium, Small, Automatic, True, 
          Automatic, False, True, True, All, False, {}, 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`paused$$], 
          Dynamic[Typeset`rate$$], 
          Dynamic[Typeset`dir$$]],
         ImageSizeCache->{271., {11., 18.}}],
        DynamicUpdating->True],
       DynamicModuleValues:>{}],
      BaselinePosition->Baseline,
      ImageMargins->0]],
    Manipulate`InterpretManipulator[0, {0, 1}, {}]], ",", 
   TagBox[
    DynamicModuleBox[{Typeset`var$$ = 0.8}, 
     PaneBox[
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`paused$$ = 0, 
       Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
       StyleBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEExpressions", "Manipulator04"][
          Dynamic[Typeset`var$$], 
          Dynamic[Typeset`var$$], {0, 1}, Medium, Small, Automatic, True, 
          Automatic, False, True, True, All, False, {}, 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`paused$$], 
          Dynamic[Typeset`rate$$], 
          Dynamic[Typeset`dir$$]],
         ImageSizeCache->{271., {11., 18.}}],
        DynamicUpdating->True],
       DynamicModuleValues:>{}],
      BaselinePosition->Baseline,
      ImageMargins->0]],
    Manipulate`InterpretManipulator[0.8, {0, 1}, {}]]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391876729164`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"f", "=", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Manipulator", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "f", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.25", ",", "5"}], "}"}]}], "]"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"f", " ", "x"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"-", "2"}], "\[Pi]"}], ",", 
          RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "]"}]}], "}"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`f$$ = 1}, 
  RowBox[{"{", 
   RowBox[{
    TagBox[
     PaneBox[
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`paused$$ = 0, 
       Typeset`rate$$ = Automatic, Typeset`dir$$ = Forward}, 
       StyleBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEExpressions", "Manipulator04"][
          Dynamic[$CellContext`f$$], 
          Dynamic[$CellContext`f$$], {0.25, 5}, Medium, Small, Automatic, 
          True, Automatic, False, True, True, All, False, {}, 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`paused$$], 
          Dynamic[Typeset`rate$$], 
          Dynamic[Typeset`dir$$]],
         ImageSizeCache->{271., {11., 18.}}],
        DynamicUpdating->True],
       DynamicModuleValues:>{}],
      BaselinePosition->Baseline,
      ImageMargins->0],
     Manipulate`InterpretManipulator[
      Dynamic[$CellContext`f$$], {0.25, 5}, {}]], ",", 
    DynamicBox[ToBoxes[
      Plot[
       Sin[$CellContext`f$$ $CellContext`x], {$CellContext`x, (-2) Pi, 2 Pi}],
       StandardForm],
     ImageSizeCache->{225., {71., 78.}}]}], "}"}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391877041163`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Checkboxes and Buttons", "Subsubsection",
 CellChangeTimes->{{3.473412900266562*^9, 3.473412904041769*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Checkbox",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Checkbox"], "[", 
   StyleBox["x", "TI"], "]"}]], "InlineFormula"],
 "represents a checkbox with setting ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", displayed as ",
 Cell[BoxData[
  TagBox[
   CheckboxBox[True],
   EventHandlerTag[{
    "MouseDown" -> Null, PassEventsDown -> Automatic, PassEventsUp -> 
     True}]]], "InlineFormula"],
 " when ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " is ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  TagBox[
   CheckboxBox[False],
   EventHandlerTag[{
    "MouseDown" -> Null, PassEventsDown -> Automatic, PassEventsUp -> 
     True}]]]],
 " when ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " is ",
 Cell[BoxData[
  ButtonBox["False",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/False"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.473412913932186*^9, 3.473412918924195*^9}}],

Cell[TextData[{
 "By using ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " variables within ",
 Cell[BoxData[
  ButtonBox["Checkbox",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Checkbox"]], "InlineFormula"],
 " the state variable is dynamically updated:"
}], "Text",
 CellChangeTimes->{3.473412930749016*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Checkbox", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   CheckboxBox[Dynamic[$CellContext`x]], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391877665167`*^9}]
}, Open  ]],

Cell[TextData[{
 "Here the value of ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " cycles through the list ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "InlineFormula"],
 ":"
}], "Text",
 CellChangeTimes->{3.4734129426986365`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Checkbox", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   CheckboxBox[Dynamic[$CellContext`x], {1, 2, 3, 4}], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391877977166`*^9}]
}, Open  ]],

Cell[TextData[{
 "Another object is ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Opener",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Opener"], "[", 
   StyleBox["x", "TI"], "]"}]], "InlineFormula"],
 "which ",
 "represents an opener with setting ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", displayed as ",
 Cell[BoxData[
  TagBox[
   OpenerBox[True],
   EventHandlerTag[{
    "MouseDown" -> Null, PassEventsDown -> Automatic, PassEventsUp -> 
     True}]]]],
 " when ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " is ",
 Cell[BoxData[
  ButtonBox["True",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/True"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  TagBox[
   OpenerBox[False],
   EventHandlerTag[{
    "MouseDown" -> Null, PassEventsDown -> Automatic, PassEventsUp -> 
     True}]]]],
 " when ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " is ",
 Cell[BoxData[
  ButtonBox["False",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/False"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.473413003039542*^9, 3.473413015769165*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Opener", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   OpenerBox[Dynamic[$CellContext`x]], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391878133163`*^9}]
}, Open  ]],

Cell[TextData[{
 "Example: ",
 "Use ",
 Cell[BoxData[
  ButtonBox["Opener",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Opener"]], "InlineFormula"],
 " with ",
 Cell[BoxData[
  ButtonBox["PaneSelector",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/PaneSelector"]], "InlineFormula"],
 ":"
}], "Text",
 CellChangeTimes->{{3.4734219949321413`*^9, 3.4734219965233445`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Opener", "[", 
     RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
    RowBox[{"PaneSelector", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"False", "\[Rule]", "\"\<Heading\>\""}], ",", 
        RowBox[{"True", "\[Rule]", "\"\<Actual content\>\""}]}], "}"}], ",", 
      RowBox[{"Dynamic", "[", "x", "]"}]}], "]"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{OpenerBox[
    Dynamic[$CellContext`x]],
   PaneSelectorBox[{False -> "\"Heading\"", True -> "\"Actual content\""}, 
    Dynamic[$CellContext`x]]},
  "Row",
  DisplayFunction->(RowBox[{#, "\[InvisibleSpace]", #2}]& ),
  InterpretationFunction->(RowBox[{"Row", "[", 
     RowBox[{"{", 
       RowBox[{#, ",", #2}], "}"}], "]"}]& )]], "Output",
 CellChangeTimes->{3.4734391878289165`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["RadioButton",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/RadioButton"], "[", 
   RowBox[{
    StyleBox["x", "TI"], ",", 
    StyleBox["val", "TI"]}], "]"}]], "InlineFormula"],
 "is displayed as ",
 Cell[BoxData[
  TagBox[
   RadioButtonBox[0, {0}],
   EventHandlerTag[{
    "MouseDown" -> Null, PassEventsDown -> Automatic, PassEventsUp -> 
     True}]]]],
 " when ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " is ",
 Cell[BoxData[
  StyleBox["val", "TI"]], "InlineFormula"],
 ", and as ",
 Cell[BoxData[
  TagBox[
   RadioButtonBox[1, {0}],
   EventHandlerTag[{
    "MouseDown" -> Null, PassEventsDown -> Automatic, PassEventsUp -> 
     True}]]]],
 " otherwise. "
}], "Text",
 CellChangeTimes->{{3.473422149590813*^9, 3.4734221592316303`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"RadioButton", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", "0"}], "]"}], ",", 
   RowBox[{"RadioButton", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", "1"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RadioButtonBox[Dynamic[$CellContext`x], {0}], ",", 
   RadioButtonBox[Dynamic[$CellContext`x], {1}], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391878445168`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"RadioButtonBar", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    StyleBox[
     RowBox[{GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {1},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["1", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "  ", GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {2},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["2", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "  ", GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {3},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["3", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}]}],
     Deployed->True],
    RadioButtonBar[
     Dynamic[$CellContext`x], {1, 2, 3}]], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439187860117*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["RadioButtonBar",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/RadioButtonBar"], "[", 
   RowBox[{
    StyleBox["x", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["val", "TI"], 
       StyleBox["1", "TR"]], ",", 
      SubscriptBox[
       StyleBox["val", "TI"], 
       StyleBox["2", "TR"]], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}]}], "]"}]], "InlineFormula"],
 " ",
 "represents a radio button bar with setting ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " and with labeled radio buttons for values ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["val", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.4734221872492795`*^9, 3.473422193692091*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"RadioButtonBar", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", 
     RowBox[{"Range", "[", "5", "]"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    StyleBox[
     RowBox[{GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {1},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["1", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "  ", GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {2},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["2", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "  ", GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {3},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["3", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "  ", GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {4},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["4", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "  ", GridBox[{
        {
         RadioButtonBox[Dynamic[$CellContext`x], {5},
          DefaultBaseStyle->"RadioButtonBar"], 
         StyleBox["5", "RadioButtonBarLabel",
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.21]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}]}],
     Deployed->True],
    RadioButtonBar[
     Dynamic[$CellContext`x], {1, 2, 3, 4, 5}]], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439187891317*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["PopupMenu",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/PopupMenu"], "[", 
   RowBox[{
    StyleBox["x", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["val", "TI"], 
       StyleBox["1", "TR"]], ",", 
      SubscriptBox[
       StyleBox["val", "TI"], 
       StyleBox["2", "TR"]], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}]}], "]"}]], "InlineFormula"],
 " ",
 "represents a popup menu with setting ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " and possible values ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["val", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.47342223314456*^9, 3.473422238370569*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"PopupMenu", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   PopupMenuBox[Dynamic[$CellContext`x], {$CellContext`a->"a", $CellContext`b->
    "b", 1->"1", $CellContext`d->"d"}], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391879069166`*^9}]
}, Open  ]],

Cell["You can put in anything as content:", "Text",
 CellChangeTimes->{{3.473422334482338*^9, 3.473422344606756*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PopupMenu", "[", 
  RowBox[{
   RowBox[{"Dynamic", "[", "x", "]"}], ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"n", " ", "x"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "5"}], "}"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 PopupMenuBox[Dynamic[$CellContext`x], {Graphics[{{{}, {}, {
      Hue[0.67, 0.6, 0.6], 
      Line[CompressedData["
1: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
TkMNo/+2q3G4xOTDxY/mN9HQvJA3bSZMEu/uFVmyR2lo8MH/nuoGkkg0rFjs
M0Hp0xVcq7iFJCLFq6s5UzTcrvMtYA5J4lbg350fBegowu3Q9DQiCaPwSU0z
STrqVd7Nc7EiCTDn78ll0PGFbPDwh/MksVZR5IWqLB3/GgZe6rQjCdnn0rKD
SnTcYOwOM/+RRGvC6jn/FdT++I2f5fxIovbCpuwhTTpeXhbelvCAJMpW6F0+
tpaOwlLFm1iPSCI1fW+XmjYdH/W/PFn+hCTcsqy/5++ko+ym1UfEUkjC1t3e
V8OQjsoSrKet6SRhucVl28N9dJQMqx6PfUsS2wjPLIvDdFxf/Lm7OYckFpU+
jR4/TceEu99stpWRBL/vi2OW56jnNT9UOFNBEiOGyYxiGzqePrS+yraSJBoq
s3yCHemoUmevu7mGJL4GftbnOdMxIKyKM1VHEp9NiqdO/kdHoX+ZEYkNJBFX
V+246jodo+7sb8htJomw8IZlIbfo+F/O0QtL/pGEn3lL2+Qd6r6b/Ppd2kjC
sZlzpMyPjjcWFBT/6CIJq+cjNK0HdHQNjlnc1EMSh62mKkKD6PiyxPzojz6S
0OkUwTPhdFwtUxR+mSSJVYkSk+VP6CjdVP1YZZAk2BdlMldH03FjvJtHzhBJ
0FcqOYTF0tHc68HuLSMkIcRV1ZiNp+MinOXFjZLERPry1rNJdLQ+VPBwfIwk
ei+teVqRQsdcbofIugmS+LNus9naDDqem/A6e4RHEj9G9SQj3tLxwMKvMWcn
SaIwa8eXufd0fO45QZhPkcR7dyMv6xw66p8++ll7mvLXlkN63z7R8biT4VP+
GZJ4MnNsYl0+HatX6B17Q/ED4tSbyCI6JpW/Hdk7S/nN87wdfxkdLbV1HSop
vrzNQc2mgo5bl7gXa8+RhLWQa0tlJR3jOIqTARTLs8p/TVXR8XcTvi+luHKz
0neNWjrmeSzdxaH4tsmlEtN6Otaz3qbMUrzRrvjT7UY6Sn1v7pyiuPeu3Lv0
Zjo27Ukebac4Kto+pekfHUWFlzRkU2ySnf9CtIOOHVrng65SLPxT+snGbspf
yU+Y6hTn9F8IPtNHR8eFY7cIql4H4c++gVw6CiZlfdhGsQqb7vlpkI5lnpol
b6n71mlbu/WO0NHD5F2SBMV+h3IcZSfo6OD/9swRSi89+0Xnt09ReTF5NuJH
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

       "]]}}}, {
   AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
    PlotRange -> {{0, 10}, {-0.9999993680039507, 0.9999995755730018}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], 
      Scaled[0.02]}}]->
  GraphicsBox[{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
TkMNo/+2q3G4xOTDxY/mN9HQvJA3bSZMEu/uFVmyR2lo8MH/nuoGkkg0rFjs
M0Hp0xVcq7iFJCLFq6s5UzTcrvMtYA5J4lbg350fBegowu3Q9DQiCaPwSU0z
STrqVd7Nc7EiCTDn78ll0PGFbPDwh/MksVZR5IWqLB3/GgZe6rQjCdnn0rKD
SnTcYOwOM/+RRGvC6jn/FdT++I2f5fxIovbCpuwhTTpeXhbelvCAJMpW6F0+
tpaOwlLFm1iPSCI1fW+XmjYdH/W/PFn+hCTcsqy/5++ko+ym1UfEUkjC1t3e
V8OQjsoSrKet6SRhucVl28N9dJQMqx6PfUsS2wjPLIvDdFxf/Lm7OYckFpU+
jR4/TceEu99stpWRBL/vi2OW56jnNT9UOFNBEiOGyYxiGzqePrS+yraSJBoq
s3yCHemoUmevu7mGJL4GftbnOdMxIKyKM1VHEp9NiqdO/kdHoX+ZEYkNJBFX
V+246jodo+7sb8htJomw8IZlIbfo+F/O0QtL/pGEn3lL2+Qd6r6b/Ppd2kjC
sZlzpMyPjjcWFBT/6CIJq+cjNK0HdHQNjlnc1EMSh62mKkKD6PiyxPzojz6S
0OkUwTPhdFwtUxR+mSSJVYkSk+VP6CjdVP1YZZAk2BdlMldH03FjvJtHzhBJ
0FcqOYTF0tHc68HuLSMkIcRV1ZiNp+MinOXFjZLERPry1rNJdLQ+VPBwfIwk
ei+teVqRQsdcbofIugmS+LNus9naDDqem/A6e4RHEj9G9SQj3tLxwMKvMWcn
SaIwa8eXufd0fO45QZhPkcR7dyMv6xw66p8++ll7mvLXlkN63z7R8biT4VP+
GZJ4MnNsYl0+HatX6B17Q/ED4tSbyCI6JpW/Hdk7S/nN87wdfxkdLbV1HSop
vrzNQc2mgo5bl7gXa8+RhLWQa0tlJR3jOIqTARTLs8p/TVXR8XcTvi+luHKz
0neNWjrmeSzdxaH4tsmlEtN6Otaz3qbMUrzRrvjT7UY6Sn1v7pyiuPeu3Lv0
Zjo27Ukebac4Kto+pekfHUWFlzRkU2ySnf9CtIOOHVrng65SLPxT+snGbspf
yU+Y6hTn9F8IPtNHR8eFY7cIql4H4c++gVw6CiZlfdhGsQqb7vlpkI5lnpol
b6n71mlbu/WO0NHD5F2SBMV+h3IcZSfo6OD/9swRSi89+0Xnt09ReTF5NuJH
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

      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   PlotRange->{{0, 10}, {-0.9999993680039507, 0.9999995755730018}},
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], 
     Scaled[0.02]}], Graphics[{{{}, {}, {
      Hue[0.67, 0.6, 0.6], 
      Line[CompressedData["
1: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
T7D1hmZFULW0FL3fwMAJeRMnWn8pwiWdX//Khxh4deNas5A/irD73iXj7GUG
7hK4a9TXpggm+h/sb21g4rtBlruf9ihCF4ODYn6TiQfPjsvzE4rw4kDHspEc
CxtHqMh+GVMEn0fL7cc2sXBBxgkp1wlFCPfTe7AELPyw75tw6bQibOFJ+Wbp
xMJwMpztyqIi+Nem9K9OY+Es/2+L65cVYXlIfZ/te1LfPRqb/b2iCJ/TDnNb
l7Aws95iXJuTBg4mcgImXSwcr6/cS+elwcENakVqEgTmdrTojOWnQe+Z0YYy
GoF9roe1GQjSYM37OsHVmqQezScan1No8P5BWNCd/QR+90fpx3FRGny/LhtQ
fJzA8tPmNctiNPjbv0cizZrU85sKSq2kaEDrta219yGw/RECr5amkfdJe9b2
ywSudlcq+ChDg1V/iG+fgwmc/CI0T1SeBmsvpQjnPCYwf+nXt0UKNDDa8piq
nEhg/27Way8aDdpv187seUngI7LmL6pVaCCbe+Oz+wcCx/ZrFlmr0uDy3Mof
zgIC92evbmeso0Hz1wbhYyUEDoQCivAGGriEWkYs1BG4kjdmQ7IGmZ+S6zub
JgKLN3kbbNakgeRT/8/eLQR+7aIcaLqZBq4bbmll9RB4VnMppl+bBoEbWiKa
BgisP/s7128LDbjEW2OzRwgcVfy2lkeH5G+n6FFdJoHbw8OHnmyjwYLRj+f+
YwRWNXPmUNOlQfJJ6n2XSQKfk9sjl7+DBvxj3/l5ZghcOCi1/fAuGghqnBS1
nCUw39txk47dNOgvV06wniewxaWas2cRDXTXbkmnLBL4ud6L0GWggZ7TSY2L
SwRm8V9Pva9H2rNXVru/TGDdX5aFivrk+qLeeMsVAt9K1G7N3U+DFfZX15tI
3OAqMKV3gAbqvgd/////H+rmQaHmgzR4t9Us8f///7jNYzUXQxr4Hlds8SRx
Xmmc/sxhcn188a1s0j5b5Hn7kCM04P0u+DKJ9G9kceTymmM0aDr2dM8+Mr5Y
hXWPXx0n6xVSbBxLxt8/zPZ2hwkN0gNj+xLJ/LTetVXXmNLg48zsrAWZf+CV
vAEbcxo89Qh8UkTyU6F/j41lQYN9Y4Hf20n+RIXcZK9b0sBYTSI8g+TX7s9e
HYoVuV5XkalKJ3BmsqxxijUNzr7R/WcxSOCZM9Me2rZk/3h9y93eS2C9/37c
KbUj6xtXoVr7l8D3FjNSzE7RIDVgi4NIK1mf+zZ//J1owBfjap5bT9bHUmdi
lQvZz+ov1wtUkfWhUQTjTtOgq2/b1JpSApvnlep9PUMDrYs33xz8SPbv1QRb
Iw8aXKTkFHq8ITDD4GLAX0+y3suS3HszSP5b1XNWvGkwwCq4xhFH8v+cqyrK
lwZX9E//YUWR/Ht29tHOk/53qLyLDCXw++UH0vr+ZL896Ic+fwL3Ks/dCg2k
QbjeBu2xYwTWZDYmSV+jwZ3Hs1znyf14+ePr/Mzr5H57vV7s1Q6Sr0OnxmqD
aHAyxs5okwqB93pVWIuE0SCYurg/fZKF51tGDMrCabBb8/6r7AEWztsnoH3x
Lg0+m/zosvrDwqrSxqv/3if9t+S5Z35hYYGytryMGBoE3cCFSpdZuFxzKck6
lga77C39nM+w8PU4hQiheDLfCguXo5YsPOHl7HAhgQa2j0o/yW5l4RZpliCk
0aD4s35VCp2Jo29R5iZe0GC2YGVQ/Q8THya0+1+k0yB+Rr3ftpSJC8su5vNn
0WAcOzmWxDNxmje7659c8vw4dm40Yj8T+3wXL/LCNJg717zLMoKB1bW2ZdGK
aaCcJb/12TkG7os/GdNcQgPT0zMi904ysIVPoueOchpkNF19GqjKwLtk10vz
1JH827ynRBaM4tW+O88ltNEgzk/jMW6l4ySqo0rtNA2U+s7K57cN4x3/bdB0
/EeDiihm+/P8Ydx8aGrb7CwNsEe205H4Ybz64p3DKos0iMkalBqxHMY+PzPP
BXIoQb7xmLx+0xCGO5NFGsJK8OTYndnGgkHcS9yyjVyvBP8OPwopc+nHKqXp
MUetlSDkXNvL8wc7cb3GbFqHjRJ03OOdSR37iwNiDr53t1OCqbAdvRGxf3HN
mZEfdxyU4P7y3sHbQx34HGUDL3ZVgti216I7gtoxts25sumCEsQX1ZSfymrB
VrN5pyiRSiDqrsP9obERR20sUW8sVIKuOG7ackI+Pj3J9bNKXRk616+XPbLY
hOwy9ettNJShUPZ7/oh1M7JwuFVDbFSG/P1KQ6Zfm5HBD85yic3K8HK4dUvk
pV9INYvjq8M2ZagYxUOXJn+jAUe2F3P7lMGUuBbq3dGKnBsXAtRslaEgZjQ0
LLAL2YTt9C+wU4auVVdur2nuQmZw5fyxU8rwueOs8WuJbqSfM3/Wz0kZHh1n
87ng2Y1Uwucci88oQ3h96L81a3pQ395/Rif9lWHytvMbC9de5Jg7oRh2XxlS
jpWr/+ntR55BpouGD5QBtf+nZiw4gPxM8/4IPFQmz/v6teHbBlDotN+9qBhl
qMqpo2yLGEA5unMLTxKUwXblXILXpkE0V7zy+2WWMti37M4fdB9CHA9PvXPL
Vob4n8b7JB4MIQHn4kj1N8pQDVk8Cx+HkDxPsH7OO2Vo3fHPjc4+jPQNed59
+KIM+9h0Vhk9GkZRjQKRZRUkX8Ynlz5njpD686zbnSpl0HTYflC1dgSlXqjf
d7CGxCaTI/uYI+ijZNR8Tb0yeFbR4+5p0lGHlZhb0y9lGOfL/2KRTUfr+qT3
9fYpg3HxiVTbp6NIK++yfNqAMrDa1kY//zSKdtxun3MZUoZj1cr0B02jyGhd
wtsROhnv2uyrXnwMdM5DUX58nIznyQZuyQsMFLjr5ty7SbI+bZdXv4hkoNuC
vc0XppVhyIDW3f6SgWLfpEbMzirDCV/x36iF1Bc3uFzz55XBMPyvtecYA2UZ
u+gFLirDc8vZW2g1E+UplcvtWVaGBcmmVV8UmKhwUnVuZUUZMpvHnrboMNH/
AKEXXuM=
       "]]}}}, {
   AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
    PlotRange -> {{0, 10}, {-0.999999941761652, 0.9999995837354044}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], 
      Scaled[0.02]}}]->
  GraphicsBox[{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
T7D1hmZFULW0FL3fwMAJeRMnWn8pwiWdX//Khxh4deNas5A/irD73iXj7GUG
7hK4a9TXpggm+h/sb21g4rtBlruf9ihCF4ODYn6TiQfPjsvzE4rw4kDHspEc
CxtHqMh+GVMEn0fL7cc2sXBBxgkp1wlFCPfTe7AELPyw75tw6bQibOFJ+Wbp
xMJwMpztyqIi+Nem9K9OY+Es/2+L65cVYXlIfZ/te1LfPRqb/b2iCJ/TDnNb
l7Aws95iXJuTBg4mcgImXSwcr6/cS+elwcENakVqEgTmdrTojOWnQe+Z0YYy
GoF9roe1GQjSYM37OsHVmqQezScan1No8P5BWNCd/QR+90fpx3FRGny/LhtQ
fJzA8tPmNctiNPjbv0cizZrU85sKSq2kaEDrta219yGw/RECr5amkfdJe9b2
ywSudlcq+ChDg1V/iG+fgwmc/CI0T1SeBmsvpQjnPCYwf+nXt0UKNDDa8piq
nEhg/27Way8aDdpv187seUngI7LmL6pVaCCbe+Oz+wcCx/ZrFlmr0uDy3Mof
zgIC92evbmeso0Hz1wbhYyUEDoQCivAGGriEWkYs1BG4kjdmQ7IGmZ+S6zub
JgKLN3kbbNakgeRT/8/eLQR+7aIcaLqZBq4bbmll9RB4VnMppl+bBoEbWiKa
BgisP/s7128LDbjEW2OzRwgcVfy2lkeH5G+n6FFdJoHbw8OHnmyjwYLRj+f+
YwRWNXPmUNOlQfJJ6n2XSQKfk9sjl7+DBvxj3/l5ZghcOCi1/fAuGghqnBS1
nCUw39txk47dNOgvV06wniewxaWas2cRDXTXbkmnLBL4ud6L0GWggZ7TSY2L
SwRm8V9Pva9H2rNXVru/TGDdX5aFivrk+qLeeMsVAt9K1G7N3U+DFfZX15tI
3OAqMKV3gAbqvgd/////H+rmQaHmgzR4t9Us8f///7jNYzUXQxr4Hlds8SRx
Xmmc/sxhcn188a1s0j5b5Hn7kCM04P0u+DKJ9G9kceTymmM0aDr2dM8+Mr5Y
hXWPXx0n6xVSbBxLxt8/zPZ2hwkN0gNj+xLJ/LTetVXXmNLg48zsrAWZf+CV
vAEbcxo89Qh8UkTyU6F/j41lQYN9Y4Hf20n+RIXcZK9b0sBYTSI8g+TX7s9e
HYoVuV5XkalKJ3BmsqxxijUNzr7R/WcxSOCZM9Me2rZk/3h9y93eS2C9/37c
KbUj6xtXoVr7l8D3FjNSzE7RIDVgi4NIK1mf+zZ//J1owBfjap5bT9bHUmdi
lQvZz+ov1wtUkfWhUQTjTtOgq2/b1JpSApvnlep9PUMDrYs33xz8SPbv1QRb
Iw8aXKTkFHq8ITDD4GLAX0+y3suS3HszSP5b1XNWvGkwwCq4xhFH8v+cqyrK
lwZX9E//YUWR/Ht29tHOk/53qLyLDCXw++UH0vr+ZL896Ic+fwL3Ks/dCg2k
QbjeBu2xYwTWZDYmSV+jwZ3Hs1znyf14+ePr/Mzr5H57vV7s1Q6Sr0OnxmqD
aHAyxs5okwqB93pVWIuE0SCYurg/fZKF51tGDMrCabBb8/6r7AEWztsnoH3x
Lg0+m/zosvrDwqrSxqv/3if9t+S5Z35hYYGytryMGBoE3cCFSpdZuFxzKck6
lga77C39nM+w8PU4hQiheDLfCguXo5YsPOHl7HAhgQa2j0o/yW5l4RZpliCk
0aD4s35VCp2Jo29R5iZe0GC2YGVQ/Q8THya0+1+k0yB+Rr3ftpSJC8su5vNn
0WAcOzmWxDNxmje7659c8vw4dm40Yj8T+3wXL/LCNJg717zLMoKB1bW2ZdGK
aaCcJb/12TkG7os/GdNcQgPT0zMi904ysIVPoueOchpkNF19GqjKwLtk10vz
1JH827ynRBaM4tW+O88ltNEgzk/jMW6l4ySqo0rtNA2U+s7K57cN4x3/bdB0
/EeDiihm+/P8Ydx8aGrb7CwNsEe205H4Ybz64p3DKos0iMkalBqxHMY+PzPP
BXIoQb7xmLx+0xCGO5NFGsJK8OTYndnGgkHcS9yyjVyvBP8OPwopc+nHKqXp
MUetlSDkXNvL8wc7cb3GbFqHjRJ03OOdSR37iwNiDr53t1OCqbAdvRGxf3HN
mZEfdxyU4P7y3sHbQx34HGUDL3ZVgti216I7gtoxts25sumCEsQX1ZSfymrB
VrN5pyiRSiDqrsP9obERR20sUW8sVIKuOG7ackI+Pj3J9bNKXRk616+XPbLY
hOwy9ettNJShUPZ7/oh1M7JwuFVDbFSG/P1KQ6Zfm5HBD85yic3K8HK4dUvk
pV9INYvjq8M2ZagYxUOXJn+jAUe2F3P7lMGUuBbq3dGKnBsXAtRslaEgZjQ0
LLAL2YTt9C+wU4auVVdur2nuQmZw5fyxU8rwueOs8WuJbqSfM3/Wz0kZHh1n
87ng2Y1Uwucci88oQ3h96L81a3pQ395/Rif9lWHytvMbC9de5Jg7oRh2XxlS
jpWr/+ntR55BpouGD5QBtf+nZiw4gPxM8/4IPFQmz/v6teHbBlDotN+9qBhl
qMqpo2yLGEA5unMLTxKUwXblXILXpkE0V7zy+2WWMti37M4fdB9CHA9PvXPL
Vob4n8b7JB4MIQHn4kj1N8pQDVk8Cx+HkDxPsH7OO2Vo3fHPjc4+jPQNed59
+KIM+9h0Vhk9GkZRjQKRZRUkX8Ynlz5njpD686zbnSpl0HTYflC1dgSlXqjf
d7CGxCaTI/uYI+ijZNR8Tb0yeFbR4+5p0lGHlZhb0y9lGOfL/2KRTUfr+qT3
9fYpg3HxiVTbp6NIK++yfNqAMrDa1kY//zSKdtxun3MZUoZj1cr0B02jyGhd
wtsROhnv2uyrXnwMdM5DUX58nIznyQZuyQsMFLjr5ty7SbI+bZdXv4hkoNuC
vc0XppVhyIDW3f6SgWLfpEbMzirDCV/x36iF1Bc3uFzz55XBMPyvtecYA2UZ
u+gFLirDc8vZW2g1E+UplcvtWVaGBcmmVV8UmKhwUnVuZUUZMpvHnrboMNH/
AKEXXuM=
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   PlotRange->{{0, 10}, {-0.999999941761652, 0.9999995837354044}},
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], 
     Scaled[0.02]}], Graphics[{{{}, {}, {
      Hue[0.67, 0.6, 0.6], 
      Line[CompressedData["
1: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
R5CPwvzEx90j6FTYNY3SuyNI7oGC2BuTESTIvRJvYjCCjPSvmt9/NIJsDsRe
7h4aRmn1/9r2Do+g+J8Hjw/IDiOnwQ392emjqD71Za6f0yDqsW7jLa4cRVt8
QqM4tw+iE61P1WsHRtHTMy2af6cH0O7q4buDMnTkvWHg28G7A4jzY6KIhC8d
helvqyz36EeRnjSd2+fGUBHrg2fe1V5ULCb9ao8IEz1v4dxuSW9DfDQfle7d
4+jCp+pbaf75qGJfyBavg+OI79GwR8yWz+jJqdhd8qbjqNnSN2l1UzbiCM47
dMZ+HP03YXnkhWwmWvjHuPz79TjaL8RknIyOQmMd5kk/OSbQoZmu6fjAJFwT
qbKhqGYC/d2699qp0Qrsn62x7VzbBKLqqQdtoVThw/W6e/4NTiC2tfc/3dSq
xqWrrAz2rUwgZsOQyBa/WlxwK/hq3rZJ9Hq9QtFJ4V84zWw+OfPlJDLeHxOk
FNqMn4tUb3xzfgpl7L8hwrOrC+fvks856jSFqnZHiJ0o78ID1tfRkscUmigw
fN9s0Y33pomZnYyYQuesRexy9/TgEQOre4J1U6hJqM5Dx6QX73/E/Hl37zTi
0XLT9bnWj50+IEsVg2n0+fbbzd4p/TjqV8hAk8U0Kt71+svCWD8ep2rOb3Gd
RkeM56Uv2g/g2AKvtUNJ02iz21nbXrtBPPdX2M1U4i8qm9U8Jak1jJXkbVdW
lP6ihT+mW3Rch/HRA9l+adv+ovjnjfVVycM4MfRULK/xX2QZ9LJYWHIEm255
U1746C/aYCVjS6OPYC+LKROHkL8o/3XznWPyozj53sEO6bi/aMVOzKb12Chm
qxkdv/nlL9pNdN75mzWK065sl9k08RcdHL3nvseFjluDfN61/vuLlm1is2Xi
6Jjrc4v6E4EZRHnS3GJUQ8eW3B77e1Vm0M5L3Dvi1o1h3oTvDhHWM8jtJWWo
o2YM2/4xw5w1M6hWid+sfoGB+aJ7HV3aZtCVljOVcXJMnGXpJNc9NIPS3up+
zNVmYs5237tf2GfRlbzjLz/fY+J3rV92uOyaRTt/7h8ippnYKPJQX9eBWdS0
S5l9UISFp082BRuZziJ+P/GHsmosfPA3k6niOIuqPpfwGp5n4aFmxaSuhFmk
n33kVjRm4efhaRZGmbMoO+Eh06+ZhTXNtbi/fJtFFk9UGdl0FvZtOmEb3jqL
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
       "]]}}}, {
   AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
    PlotRange -> {{0, 10}, {-0.9999999105130517, 0.9999994313041395}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], 
      Scaled[0.02]}}]->
  GraphicsBox[{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
R5CPwvzEx90j6FTYNY3SuyNI7oGC2BuTESTIvRJvYjCCjPSvmt9/NIJsDsRe
7h4aRmn1/9r2Do+g+J8Hjw/IDiOnwQ392emjqD71Za6f0yDqsW7jLa4cRVt8
QqM4tw+iE61P1WsHRtHTMy2af6cH0O7q4buDMnTkvWHg28G7A4jzY6KIhC8d
helvqyz36EeRnjSd2+fGUBHrg2fe1V5ULCb9ao8IEz1v4dxuSW9DfDQfle7d
4+jCp+pbaf75qGJfyBavg+OI79GwR8yWz+jJqdhd8qbjqNnSN2l1UzbiCM47
dMZ+HP03YXnkhWwmWvjHuPz79TjaL8RknIyOQmMd5kk/OSbQoZmu6fjAJFwT
qbKhqGYC/d2699qp0Qrsn62x7VzbBKLqqQdtoVThw/W6e/4NTiC2tfc/3dSq
xqWrrAz2rUwgZsOQyBa/WlxwK/hq3rZJ9Hq9QtFJ4V84zWw+OfPlJDLeHxOk
FNqMn4tUb3xzfgpl7L8hwrOrC+fvks856jSFqnZHiJ0o78ID1tfRkscUmigw
fN9s0Y33pomZnYyYQuesRexy9/TgEQOre4J1U6hJqM5Dx6QX73/E/Hl37zTi
0XLT9bnWj50+IEsVg2n0+fbbzd4p/TjqV8hAk8U0Kt71+svCWD8ep2rOb3Gd
RkeM56Uv2g/g2AKvtUNJ02iz21nbXrtBPPdX2M1U4i8qm9U8Jak1jJXkbVdW
lP6ihT+mW3Rch/HRA9l+adv+ovjnjfVVycM4MfRULK/xX2QZ9LJYWHIEm255
U1746C/aYCVjS6OPYC+LKROHkL8o/3XznWPyozj53sEO6bi/aMVOzKb12Chm
qxkdv/nlL9pNdN75mzWK065sl9k08RcdHL3nvseFjluDfN61/vuLlm1is2Xi
6Jjrc4v6E4EZRHnS3GJUQ8eW3B77e1Vm0M5L3Dvi1o1h3oTvDhHWM8jtJWWo
o2YM2/4xw5w1M6hWid+sfoGB+aJ7HV3aZtCVljOVcXJMnGXpJNc9NIPS3up+
zNVmYs5237tf2GfRlbzjLz/fY+J3rV92uOyaRTt/7h8ippnYKPJQX9eBWdS0
S5l9UISFp082BRuZziJ+P/GHsmosfPA3k6niOIuqPpfwGp5n4aFmxaSuhFmk
n33kVjRm4efhaRZGmbMoO+Eh06+ZhTXNtbi/fJtFFk9UGdl0FvZtOmEb3jqL
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
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   PlotRange->{{0, 10}, {-0.9999999105130517, 0.9999994313041395}},
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], 
     Scaled[0.02]}], Graphics[{{{}, {}, {
      Hue[0.67, 0.6, 0.6], 
      Line[CompressedData["
1:eJwU23c8Ve8fAHB7K5fL5RppShlRmvJ8UlKRNGipkMpKRkOlhQZFRlLIVvhK
koTkMbP3yN7zuvceK2T+zu+v+/rc85zn+ZzPec7xeb9e12rLGyeucHFwcFzk
5eD4/+eHh5Z8GlYvdfTu///zP53CekXD04o26MTH+gVVRS+0/DvHQ1HxLuI2
+GFwf9V79CHXZxUv+X3OtNJpR/kEZL/31vUZ8vvoOrnjcZKZqH7e+s3YqgS0
89nq5z+mSxB/W68Sa1Um6rN+5rlwvxk15/66xRzORKtZij47tFpQ4sd3BaNf
s1Dx4ZKpu6wWZORsdImxPxsV+gY/nT3Xht4KZr0duoaRf164pbRyJxIPK+Ea
/5OPfixnXJwo6kHzK9ITHLULUMzE9xgVmV7U/yTGeCyyAL1Xk7iWZteL0q89
DCdsCpHH28EfESv60Lmt23az54uQwZ+Hu3wN+lFUWYTT6KpS9M2aV1I5YhBN
vfu+qetVKVpjwfM7bXQQHbxW3lf3rxThhPCC7TuGEJN7xiSrvgxJ2cRwi5UP
oZ17jXZ7Pa9AWrYVvVkDw+ilsNWk21QF+mx4ZDxUeQR1ttxNcrSoRCntYcfO
2o8gz9txCmf2VKF3S7cnzNgjqObLApcSUY1CL5S6b+9nIHEkeFFUrQYFa8tf
jVcYRXs2vNn93KoGUbcLjnSdHkW+UwmT92prUFbgxMOg36Nom3/jFcv/atGV
go3sxjdMdNHVXLe9pxZp19o5qBcx0fNLowqm0nWoylTPfs8UE7WqcjYfflqH
ovlu2FoasdCjMpUjGpfqEedIxau0CRaK//pjw39B9UgjpyLJRpqN6t7pcq+v
qEfDpZzsPG02WnftTLb0rgbUL5VgZPKEjYyM+t4F3GhAsUGbTvpEsdEdLYdb
Ih8bELNw7X7LXDYq4/ZU45BoROd/cZh3/GOjKcYK4XuHG5F9gN/EYyqB5Ove
D00+akR8Ziu0s1UJdDBzXeH19EY0yblI89UjkGPkl8ghZiPaoLTX+e95AoU8
3/3AYm0TCk6U0R93JFCBQ9HZtrNNqNHmZMxjTwIxTYy3m/g1oeIDKrHRbwkk
tbdNvPp3E5KzdLpj+olAsO4qcWixCU188zwfmk4gG+Hx8vytf9CR7CsRjoUE
Cpi4H69t+we1+2VGN9YQKLuF72l65B80JV/XWNpGoMFcf4stf/4g7vi0TMMB
Aq2Ml9NJFG1GgS9XdV9gEWjn60/0dQea0bU9r0cXJglkeVtz5sO9ZvTETfe1
8j8Cvbrwq572tRn1du193bdAoO8HDqX4DzWj9rtGuZuWCdS5uf6VsEILam0S
FlgmYwGJizZPT7UgN9UWM3My1pwb1lv2bkGCVQNFRosEOt/jsuZuXgtaW61y
voyc37NkaWlipgWVzrjo1U8RKPmLV5u9Wiv6Png4x4ZNIIY449URi1Y0OexR
qzBEIKXbR3Q2vmlFkaIyt/07CWTVkkjwFreiHe6uXPkNBIrUFo7q+9eKbhaW
tKSUEqg9wu5Enkob0s3os7v4i0Ay3BXcEZfa0MG9J7TKvxDI9KrKd7eANqRz
QB/PRJL1LH119VxRGzK3Cono9yNQlQqLtnO2DY2N5bkGPCKQsN/RUsnN7cjg
dcU/zutk/qYrVGr92lHT7iD2xgMEys106EguaEfqj5SXe8j9sShX7ftquh1p
z2iPX5Ii0O2+1+P6Zh3ow8cY7eQ+Nko9OBa9/nUHmvtk/PZxCRsRCcanuPM7
EHu7XJ1sEhtZO1J+5Ch1ole8yq5fb7BRbL2Tddi5TqS3kkcv+Rgb9Wyvk7nn
Qx5fJZPpqsZG5xYD3LQmO1HV22c994dZ6K35pKrEhi50YeOOsz8KWKi+4GTX
2JkulLYxfanoAwsZelN1k3K60H7X5vb/P18RwuUeFL1udGGaP7s4iol09t43
e3yxG3XyDK4rdWGidofNWsSdbqT6MWMp8QATSde9HKxI7EYue02e0PpGkf87
w8MvxHrQo72PQsrER9GWsoXVM8o9KPwkvwRfOwNVzSfNXdnfg1z7YyU1YxlI
6JJo0v7bPSh19/c3VhoM5LG+asVyWw+6KuFe6oJG0JrTD4eu/+1Bf6fPvXXh
GEG5L9Ry21f0opzPud9u5w6jhVFfp6x9vSji2wCP/95hdCv1WMOtT72o261x
3SWVIXQN1b5nOvehE4KZN0s7+xFH9HRW28s+9HNrRURpQD96xyPXXhbbh+Sc
Gsc4D/ajktKrCglNfYhi+enbhsQ+tPHUQvSV3f3I5KaX4hubXjRsrZTUyTmA
dHTEz1q87kK2AQ9yavwG0eiQSleAegNyGFDuS0seQVwWePBj4FfcfbFFIK+U
fI+a67R9n0jDJ5tfqFX2j6AZVYULjcYZeGf50N0BOgMFzhrLJglizP01Tkzq
OQOFfDQXKdj2G79zW61z59Ioeqm2Wn9DSi0Wmq657HFvFK3ddmDXt0d1+MGN
x16vg0ZR+7k/P+yN6rGlZVfDp/JRFBit5wojDVjl0Ae75h1MZPI+X8pOohnn
Sci83yXGQntq6rQnNTrxNp+SHL3NLHTrwkSe6Fgn/sjn2n/8IAsl34mP/Z3U
hV/9a1K3dWOhlQnyxKxfNzbtevM7hNxXZssjq9Yu9mBGotjUPPneDKvi6Rv7
3I/N1uXKCLSzkY3yldtCHAO4+sMNRJ1ho//sfy9tPT6A0/yqvFXI54JL3PNe
/NgAfnT71eoL7wmUWNV7Pm3tEBZa7anUtXMMzUzs8r12egSXaPurP9QbQ8mD
+8P83ozgZ2fCd8ifGEP33OYXs2pGMJdfhv55uzGkR71lK3SQgeeWmNf+fBhD
qzKPdZ5aN4oz6HM3bieOoa+Z+XsOnx3Ft7fzu0r+GENv4z4fV/UZxRPXV784
WTOGWkwUIrLHR/Fou0l8Ndc4Sv3t3Jf3mYkTZy1THFaOI2Evgc7FFia2pjpm
iMqNo9My/KF0XhbuN/AuMdAaRwWcYanEaRaOvhZcw9g3jvqNXjTEPmJhc4/Y
Zi+jcaR1NUF/20cWbs/KGS6+No4qDOxU2wkWDmkqH7t6cxx92Z6TPy7Oxmcm
mmd5n4yjqITf7LZtbNygPClwIIQ8P5FSs/EWGwfocVD6Po4j9ZRNvF6BbGxs
ISrj/m0c7aXimowUNq54p6ScWzGOjr1jJrkPsbF32jaNSy3jyLlqRRidk8CH
avbtWhoYR65F9Z0PZAjMxzTa92FiHOllOLj/t4XAhfxmh7WXx5GVnXxk9EEC
u6+1Od4mPIEcNmhcsDxPYEC3z96TnkCaWrTREQcCZ9/2s8nQmEAsw/L7RwMI
fC/gg9NpnQlkOqmnsDGawDuTE+9OH5lAK9v/1RSnEHi69MeToNMT6IDLMS6V
HAKnDRR6bbOaQIa6UyqnygjszFnnX+84gaYVuv+gRgJvke967/xgAj3vPvuW
3Ulg9k5mFMV7AimFzPObDxH486l/CSlvJ1DwufTmQDaB7R35Uo/FTCAJp8Zc
rykCb3olkcX+MoG27eB8uu8fgYc/Keb7ZE+gX5f2TWctEPhjgWqZSukEgrKl
8b9LBLbq2l1X3jiBbrbxWE4sE3jNvH6rbe8EOn7OXTuFjLulTHoFiQlUWivo
qU6OD9e0ZMTPTyC1O/76jvMENjO6MaEvMIl2BjlHO88QmG7rNjdInURF962z
t08QuPmpF9ez1ZNId8q3NHuUwG+j3gqtV5tEI7vNhXj7CXzqV4x44e5JVOWW
Wr6yjcDiLSn0y/qTiNGadrWjhsA1U7/WcJ2aRNsmRsGhiMC+YuWboswnEXtY
tSI/g8CZO+S/GzlMory4jF0xCQTuv3gDLdyfRMKmcjco7wks9iyvNMFrEunE
SKmteE7gPZ8lTp0OnkQbtuodDnEh8NWGK508ceRxQbnY9IsEDpj/YZ2aOomU
17ZpWh0i63fY7IFo1SR6cqhM7A6NwFSnZP6fbZPoz4xoWOcCG6N3HAHWI5Oo
lKJf39bNxm8HYz8W8Eyh9ZoqN8Ni2ThPdGaLk/gUKu0wCLf0ZGPmtsM/FRSn
UCBl498CSzbe78GqvrtnCl0XyrpwUZaNHRLROaXDU2hrEaSG/CWfl1r//gbT
KXS8bjnDtYqFx1Zt/6fuPIVmb56UWO3GwuHZD9cMxk+hgpfrWWeKmbi0ryYp
MH0KicsGnmp+y8RTQmt37CucQi+feroIXmFig7PFBmFdU2hHSQKH9+Ionv27
8tYJqb9oD/f6XP1Vo3itvOXy8tq/KLRJsTu4n4GNDqR5fdb4iwrUN/t8jmfg
uIAz4QJH/6LoFSzfbaoMfEI9qjjH4y8y/lBwhHPjCP5srUnfPP4Xlehqntw/
NIibX3vGNi/9Ra9u01tPhAxinh9Nas9EppFayw/aOcNBfI73/v4epWlktS6P
8+LnASwQXWAffHEaOYTZq0Zf7seWbacwd8U0olXqe96K7cFCoT3XnVqm0f6W
FD/nIz049ZyDXNfgNLqt3ZeTRHRj7tbnd7M4Z9C3HbSnwzu6cWxz1lanHTOo
qnT8UNejDjzYqBjfGT2D6DjkYOnlP9i2humXeXcWTXc/teMbK8TifneR0vNZ
VByiav1JvwBnHeNjv3kzi0rimmVvhOdh4epVBo5fZlG0Vefa+4HZOKnyBK/S
wCy6ueqWReCVZMwuy7j7xvgfSn9uXepx5BNyKvK0vKE0h9bfZUhNKtcghf6D
fNNb55BYk+lLn9EaVM4lmOgGc+iGJlDdk2rRevAZ9zo7h051xrWcV6lHLVlB
j2NfzqHo34LjPGRfvS/lY3gLMYekEW24faANsausdc0X5tCAwfftqe/bUShr
0+CgwDyytNUVu2HYgf5u+qI6tXqe7LOOiXgmd6KEuB/ZK07No0oLITn11G5E
CS1p3Z8xj2R1+vO8DvWhnEzvh2WF86hpNGB4zbs+ZNdsuOZ47Tzqrv6PMT/Y
h4oka20uMuaR1ds/Lhbu/eiuX8usq9wCojdpD376MoB6njKkkh8vIORyHX/s
GUK+sUlZ23wW0JtO3VP9a4fRngKHiz/fL6DX62O3aF0ZRkEck3ElqQtI76J2
MR/ps8P357f19ZPn83jFrm8ZQV8dRU5KH15EzCcfdp30H0UVIRJ3P5suovXx
STndxaNosJAeoWu1iBbpmeOqi6OILqM8av9oEe0IXGpcvMxE2/ZvoXD5LKKv
kQUD94OY6Nj1HTuCQxZRxI168xTSX555eh553xfRZ91Hs1vXsFD4qGGCacEi
GnxvxXhI9ocZkqeqR2sW0QGr0xN37rIQy8ZSVoq5iBLf4SD7chYyFX/0zXbN
Eop7PZKneomNHLWftSyrL6F49kP/9Mds5H3VZ/nN3iWkd+x8UlckG+GsUAN8
ZgmxM18IiHawUWt/tNOpq0vo6pPFwBX/99eKxOARlyWUyau4nChBoI2XM/ok
Xi8huT17M7+Q/bauDxZMCFtCI3d46yVJb5n9+K2uk7iExhbVLcVJb93uqTSp
/7GE7sfk3Yz1IJC/cON966IldLNOXLk8iEBJWu1Ri3VLaG9qy+enHwn0+1Jf
cUD3Eup6s1W3/juBur0YLCX2Elr56bPWtwICzX0bl/g1v4T+6zUcXkd6i9o5
u+uE4DK6sD+oTIn0lpoAh/mQ1DLi3et34Wc/gQ5p8j9zW7eMol3qNLuYBLps
tiKJormM3NMeMwNIbz18Jln3ES0j+y2n9jbNEuhditzsnqPL6PP0h+F40lup
rWsVas8to4KUw/lCpKcqeDYfuGpNzhfelTxPxoNqmrbzt5aRbf3TmPtkzHF2
l5+fxzJ6lMrx0Zv0Ft0D0tf7LyOJz6kVG+cIpPVZvz0rnMwPQnVM/xLI+I8R
l3HSMtqjabJVgiCQLafpxoFMMj8J6uQl0luemy8Y3SteRgILkU3apLfCTaxu
rmxcRrGvTPUT6wmU8cguJLZ3GUlvkcPxxQSqT3DO3TW2jJw/mJfszCIQu/7u
YNXiMhoJlVg69x+BeB4BXyovB1gJRAiLhRKIQj3w3k2EA3jku5LOeBFIIUFf
RV+CAyjzMslat0mf1hudaFfkgCebnU+mGBBIz/rEwEclDrjxu6nn2DYCnVg0
cXVS44D6j8mxz2UJZK90IZxPmwMuvmgzKhxgo7vZ5hq1uhwQ9ZsWXU766tlx
q8LQwxzAaL7L6ZjIRlH37RhbTnOAfGeufZANG23JFZx9foEDWFPDdQ6H2SiX
J5636zIHdOef6KJtZKNun35FH0cOqLnJ0uzsYSGFyAunR7w4IELY7tRlfbJv
7p+3Aj8OQOeylXrkWWivcohz8FsOKE56fHn3JBOZpTb56MVwwMJnrbqnIUwU
UnisMCqbAy6XFexMbRtFmwTZtbP5HHABa/ynnTCKMo++6jpWygFV1T83fL01
ipqbSuYWG8njBe3nzYVHkdTIPo1zBAfsdz4nLLGJgQJEt4WLr+GElk8/9X9v
H0ZrTtT9Z7OREz5F/Kc+PzmEvr51zMxV44RbGlmXUcoQqln1ucFhDyd4qK03
49gwhFZobhAuP8UJjwYU9L/yDSJvU2lXj+ecsK559/TxiD7kHrFwfIrJCYmZ
UqVxz9qR8ZYMp82TnKC4beileEMbUshz8bf8xwntKQa+zoptKKuXUVPDywWl
x9/cVkpvQRPrW459VuCCk5UPx9c1NSHLpO9HrxpzgT9qMnjFrkH7Mh0ON3/j
gu/UZ+KFlaloxZFNNiuzuGDkQDhN0PoLam8deHEwlwuCU/t/ntuagFwXzErS
KrggxO56FvZ9j1KQgb7/ABegbgosbnyHFX8r6R2hccMzZReLlPoczFHfDdn3
uMFUbsdlWn099hzJibr3hIxFo2UbIhqwIMcHrl0vuMEoU+PsR7tGLK56tvB7
EDc0rvLYdY3jD17/vFb/Swo3/LIwbLsk34qP7Mk3ih7khjT2t3m8ohtXHY/8
Ys7iBnd/jagMu2580vqh2Kopbpgd3/J2urgbmwXtrgvl5IFf82eomg97sAOR
ahIkxwNOVqaV23t6cWBMjNmLEzzApeRYI/ZwAEtnPfl18CwP7Il+EfOscgCH
1VxS4DXngbvncRCP3CD+uCjb/eQ6DxhFKo8LpQ/ijNNvLt9/wQOzd3i/9nYM
YW0H58Jdr3kgVk7y4u71wzjP03j9bBAPtLzXePHIbhiXfRUZuhnDA46f9/cX
TQ3jduGntg45PLA+PcuW/W8Em6+5XK5SxANPRBPPXdjJwAM796mMlvOATJCs
RvQtBmZfWWRda+EBiZrg7GgmA3Pm3nKymOKB1+kqDtsrRvGzppN1q+Z5wOuP
q6kwJxMLsTS2dnLywq0KnY6obUxMpbOnzq3khXCp64lC75h4w82rrqc28cL1
nMIY32MsrLq762TEFl5IuPb3+uU7LLyN44w6YzsvOIzyvaKGs7Duq8ODj/bz
glbJ5nreYRY+fCI/r+wwL+SOn1TcL0z6SHrPB0ljXijvixY8rcrGF2NVTv1n
xgsVTfO3F6+z8RXbOPVpS15w+Sx53+cVG9tvURDeZ8MLtum+skQCG9/LXpnf
dIsXPCb5U9f0sPET9xcfVrvxglhT+NOJOTZ+cYjzrr07L1hb/0l5LUH28w0T
6lyveSHezN1AbR+BP4TYCR8N4oUUZDWjakrgWPP+weBQXgg80uwyY0Pg/zZc
yO+N4gWOFs5FLzcCpzIbP6jGk+O3C7X1+5D9fKrRXddkXlj1U8mSP5zAua7F
pwrSeGHmeuzEWBKBi3Vgy4qfvLC0tX82MovAVTyZwmfzeGGTpy1LqpjAjWUa
QzHFvFAQ23XqRB2B2/0S89mVvHDEUTL3RDuB+0zXhu9q4IX5KOEK2gCBGXJh
dz1beaE4YXJ1FJPA471Uk+puXnjNv+0Om/TLbLzPFvoQL7xXtfNZJn2z5MAn
coXFC5wMJ80G0j+8Wo+GvkzywrbTF8Ce9JHI/Ez+3D9e2Hny8Ydi0k/ieY7h
ehx80P3AXnuQjGWej9z14+ODb78mZEvI8YpHLU3aRPgg2WCt/nXSZ0oSbVs2
SPBBtt7RxsZZAqu1nBRxkuGDxeLFEU7Sd1oRFUM/V/FB76ultHEWgbWv6BXw
beADReop57hBAu/fnBN+XIUPIo332MqTfjwyvv1emCYfOHVsGD/bQODjP76Y
DO0k88n8ee18KYHPPNiooYn4oOlV5e41vwh8aX+UyAM9Pgi/ca4v+QvpI0H6
cLEBHxyAZ4OcUQS+GSQcceEMH6RHDB1dfETg++c978Vf5AMzyfHZj9dJP69e
NJm04gPXmG2vZM4R2O8zW8TLiQ/uXA14YKZO4GCXa8P1d/iA+0mGu5o06cld
3QUKD/ngz1rFnIplNk4qqr2X5s0HGR7j8U7lbPzt5RHTZT8+CL77/uK9L2yc
dbxA40gwH/hdGjU9GcDGJR1pw10xfACbPT7cO8XG/X+DTYV/8cEwa2Ast4yF
o/dtdeko4IOkxEtqOtEsfMmn6vWXMj5gR6gXWrqycOs63tKTzXzw+VxiTIIi
C9eedN4TNskH5awhuGbBxL4Romcc5vhgpWNYz2k1JjYcjb8JnPzgc4Yvl2Nu
FJe4d33uX8EPtYrZxZ4+ozjnq6Gi6iZ+OD/stS0sjoHdFoe0l7fwQ6pT4ss3
1gy867DH2dod/CC8NP/r7CYGTuvODLilxw+PVCkU08QRnLhSiTfHnB9a+if+
WYcN4+DrnAyjYH5Io78O/WEwiE9lhvGtDueHV7FlauyFASzOu3PtZCw/qJq3
8K0n/eQb5mAWnMoPt7Ymi0ULDWDP8raqrkp+2EsZrt2X1YcdldO/OfIIwNYm
jXsPSC8dGbB9EOAkALNpzvni4Y344IO1SQdcBcDFLl+RVd+AdSXbW6cfCoDG
uXOCnQINeLfe0Z3nXwnAP9F3EkqOdXhTnPrk2k8C8NiuLz7atgoLX5my/t4u
AG4d4ntm9ufhiv4Hp5r1BaGBlvhKkpGKSty2e3gbCYKiXuW0FaSjQirxVdtE
EDi0+/5mBWWi7APmK6MsBUHk5bs4Z4VclBSrW2bzQBCGd9818Mv+jXys+GE+
VRD6Xvl3bu+tRUb9fpsVFITgpaeBrqpuJ6rY3N9gtk4Irpsr0r6MdyIDlx0P
QzcJgbyJrA53ZBc6xNVZI71DCNAPTg5Pt26kq7j5toSxEBDVdVsGK3uQlllR
roC7EMSzoh+cPdaP0mKkbfVfCAG/Xup5lbB+pDlqJ/HMVwjaex0Ntg/3I7V7
4le5Q4XggLxbXd+DAbTx3SXhpW9CcCps5VnTiEEk1/DPZHJACGzO+wrtyRhG
IbJHlzWYQnBj8999WjPDSOZyZLzjhBBIrLGgamuNIKmJg/OsJSFoEqhWvJo8
gsTE3kQO04RhQ9wPPuYbBvI9PXRYSUEYaiyTeIQrGEg0YvfklXXCMB02kL+O
axQJqfXo9W0Rht1PHQzBbhRxG6qNdhwWBheL+EvdW5jIPfDJGzljYYgZvzr4
4RITcbQ17D1vKgzcr4aqDvow0YLNfb9mS2H4Pb217eQAE937WrWLZiMMyigw
Nm0lC/2bXd1nckMY0jUX6HM7WWj6eYlW/X1hYL8/UaPygoVuVst2UdyFwe3m
GmFaMgtNSt14YfyCXF+9k9FVx0JjcZJtlW+EYVn0q6CADBsxCiwfl3wWhm+1
f/R9gtlolX+zrW+aMOw4LmUVn85Gpy4amZz6KQxyESW6lxvYKGd216buEmEw
EnjB/U2YQJNFX6gfq4XhSoO2nd560kuB65ftmoTh0Z7aSOe9BApQpTTM9AmD
3uTrLe9tCFQ89yznF0MYFvst/PweEGiheCHeY1wYOi3vlir4EUgjyDnw8Kww
+EgL8O+PItBVy+EHK5eFQXjVHc+FFAKFql+0buQVAePyGz5HMIFqFupPhIqI
wJP8vgcqFQTiKzu810JCBFxPUvOj/hBoTzBWUqKLwGrJ900JPQRytNISZymK
wPvSK4cOMAj0UeO/hVQlEQh+Wp3mOE6gtiXFIVc1EViS9S9VmyGQWMXbWh0t
EbhaWXXg4Tzpgfci2TzaImCzR+bvxSUC3bvq/rFMlzw/4kZmDemhL1tn/fwO
i8C43r4n9WTcz+Fw39RYBBhHHAyvkeNlqvquyJ0Wgdow/c2vyPmMQs8a914Q
ga/gq6NLrudhXb073koEUlqdfniR+WRo6a13sBOBqbu+fyzJfFlcP1ducxYB
9fiRsUryetbUbJn75yoCM9nsK+Xk9Z7+8LEfPxIBwVu2CefJeryylat++oyc
r/KpziOyXnk7AjINfETAd11uxvavBJrmEYilvBEBgbDhn+5kvTfXPfD9E0LW
p1Bq4TJ5P8wjJl0/RImAw8vovW3k/Qqyt7l8OV4Ewh1kTUbI+1m2q+uo8hcR
sJrRUXp9ikDbGsrWfM8WAf3V67riyP1gEwWi9wtEIExrqFNahPScQ/oMlIlA
5U9UqTTORgKC0RUVf0RA5PjTswo/2GhvE+1HQKcI6BqJ+Au8YyPnGJ+oMwMi
sL5EhxF4h4069t693T8hAl2n1XsDNdlIXJgwT/wnAvdbdN8Jr2CjQ81WBo4c
olC4xyt80zALpTobKy6IioK6V/rNK+9Y6NknpTIJZVF4K1TqyznCRD9vfkhr
UReFHb3MyMFMJhrbJxERsV0UvojtBXcvJjrXvuSy+YAoiLly9AysYyI1SpP8
/kuiIKtePRVuOIoGfQbdg66IQnlJVb4xbRR9EJoZGrIThaha3DfZzUAiPNKp
r1xFwavLP07KiYEY02cPNvmLQoz9oKLI0xEU197hYFMoCne17vUXPxhCZmfZ
9T/LROFgsmtpzM4hRG1a2rmiVhSW4978FzwxiNyrV3F/6xCF/hnfS3WXB5F5
vkXwwrQorE29A717BpBc/AB+rbwCnp8v914s7EUN66bX9aqvgEKB/fQ05170
MorPe9v2FeB1Lvx06qpeNBeidKpFdwXc4LnTHHCnBzX72AyvMVsBOSKvLsKq
bhTowhJL910B3VdEPF9FtyIh9NeifXIFnL8ZOPbjciVy3bdRIH1uBWzlPJR5
PqMcDe4/n/yacyUIOTYdzxIuQ/mH8uZ0V64EZw/sP538G9074ROYsGklnDkx
IKhcj9HolfVFty1WQs0WufMv+QJQxSuTjZTqlaAW81jedqEE7379oorRuBLk
3m0qqkoow/H+P28Wtq+EUxre0XMmFdjz7eq8O4yV8GjTpP/ZxGqsUDOtQnCJ
wXf9TzZeivW4qSW/yERBDHa3fq2q827B+qxzM2tMxODM0SOKrum9OJzqUf/o
jBhw+ZornhHtw1N7/vvSfl4MNnWbpJhf7sOR3vPX3lqKAUfmetN2kX48pxTW
LOgoBk1Xe7MlTQaw8bHCtKsuYpDCmF6sjR3AH28z/Qpuk/N3Oj9+PzmATxZp
H37wQAxW/zhqo+07iJMsOzLHvMXAY+9PKZcfQ5jLm/ftUV8x+H3Vy2rT8hA+
81XVOdFfDE5+fXGmTm8Y83I83GT1TgyM6BcKhqqH8cUPCqF/4sTA0uTTgYam
EZxWePDOtgQxUNHUpWRLMrAQ0+Gkf5IYfMzXGXI7ycA/dmNhg29iEGpuUv+w
nIHFmi+55eSKwXJtsu/uz6P46vLzM7KFYlAi8V4tqncUZ29I2eZaLAYSdqpu
FVJMbHOLg6VRRY5/kzx97T4T54ZtLPWtFYN6mb9f6/9jYqlC47jRBrIeZ8p3
zLcycb541IW4NjGg7E83u6XFwtK7S3dxdYnBpaCvCwXmLOxgMS55qVcMFFbv
sPntzcKyKfuqpEfEwJ/z4ZGuVha+ebRX59W0GKxVnu3cYsfGZTeFZEf+iYHZ
Oy411ks2VgzTnNFbFIPZ9J/ixv+xcSXD/csyNwU2UocUeQbZeJ34fy/N+Cnw
t8Q79QQnge/tqr+WKUSBPLsLibqyBN7wYq2iC4UCpZmMg1wGBHb7YrBQTaWA
PseP6mpzAtc1uTSrSFMg5wDr2e5bBN64FJrmJUsBraLkp/teEPjR+kK/QQUK
KKvUT/W9J3CTIdN+/xoKOFMmRFYnEljlJvVw5HoKqJfaSc1mkP14qPb6xY0U
UHvsZGP9m8DN+Vac51QoYBcn4uBE+mhsXyv9gToFxO+xDK+RPuLPO7YtUpMC
HueFwteSPlKAoqMFWhQwmLcV/kj6aDvefW1wJwVMV280+L+PjHRSHgtqUwA8
HFYtkD668mt9iAqiQNm6J6bVpI/ctEO/HdOlwNl9P8vIvz/4zU+xSmc9ClzN
8bcsIj2UtPvZYNAhCvRteCM2TMYFmfPLGQYUeKx+vb6aHN+600mm3YgCRQW9
391IH038GNRcPk6BFWGNVWzSR4I7zAzXmFDAxgz2bSB9pJhee0XvDAVOaW/X
Xssm8E4t/UfW5yngsqNnboD00bG07HcvL1LgfPGjQgfSR1e3aqYmW1Dg0gZL
5i/SRw9TP5XXWlEgRXaotp70UZCG/MDUNQrUG7t2p5A+SkoJWKLZUeDOlmev
TVIIXKguIL3HgazfMQ/LfNJHbckPNC46UeDoha7hGX8CC322toq9Q4GbIvu9
sAOB16h0Pii+R4HTyUOLJ84TeNd/J4MZDyiQyKa1fT1IYOsEnbItnhTYVMnL
3yhD4Mcb0/pOPqfA7oN6K0PJ/RT8SXnxtjcFPOnck+rDbPw7jrrllx8FYq7p
7Sv7ysad67wPdwdSYLX46oLaN2z8N2bZkjuYAmmD1GNJt8n9Gc0IOvyBAms3
eWzt2s7G7uG5840JFLjQM37zUgILh8hvl/yXRIFvpp+013iw8New/9TkUiiw
+UZvYP55Fu4OeWthmU4B10f/BKMFWVgn2L6YnU8BmbZvaoJnmNhUqreb8ps8
PrKwd2AjE18POj23rZQCqu7aKkmzozgsUFf1fjV5/2540LmCRvHca+lA/nYK
HNw3ks2Tx8DfXxReVPxLgXhrxZ+7h4dx/JFy6eezFHjVwfnDJGYYh4jU1bHm
KfDTySHp5IVh/Niv6+BPLnH40qi5k7dqCBu+m1MzFROHVbs83UOiB3Hvpy3L
LzeLQ9gOD8lA2X68ojgsYsZCHPimfjmdrWrHnF4xZy9eEQdumZw3x4Xb8dSR
RIkia3EwHfh5mFe/DbdU/XgecEMcHh13mczPasGxTXU3VB+Iwy9hEfHAN014
96AAXH4nDsOrtPl9ZWrwVd5b3VVV4uBGr0z4dDYO01eV/pmvFQflTO/Vnpzh
uGqnfPXGRnGwjjIx9Tbyx9vti365t4mDw4UX7iMajxFfvWTo9mFxmON8uH+l
42cUF5luEs4pAfJb2x4MzReg/j2zZde3ScDU31uZSbpN6J2JYX7IDgkQ5yy5
UsLxBxneiMws3i0BxhXztIVff1Ba9KH41fskIOrm2WIfrRbkKfj+aeNRCWgv
juF+Jd2O1v3ZBXuvScDarqHtdfXdqHnMZ4etrQSYXM2wYCr3oFdCvWrB1yXg
wpnHt84+6kFTe73lx10k4P7I1LDCxl5UGNs6F/tYAjJ5ltznHPvQZef730VC
JEAw/uR25Y4BtF2z87vyBwlo7tV89mD9IBKagPSDkWR+sv1q8/aDKMWJ78fj
jxLQ8eIQvvZvEC04+mdMpUpA6QpbhWz+YVS9ZSqDki4BrzLHdCiHh1H0mGmm
WqYE8OxgL9zzGkaHHeWyrLEEzAfxv3fnH0Fvb3z62V4uAQfNJPUUZ0eQjbpQ
9r8qCXjTN8zXrMFA2oR9tlQdmX9eQb+/LQP1OWj+Mm6WgPdcHNe4Wxhoi8Ov
nMJ+Cai+OVYak0D6SU0R9wxJgNfcm+uabaOoieWOlxgScM3lpfg3YSZyu34o
d+e4BJTnHxH3sGGiUvv6vKRFCVCe0hJSlWahMJXt+aUcVNjBtg2g72MhR+a7
/EFuKnwImvJlWrOQlP3FAkUhKry5vzS04zsLjWzOK9grSoU/ZjwWyS0slD26
tvCcGBWEtjx7zr3IQpZ2I4VvpKiQlLDR9wCwkdZmw6KvMlSAiw69quZkPzua
XFQlRwX56oCKsYds9MX25m+BtVTwMxYpWspgI/dNf36v30CFVQkpkfqkp0wZ
u4p1lanQHDqUdIXNJv23XOymTgW3b03X5VcRqFrZsuS9JhUilC4c+a5FoOiR
wpJ0LSrMp637pGBAoNsJSqX1O8n838WlnblEoMM23qVje6iQ3lmfbOlMIDll
VqkoooJ+9YaOPZ4EGhs+VrZJlwqHGREBfW8I9NZastzqEBXOvOmXDksl+/WN
ruVPDMjrXwwv/Y/0gvZwa3m4ERVS1Kzznpf///d8eyt+HqeCwi4jH/UmAvVe
i6xoPkUFUQWh39FdBPquxF359zQVqOncYj1DBHoxdKVS/DwVdJVNZBlsApl9
KqlUv0gF97+VMb+mCKR+bXOVoQUVnnj8dTz/j0CdNqtufLaigrljpcjyAukX
ewmxFdZUGNOzKdQiPbX7Bv9XBzsqNDm/ePj/3/+NOM0fr3agglKbqqYZGb+7
SUyoO1NhUidy0GCRQAfv9AX63aKC4ZDNtypy/qm7f7aNu5L1eX86t59cP8at
vPG4GxVU6m7r+ZL5nXiEb6c+osLP/RIvywcJxOH+jSbhQdYj4ttIWAeBkj0/
Zbg8I/ONlSzjqifQheehZxu8qPDASTlu8TeBRLxfz23zoUL9OhEe30wCZb3y
CA3yo0JmDufjtEQCWb++oz0dSIXdRx3ynUIIRAuw6zANpsLCpSrP3y8I9PvN
pYc/QqhwszDZ79stAt0MPrlKOpwK+d4xeJcFgWrD9li0xFIhcph7r+Q2Aj2O
UOfaHU+FbjkLX3tZAqlFr40J+Y8KZnPhAhacBHr5SXjgfCoVDDh6N28oZaPd
ictPs79TIfnfcdN/iWw0nDS5QT6TCh4J55McXrKRXmqbdScmn5f6CS+9Q2y0
nP0f07ySCm+fdm6t/spCyTjCJ6+GChkfVt3ufMFCZvmBamsaqFDTu6M27CIL
ZRbfd+xrpQJ3z5i1Gh8LudQZTF0ZpkJqyKeHHXpMtKYRBf0epcKv24sPPogz
Uc2frduVCCpU+Rjsl+8cRaodsq7Df6lw9ssjrytOo2hoaHTellsS1i2g+Qte
DPSW0RVWzicJIzPvss0NGegAq36vipAkXLC1e7JjBQNFTfx8xBKThOJMvh32
viPo/OJLbkcFSdAvvyq7/wn5PhNXEb61SxJs3Ax+mm4dRDrXr4+EaktCpfEp
Lz3GAEouTi7OR5KA1zyIORc5gHzdNDzFDkrCgu/nvdxCA8hwcPvifyckAV64
m0fW96GyzH1Er50kTNH529N1e1CR+el643Byvh0v958z+oN+JruHqnBLge9W
vt/n84Mwn6EJPZhPCsJ8xD/f/R6Fj48ovecUkgL7qbC66RfxeGht5dsmMSnY
kKpsvFbqG5Z4Twt4rCAFXULmj3pNc7GdR9KLhl3kfMpXX7YWVeJ0xUf8aK8U
aK7H/bYO1Zgz5/izBJCCyw752r+9a3Dw7LTHQ30pyHZ8qRiqXocLru97tNFE
ClpUH1ry3WjEsmeabrk5SsE+jbUfPmW34at/46cGXaTAoZ4/X+hJO/4acN/l
+B0p8NdMP7L6QAfWr1R02vBQCpQXVHn1fndiF107+5qXUjAg48KX2d6Ny1U4
Lq/7JAUmMSMa/xL6sFRZXY9vohS8jUssyl/uwxbX4sz/fZaCY8yw+ehT/Xgm
6sjFqjQpcN2g3xU834/X0oLOuuZLgXHKqYGRvYP4Pucm44oOKRBaJLL5/Yfx
4AHh5g09UuAcfm14X+MwNn7BvPSkXwpiyiJKraRH8LqVX25sH5UCAUdX1pnQ
EVwht+115CxZr92Gu/4LZODt5pK0+Xly/r7t2m1VDBwZMx1usiwF9XG+OR0C
o/jWpsxkIT4anLu2Vd747ihW2KlTdVOCBoX86ts/GjDxi/urTKulaCAodrpi
/QMmnsjh6FSm00Dt3us5q89MXKxXwOpUpIE7rT9VRoiFNb1ib+1aRwMXrQub
Xm5n4bCKp4uBSjSYPVNFTbNgYceTh0QPq9EgROvBz3VpLNz6VjkoRoMGpxZe
NVu3sfCBViH5pW00iIuw2HSBk41lLCpVvu2hQYpGVvWxw2zsGZucJopoEDMs
NneE9BJ76LW2tS4NVN//5RsjvZTvcMJQ/jANDp4cpWuWsrFK6taGO4Y0SPIS
cKoYYOO3f6lmdcdo0HiaoS9M9rccu6b7VE7SQDxr3XUWncB2bn/snpvSoNfk
wy+nraR3cMZkz1ly/P5364OPEBi4Q+5rX6DBV5XCSDPST1Rvs5fjl2nAOJkv
Uvic7Ocr90oYXqPBU21bXSvSS8Niq0I/2tIglckpGZVA4BOnONZyOtDgfiWj
8i7ppV/BPYnnnWiguXfzb1YR6a+2fM30mzQ4MnDr6kItgQMUYrPEXGkgbL5F
KY700oLFU127++T6qnf9hkgvXY27Wlb0kAbhsyq7C1gErhnWP6HoTtZ342j5
DtInu1WUW+89pUFxoczigX8Ejr0hZNn4ggbrYoffMEjfrPw2OqL+igbPmCdt
N5Ieujdd4eT9mgbdXeutlsi4f1fyv/4AGpTNzLjak7HRg9dP0FsaaB/b+sV5
kcAZuY6CIe9pcPucmDxljvQGzwn/qTCynqygYf2/BH6lv1XmWCQNzHyD9WkE
gae9qVEJMTSYlP326NEQgS2q/m7k+USD2qyjg49JH1VQ/qRcTKTBoJRftyzp
o+0mGTszP9Pg8rhFn3EJgSPfvc+V+EqD/kUrF8WfpHfa7x1ySKNB1Qpi3csk
cvydBNHXP2iwxnFw+MsHcn7x5rovWTTYeyTRJMKHzOcz37uaXzQwPmcjcM6N
zP+Q1oXxXBo4CK9K7LYhr7fv8hrxQhoApw+x1ZSsz6OAIc1iGlxS3/b+1D6y
3t8Jp5uV5H6ayzPhpJL3x1hhR1ANDagha9a9nmfjX6OGC9/rabDWI6KS1cPG
1DWJz2ZaaEDxCIxfTfo9z9cq9N4gub81ruY9UWdjpnKgeegIDX4r7DmXJsrG
0kV567OZ5PXL2w3kMljYYV4hZXGCBjQzQut6FAvLWbcUPl6mgXqoX/9uThY+
xC3gHcUlDbE/VQatmpjYJXz7sXxeacjzkMm9mcjEZQ2BLdwi0hCssAcbHmNi
131G7GfS0tB6wuf1ylejOLbd7dsnWWn45xOW9P7MKK6+859riYI0vOd8s0t6
3SjekCzALbReGmZuH0ub+8HA9fQCmo+GNGyruNP8un4Eq03t2Bd4RBrk949f
GWsbwudeX+VLOyoN17YdGSt+N4SfbgoqbzCWhuXbGe8zTg3hdvMJE6nT0vDU
RDuLKB3E3pVJtu8vS4PmjnAljsQBPPBx9ZsIN2l4WOIdJLe/DzM9e/5xP5YG
NnGAl4PZiycsoy5Ze0hDN493luCbXsyxavVmDW9piM5lVUf09GB6sGJ+frA0
yNjHf9Z36cbGz1eNDaRKQ3wyfch0uBVnX5M3VBmRBjUVWTy/uQIX6HV89WNK
A99MfFC1RxkuW/uB9peQhkL34RPOrSX4T5dc369paajnfSzg5FmEJ07L3TvG
IwNhcect2kJ+4Y2HZOOdV8nA5kjJtwZ6nvjNRhmeTBMZSNRJuNT8tRSZXdzw
qe+MDJzWKjK/qlOO1r3ZemSFmQwE1G/e3ldagdKWj/pdtpQB+RviLnYd1aih
yV1uxQ0Z6FlhneoxV4cknjK3XX4hA3yqvlwBzGbUmvXvj89LGfAxWpOV/bGF
9Anf/QxfGdh3JWTv4KVWpGm2Ok80SAYiPTakSFe3oRNbTY9mRMnA8Bfxas3I
ThTQg6+I/pQBxbBJymvuXnSOVimwM0cGjMqV5iZNe9Gao63/WebJwFtu16XI
hF6UmjE1/qNYBjISah1+G/ahutfKDy0bZKDzZhRt0KsfUXQC3/5gycAjzfyA
8vZB1OwSuat3TAZ+hZX76qwdQpEJn9tFpmQgznTWu9R6CG2RLFljOScDxnqZ
n+TGh5AxcyFZhJ8OdXl371yfHkZ+IVeLLRTp8E2Gd6NXLQPdue3u4raWDq2B
hl928o+iiyfCVwVvoMORlx1FfXtGkYpQ050KFTqUev7IXhc9ikrv6m3csYsO
/LGP8+QsmSjFxKLhuDYdVgko3nB5zUTvNB48tkd0CFvpN5z+k4mujqQ1R+nR
wffhnohFMRbiOrvOS+QEHb66qwpeTCZ9tA20lEzoUP4xLItdx0I1YmY9+87Q
gS+iUch8moUiSgJ33blIB28uB+2uXWz0LPbLgL8FHULNbQIZZ9nI4XG5f5IV
HQImH96sdWUj7Z3cjB5bOsigvztVv7HRWuqqtwvX6eB8goMRUcVGQmO7dWlO
dPh573XuyDAbNX9yDjG8Q4eXn7ZMLckQCHv4Hrx2jw6KAkauJVsI9PFS4sST
B3SgcUs7XjlIoFu03iM/POjg9mfRU8qB9Mfk4nTtMzrsb4peq/yYQAeqZWKY
XnTwXyW5S8SfQJv/0zrG70OHZv6wNTiSQOLPj8+v9qPD5+bxQ/u+EOif5fVP
2oF0MHc/rBiQTaBuHa+Tp9/SQaLr5MavJQQqpsctO72ng8LzA8wPpA+Sp3P/
exVGh8fbm7jOkH4Iqms//SmCDgcKjFZ0DRDILXmWOz+aDhGx7tmaLAJZeVNT
2uPokCPU/PvEJIEMrm4xm4mng+DzwxM6swTS1DUUEE+iw+gB65Uz8wSiK1in
qXyhQ33dhbl7SwTinPMw10+lg899VkgZ6aHhxggRy+90qFK/1T9AxtVff2a4
ZdCBWGY1VpDj033+WAX/pEPteubdR6S3PthMiqXm0IEdHj64SK7nqbfyV0Ue
Hd6bVu09RHrJbvVmm6FCOlzvbk+6+H8vLR6U5Cqhg0BBvv0+0nu7Wyzz5Mrp
QDkpmj/WSaDV3x9e31FF7h+F9gX7RgIJ+IfInKilw92RDtf0MtKj9ulF9g10
mNh59ENlDoH+HKpzev6HDotOzPbUrwTKWceWj26lw8gzzvSrMQSK4xAqy+6g
Q8H246kjgaQP29ff/tNNh5oOmWvaHgQ69+ZClcgQHb44HX1x8iLp329CsnYM
OsTkMnJOHCJQV+2Pa6UsOlQeyRUkyP1itVKc89kUHS4b7aVwL7HRBjV8tH+G
DlpB0Ssf9LLRiKF9iO48HVRp0XHvisj96/176zKnLCiw5Yszn7PRlgSXxxd4
ZUGzzk8s/yobTRYrVv4UkIVLk3bXnQ6wkSvv/auuK2Xh3pWep+XzLOT+WP39
uJws7LTFT0LPsdCBiPaBY4qyUNhZf0RInYX4c7w0k9fKgtvJ6RlVLhZ6Nd9X
brtJFso+dXOExTLR29vvlvp2yELCwjkho9ZRdCZIz0B3jyx84H5YGh47imTT
JoIjdWSBvT926Pv1URQ5bqhxQU8WeldmCO1bYKAEe06rphPkfNL6DuLCDGT/
Mjllm6kshKh80usoH0FqiecXA87KQmRz0Q2PlyModej722PmZMx+onGdfwRl
W9qWllyXhRWPG64JTgyhmjP1aj9fyMLxXJ2mdUEDKODO4/syr2QhSfjNHim9
AWTyVrXkzmtZMB/IN5Ka6ket9c8ttr2VhTgtzQHjY/2o30j7zecY8vyj7H6p
+V40eyDuX0SOLDypL6Wgzd3I7WeER2GeLHR0/vf8aHwX4tAMER0plIUX+/2g
f7YT8a96vVqzXBZy1jlUub/tQFL/XA8X/pGFh0k3Uw4UtqKtnw3fD4/Jwn2z
4iOcYw3IQXJqp8ZaOXhvsOVv0e08NPGSnW+yQQ64tR8GdVdjdItrxPCeshxI
W75cMZ+SjdyIDvMCdTm4OcKFF26ko5elxS9MtOXAuitSUrk0BsU/CG2+ayIH
lJlJ57d3k3HfgK5r/nM56BZYkam/rQbrRlRFb3opB05J6yf/8NXiyDPnKgN8
5eB7s6hPdHMtvljutOZykBxEtCZ35N6tx60pkRXcMXKQsCaLl/61CdfdX1LU
y5GDnB0Pf65ltmMNLW+Dz3ly8Kmmjb7wuQP7sSVvSxbJgYgo59J9h05sZKFa
PlAuBzo/HW8fG+3CZQfNbj1rkYO/TYp2iTY9OJ+SVVo8JQf+TSMaJZv68epy
vSn1WTnYJv4hY+ZhP37sWavwbl4OzjxvO7errh/rzAy7WHPJQ5Z3YF/frQGc
1U5TEBSTh/rT68RufB3EMm9jDjlJyMMGYe6tJYuD2PWYukuLlDzM6f25J3V4
CG/PP1iSIC8PXdeudHi2D+HUT7ecj2wm57NgmxtOD2OKBeeHVDV5CEkPLRvf
NYId6T7FdE15kN190NrZjeynfGLlRnfKw53QO3v/LY7gROf63y8PygMQlB0V
EwwsqHJpfPKwPJQtmVX8UxnF1gMMWbOj8nDb9uHf0Stkv3aGy0nllDxc+tb8
S6JhFEfv1ZCttJCHwzqZDipRTJxvJOQxbyUPKU+X1CWrmLj3Uh9D2Voe6tjd
9q3/mHite1DWMwd52JG05e7kUdJjgQ5rvjvJg5OO59/9t1nYKlbfu++mPPyS
uKxv+4GFY3//Owv35aEgs+ig5jALF/6py3N4KA+O5+8u1wizcf/wf8ofnsjD
2UqtWKTGxuuEL/7791weduUvGTy/wcYH5HZYbHwpD4J6l7Mu+LKxlapYqamv
PLR9DxldIvvluGP57769kQePQ6cmw/rY+Ld5KEdvMFnPK7NvgxfZeNDpprVY
KFm/+NLgM1IE5vM4WqMTLg/JBvvnO1UJvOHNhp3Xo8j789q4XvkAgQ/GLUeE
xsrD09WmOjvPkv18ejN/2Sd5WMm755rgdQJ/bPb+syFZHrhDF9rH/Aj8e+Qy
MvkqD5+vuuXwRhF4cE77k0eaPKhTtzxv/UKuJyK1MvWHPPhXL0U6/CKwkjxx
uztLHoY0H7jnlRL4kFpJ54oceeD5PpFcR3rGGkUd3JtH5h98MT2K9M4L43vJ
doXyYGXipqVGeije4qRUSLE8uPkUN95hE7jEWeVhSZk8aDg+OvqQ9NywB+/g
dKU81MYnXPr//1sJBHUeXV8rD4zf1PZc0nMbP/74frJBHrg2nItYWCLX/+En
7/5HHjpOdgVMkX6zLrF5mtIqDzp/m5LiyfhFiy6rs0Me5JT3jUmT4xMYsiai
PfKgaztqrzdP4LL5qew9/fJgSdxAajMEZohUrbMdkocYr23+9eOkvxQ+vXrH
kIcITpt3WqME3qT+eOo3Sx6EJ3neneoj8BE4a/Z3TB5mNhR1bWklsO1xzcK1
U/LQYL+xoqyawN6WwionZuTBYsLu95pCAie69Ac+niOfD/rzA7t+kOt7/ppP
XpSH9voNpStIPzOC3l7u4FAA2+vxfTGkr4U+3SgX5lGA50yJLf9eEHhzxqGt
u/kV4GSP5OmVdwhsWLo61FpIAVp/zooOXSawfescV7CoAhyK+iD15BiBkxaS
6iYlFGCD+q3Ly2tIf4o+272GpgAaWlTbASECMxUuRRvTFaBXU1vff5yNVfZR
nD8rKoD0+64AnZ9s/PnpLco1VQXyfX/NfQWQntO+4P50iwIYKa98ylYgx08d
mIzZqgAX5YueJyywcKIltbF7lwLEMDsrv6excDz69u7cQQXoslntbURj4eHp
EMG7hxVg9xpte1UWEyslu98LNlSAwx8+MCfymPij3AmzhhMK8Di61WqnNRPH
/htbZXRJARZfXCnv+DSK+1Oa/ewtFSDi+DPm6lujeO3/KjjzcKjeNo6LKCEq
8guZM+dIohShLHluEqJIEVJC0VhSlmRrR0Ukla2kRImiJG10LEXZQ3ZlX8bM
HEvKVr3n/fO+nnPPc6/n+n6ua2ZYxQuiXOWhjhicOmBAvw+ar/dVeMpDcZhs
1stmNpn6UvWxQaA8FHIM1mhPjZDJx71UNW/Iw9qNzWXnBYbJdgXr1H235GEv
UTAtWTJErurUlfBNkIeV4rOypWeGyEQzkYmcFHmwbBj18fk5SN5em/VKKUse
fue1r/JuGSBje4b05MrkoSI9z9U0oI+8bHPEXGBKHu5pNpvm2nWSaZadB12n
5cFGY8yNut1BFu608a6Yo/tR97l68ms7ObHN5EYUPwOcw+Ouehm3kQcVVVpW
SDCgP47nthJvJtV/T7goqDDgfpQ766RdHfk98WLwDmcG6ASx79iz0siZuLmo
x0cZ8PRXYtX4zgRSMto/RZhF+/djT8zDLpE7L7gV13gz4MbwGRNFixso391M
aH8oA+zb8rvXtr5AkTrL49wSGKDBZzJaaFeONDsfPLlcw4Dxp422ToqtSEKV
NZ1bzwBxa3n5JT2tiHNO1aS1kQGda5d2vU9uQ+nE+36ldgb07alwlhHpQJKe
TYzKQQZkNNlEz33vQrOhAuZCfBiwvppdSXrUg4Yz3HyTF2Dgc6dv7ZXZHtRc
+yVJVQCDvzflosp20zyGxQ7vF8JgO+n/dMVEL/L4KBfxWBQDfEPD4WK1ftQm
olViugoDjzWL8+9GDqJyjaThThkMdD2OCvR9HUT5h+bFfeQwUDT63LDjvyEU
m1vqmMTAoLilWmB/2hAy3Wc5P7IGg8dGNev2Zw8jrdA84uxaDAqUV77WHB1G
ChlS5svXYRD9N7VFTnkE8f3uSNJZj4E1r0F8On0EvUlmbYlSx2DEJlb9fgwb
PSqrcmRoYNDsnMIJKmejWxzViJeaGCCi7rXpHzY6qT/V1LGVfp55kb/o2ChS
6r3gux5hICaZol+xkYNWigwkFQMGj1yExCUOc9BCDdMSa0P6fJPOIv1oDuoO
XypxZgftvyfW1HCQ5rt1d57VmGNwP+SYb2EkF/2cNM64tBuDO+PlqQr5XGT5
YeKutiUGOSViYmqdXCS0z+xaxl4MVkV3HtmoxEMuq39dcrCm6xVQ0Lh6Fw99
GHoQsmw/BkNGRrFPvHnoVOiMxxl7DNwXCebE5fJQvXGGy2YHDNgqZtLcGh5a
v8zqwMhBDCTsIru+s3moPyNzp40TbctLG1/CKAQnrQ1EXDAwlXbx36xNoTs6
fNolRzAQvl4iHbCH5os6W6UNxzDY+EQ/OieY5qkkAayPRce7fblPWjSFhI/m
Sid5YFA0FMpVSKX1vKqDuKUXBhGvzmtq0rxWPC20SNAbg8ghseiGIpoHyvL+
vjtB5+MlsnOe5o/AaMdfJ31o+61j3YtmCjXZLuEp+mFwomUifqKbQhvxgoFO
fwzaHn9Y+2GEQpEc5664AAx+OlXKSI5TaLBA7JtpIAYMIw2Zn78oZHjhbfXf
IAxEojR6DtF8ds/c9WN+CAYC0ZieFc1bs1LLCj3OYFAue3xxLc1jNt2FL7Fz
GPyWfq7RRNvPs1jZzedpW+9B8RH6edFTkg+vXcRAQ0GmKJT+PBYqTjYMo/t7
TmoX4zeFyoS94qbDMbCIfnbfnI5Hvkk6MucyBuYfVv1bwKZQ8L2yC0evYtCe
nF1o2EOhZtaJIJkoDLa2V6KlLTRPbpb1qb+GwfjLsX9HqygU86ecFRGDgZZ7
WrgJzWMjFb5OerEY3BDy9Cig62kUJ283cYPeN8cmuzy63vcPVlpm3sTgne5h
Ub0YCs0rBpg43sbgan2wlXUIhezGmUgyAYP+AyGC824Uyn9fo1WZiMElodiV
GlYUEo8IUj2fjIHK4jeX/tD9L5f5upqTgoGo1eJS00UUwgdCpdJSMehybeiv
HuWhM7lKYnYPMPjPuFVoqJaHNIzOz5elY3Dy8YG03lgeil26/mfQIzo+qYHx
8hM8NNraMroxE4OqyQyO8W4eSju+seNONgZb1B9sxxby0N8tHQ1WzzAYCzKc
Du3iInv+y5WLcjHobSleHPqKiyQSvr/1y6Pz23zrHsuZi84VRyeav6Xjs2UW
qj/hIHZX8a2ZdxhEeVttKw3koP1zk7GPCzHQWVTrL2HCQeu1DlwVKMbgoUNL
y/iPUdSarRj8vpz2/3ZMQ1hgFG3/Yh/g/hkDWX/LytrPbJQzeM1XuhKDwu+t
mFs0G4UzJz38ajB4Yns3XnIFG6knkA4qTRh8PnpcrUhiBKXkT9i2faPn93fx
7MGaYbS4YY315RYMrq2b7O2/Mox+iF7b1ddO59f5UvXt/BC6dtFu250eel63
FqhWtQyiwePj8iIUBvEjdp8DHPuRVZSC7NsxDD5Oeh+WE+lHhZm20scmMHCz
ffX5R0EfutlXJF42hUHG6f6pWpE+BPaRfCHzGAgFrV7xNrsHJRsRvWxhJuTJ
6LPtY7rQblmbjEoFJrwVHVwSuOIrSuxXLXZQZIJZ/0LdLqt61P9scQdnLRO4
fXPWRow6FAqFEuIqTCj5VqTRsLwaPXUlQvepMaF0o4l/MPcTWvJ8fG/nNibs
VI8KDJjPQxVGMXy8/UwwSNMcrFxKksuXsmTP2TFhtuu7iK5UCenYYqAlcYAJ
BxVvD7DSSslf7lOe6odo/1ZP39h3n0jF6wdbAo4wwVIyUNutu4oMa1PO+XeC
CduqXHouzjaSBt4VDsuuMiFcJeHJx+M/yNnWEeOPkUzYJGFnrC/VTeZvF1U/
fY0Jfp11kd2+3aTiKqvFXdeZ8NRMRm1IpYcU/dienxnPBN9x164rt3rJ1lU8
MUhnQu0qq9w7egNkXJjEzEQGEzzs1NYERA+Q5pR6f8ZjJviUp3227RogP3w8
/U4km76v740OHjxIpp9YcKzlBROEDyWV+TweIk9+kiz2JpkQ5Tr/eHntCKm8
aUs2s4QJKdqKOV/E2GRfsn18UykT+Fe6s/ftYpP7T97z0ilnQsWi9srmT2xS
T1ZplVANff9u/0SzrFHyV7jZwre1TLj9wMTRsnuUzB3zojzrmSB41XDPcikO
iZe/+PS1kQlrC2sMvwRzyMU+ur4p7UxI25jqXKjFJUs7Dh3a08kEohQj/Fy4
ZIjxeVOB70zoEm9/1HyNS/JkP8m79zChM7fV8W4XrfcihoTl+phgvPUub1aA
RzqPC0/V9jNheKro918lHtlUblGlMcwEco1P65g3j4xR8ykYGmHCc6cLVzqu
80iTuzcfJI8yoa962RHX//8+xaf1NB9F18tR//ceNo/065x1eTnGhBNu9xc/
F6TI9SarLdwmmJCwYsPPTAZFpsq5KFRPMSHyVfy7I7T+1dmsourymwlNdx3G
Cml93LTz55bpaSbIXFxq1h5Akd5ORQYxs/T9FbaL3tP6evHpCHOFeXq+3ln5
O9L6Oy3a0ubdHyY8eHh9pCyTIvXS/zu85x8TTjkqVLMLKLL5XQ9rkA8HTe/M
6IYyijz5Ncs3lB+H5AT0NJjW/0uG/UKXL8TBdy4lr7eNItP/6kVkCuLAyxPd
uoTmB30poVj9RTjs4x7vHmNTZKtKXVLTYhyGYuBgPM0fvoaJDz2W4DC95yFr
9hdFito7P+MTxaHRxbZOjuaXRyeUX8eL4fAwqtTtzx+KhIjJ4vXiOIjUjC27
S/NP+93CylIJHMIjbhdP07b/y/Amu+U4HFwlemIFbS+ttPjOW4HDITE7RQ7N
V5nd0sNhUjhgBQrzF2n+MvzdPS4jjcOc3cflrTSfdYplzT3/D4eMRtWkUZrf
AhT8BE1k6HzL/lUW0Xy3TFdPvEsWB2NV/zGLHzR/WAmu8luNg3LWMcfUbzSf
smpxYQadz2KrgNxKiuw+m7A+FcOh+KL+o3MfKDL4tpOWJo5DgstXlsQLipR8
ug6qCBxua2jvcEmjyJzSiZ3Oa3C4fEq17lQcRfZSYYeilXA4Er8+qN+bIkOF
LI4Ryjis9pL7Bw4UuXK1tM9bFRz+Rtr/dTamec3sSdiAKg6bA1WKfv5Hkf1O
vjEhm3Dws+zcweKjyLOndROXqeOwIJKv/eEgj8xLr8nepknX4+y/bafpedz1
Pv5VoxYO1YMi2sviaD7/eph030r3T7/t9mk/Hinzb7zhti4O0YWee3LUeeQl
+5WzXAO6XrfEPYfTuKT8yR8CYdtxcIsvKBYO5ZJvIjLFZHbgEF9Y48pvzSU5
L3WYxqY4lPlLTJ3j45LWSw+b3rPAoSvXQKzDnEPyFJT2auzBYWlvqs+ALIe8
ojvuUGmFQ3Ne93wTe5QsZF068csaBydl3k7P8FFSoexxvIUDDoHbvHyePWOT
teun0zsP4sC5xl+6NYBNBsabvvRwxIF5x1n54zY2WeU+UhfhTPubjzf2fRkh
fSVUhMljOHDPNSWGNQ+T5KGckI3+ODh6vH50oGyQZFX8vVp0Cge2ws2iudBB
crmaZaL5aRxm7xbal2kOkm4Lx/KPBdPnnNXc+vQBUjRbjZd6nu5n2qta9aB+
8sB0vpNENA4rApD87T895EIXwRP3YnCIrb16dCKrh8ypsjmzPhaHA5JGtem2
PeSC1F9Jpjdx+E+jJlMqt5vM3LG18XwSDrmaJoj/2XdyKu79jvEMHKRbh998
kGwjYzeUKjd8wEF0w71C8aBKMnOrg/DFYhzWGUb9nvz6mSS3/xxSK6X3p/v9
46J1FSTPXjHjxiccDLtahnY1l5HmEZEMq2ocss4tjO0we0cK/dgrWd+Gw40Y
RT/jgaMoJLbvT81Pel+T7GfD5apQ3J3QzjO/6P3W88mfLalGWY+k3m+YxsHj
XJuEklstai00CYyew2E+s2SB2rd6pDWSPbGLnwBdXbP6NRJNaMzAf6hKnIC1
H4KF/ti1I7fJhV+/KBMwGRgy7TPfixyzjGoPridge8/fuPW7+9B+57AqagMB
3V2xnWtT+pBxnUC5lBoBCn/MmE06/Ugxm/+98xYCqpDS3RyvATTgwpcxs52A
m8/l/nx/PIQ6V0HatR0EyKRc0DQcHUJN9edSGSYE/NVm2r3ZMIw+6v9L2mFG
gICuiUxj7jBKl/kbc2MPATdkKxpCM0fQ0Ya5wHWHCHjPn9AR5z6KDl7VDSh0
JMCNFd2/MGUUWUOIn6UTAUcvHdR2rRtFRjmzx08dIUCe+UNgZBMHKUTOuJS4
E/Cr8RXxheYbOQNtJ2tPAuaGp02DlnGR5HTgoSEvAgwnLSyEdbloodu0rdhJ
Amzno26V0vzTZ/B7l30AAQ6ehuUn5HiofVrLjHOaAJsSB5uf23ioITfA5FwQ
AY1uyvhuRx4qXf3LICOUgMOcZWcD7vDQuyZNtPUsAdQML8foDQ/lRZ3SqzpH
AFeZ6dzbSOvLmZ9a4xcJCN/uvfQKrV+Tn2tohIXR9Wy+IxzDoFDcMX816QgC
xF/bRhzWonlCPl816zIBzktOpc2ZU+jit0mVbVcJKLlUctnZidbv1zavq48k
wCBHzCvWj0K+2/0Uj1wjYGmJxo3L4RRyeTGBXb1OQER0T09VBoW8Lu6bN7tB
gP2yPRLPXlHo1L78FtGbBJyXf31L6COFzipIvay9RYAJf1tRSz2FrkydiomN
J6DTwI3L6KTjK29235tIwJNtgonfB2geS9iyQzKZgNtsux0reBRKZyVizXcI
eHtfKPb/39/L0Z6ZS0ghQOPfuzVdMxR6s+RAi30qAQsGNlT4/KFQSce7PNkH
BGScXWP6//+LqHwqG9OVRoAXK/D6DG03nQl1T00nYNPA0gQOzTtdFl1Gzo8I
SFnX52k9T/MVQx8jMgkYes+nqjZNobGxe3P9Twj4OXRR4tIEhWZK/jU/yiZg
o2mcvdkohfhvOuWxntHz7eLscrmX5qejJdHKuQQEH1RK0GmlkJQm7s55TgAf
yTh9tJrmJaFLRjl5BITtD74lSFJIqaWPcTKfjo9wvCX/nEJqmUZzagV0vi6d
qs9p3tEJymiefE2A2dNh1fc0fxqZCeW9ekuAppKlL9B8aiF7LPr0e/q848kI
uFLIllPB0i4iQE/EJrHIgkIeMVcZRcUEqEO00KbVFPI/zJ49W0r3a0JJWYmf
Qmc2mTfDRwKqJyV3PxigeaZBNPpjBb1/rTkKcpk8lPzwOCviCwH9l3W/Ypd5
6KF/7XbTKgKG/V94PT3KQwUrY2eragkoSChUOizLQ8VDY9+i6wnYYVjQcPUn
F315Y/XCsoEASVets4bVXNR5YAWr8RsB3wNiX7ie5qJBFf/tt1sI2FWUZNVk
xkXUfJO8bRsBKok2RJscF/Gnxn9r7yRgwzO+3TmFHLS2b9X23j4CYvduXvll
dBRtyg+WTx+g98urao1K/ijSCe+YcR0iIER7XnBLyCjatTbl+QibAG05N2Nb
wVHk64nJj4/T87Pk/JslS9goVO/CTN4kAa6ZLl9EPo+gcLHeJv8pApLEDrjX
ho2gxNyHUdPT9HwurTmcMTuM0s4vPPZuln5/fahwKn45jLKtXA1D5wmYF7y0
I8tzGOXj5av1/xJQKeZ0xQ0fRh8mFWf+/SOAc2933nTLEPofTwn8KQ==
       "]]}}}, {
   AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
    PlotRange -> {{0, 10}, {-0.9999992328657719, 0.9999997588489247}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], 
      Scaled[0.02]}}]->
  GraphicsBox[{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   PlotRange->{{0, 10}, {-0.9999992328657719, 0.9999997588489247}},
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], 
     Scaled[0.02]}], Graphics[{{{}, {}, {
      Hue[0.67, 0.6, 0.6], 
      Line[CompressedData["
1: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
VLYopUWiknSEKFJIWUL2dWZuRJbE7/7+PM/cOc/33c7z+c7c4/fiUZJoOw7/
WHJxnzYLOtcuTZgf2IFnQ8Fcb8QCF8VsyaCmDhz14s3t+C3MfveMhuO1OnHc
3WcZXTtYIH/K/PSnvk6cdvZW7Zl9LNCz13ZzRN1YbTDaLt6MBXY/3T9mR3bj
DKdIfsEBFvCWBEhcaO7GL/efF5GyY8HDfiSX6tODizVcF8e7sGCL7rQzhgm9
WC/NMbPgJAv+tZw6A+29uJxjr93lwYI96To+11T6cPVM890rfFhAn7G3MXjQ
h9s6tpwuuMCCj/NijONj+XhLwufkpeEs2L7W9mphNR8nmlmUR11mgf+l+IHG
2QJsXXaSPBTNAtE/zaUtvgKcF/zPoCyWBYnvck4VZggwa1Oo18rbLNh1fv3T
sFYBrs9I/CR6lwW+22Irc5EQazmpDTvfY0Gzsi2P6yzEsdQrXvUDFgiCeKUW
14V4uGGrgfZjFmxNnNPsnCvEpje+nErJYEGQxvN4o2YhzjY6kCSVxYLxK6KO
oqIML0t2lXm8ZEGrYvrHYIrGVT4TxLa3LGiXmQJdVjTWWB2m//gdC9ID6jWL
GN6MFM4/Nf89C6I0Hp06coXG9P2kxLMfWCBXWmf9KYXGhrbLyjrKWGAqND46
+JLGjxfmDO36woLnr56savzw/++9OsSLKhac3a9z/XwNjZ0jKvQ431nALgZf
fhvDr7qWniF1LCCSc2bOEdJ4iUh3grCBBdIL88IGhmh8Mce91LSZ2X/I2iny
L4273CYH37axwCirQKd3gsa6auFclS6m30rIxv/5PrVDTu9KLwsqGqu5lczn
YgnJHsMCFojt1Cetme8fMlNPONjP9OPpedR9Zv+COa8/lgyyQCKiMvSRgOHl
sm2Dy0dY8GJ8XZcLo88/uJIT+5cFaP/UIeF3Gv/caLVTZJIFFxWbopcx8W0a
7nZ3mMqGv2n231SZ+O9keMRXTGNDhp5od+/d/98vEvm4TpINeVadS49dpvEB
6tLvRCk2SEc3U88YP/W6QZ4jKcOGiANGAbmWNFa4cXfHyXlsMNw/rhABDK8b
LXevk2NDjfQ4X4WkcY1E7p3NC9mgmBPKuzyF8WsFuh8esNnwSblZvKBJiKN9
qgbm8Niwt1datjhHiAdXWbO9ldhQcaeq63aUEGfe93TTU2WDaYgS9XmjEM+x
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
KvHb38qjk5PM+de5eXpRaQX+DyHnT2M=
       "]]}}}, {
   AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
    PlotRange -> {{0, 10}, {-0.9999999574404889, 0.9999976139198089}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {
      Scaled[0.02], 
      Scaled[0.02]}}]->
  GraphicsBox[{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
VLYopUWiknSEKFJIWUL2dWZuRJbE7/7+PM/cOc/33c7z+c7c4/fiUZJoOw7/
WHJxnzYLOtcuTZgf2IFnQ8Fcb8QCF8VsyaCmDhz14s3t+C3MfveMhuO1OnHc
3WcZXTtYIH/K/PSnvk6cdvZW7Zl9LNCz13ZzRN1YbTDaLt6MBXY/3T9mR3bj
DKdIfsEBFvCWBEhcaO7GL/efF5GyY8HDfiSX6tODizVcF8e7sGCL7rQzhgm9
WC/NMbPgJAv+tZw6A+29uJxjr93lwYI96To+11T6cPVM890rfFhAn7G3MXjQ
h9s6tpwuuMCCj/NijONj+XhLwufkpeEs2L7W9mphNR8nmlmUR11mgf+l+IHG
2QJsXXaSPBTNAtE/zaUtvgKcF/zPoCyWBYnvck4VZggwa1Oo18rbLNh1fv3T
sFYBrs9I/CR6lwW+22Irc5EQazmpDTvfY0Gzsi2P6yzEsdQrXvUDFgiCeKUW
14V4uGGrgfZjFmxNnNPsnCvEpje+nErJYEGQxvN4o2YhzjY6kCSVxYLxK6KO
oqIML0t2lXm8ZEGrYvrHYIrGVT4TxLa3LGiXmQJdVjTWWB2m//gdC9ID6jWL
GN6MFM4/Nf89C6I0Hp06coXG9P2kxLMfWCBXWmf9KYXGhrbLyjrKWGAqND46
+JLGjxfmDO36woLnr56savzw/++9OsSLKhac3a9z/XwNjZ0jKvQ431nALgZf
fhvDr7qWniF1LCCSc2bOEdJ4iUh3grCBBdIL88IGhmh8Mce91LSZ2X/I2iny
L4273CYH37axwCirQKd3gsa6auFclS6m30rIxv/5PrVDTu9KLwsqGqu5lczn
YgnJHsMCFojt1Cetme8fMlNPONjP9OPpedR9Zv+COa8/lgyyQCKiMvSRgOHl
sm2Dy0dY8GJ8XZcLo88/uJIT+5cFaP/UIeF3Gv/caLVTZJIFFxWbopcx8W0a
7nZ3mMqGv2n231SZ+O9keMRXTGNDhp5od+/d/98vEvm4TpINeVadS49dpvEB
6tLvRCk2SEc3U88YP/W6QZ4jKcOGiANGAbmWNFa4cXfHyXlsMNw/rhABDK8b
LXevk2NDjfQ4X4WkcY1E7p3NC9mgmBPKuzyF8WsFuh8esNnwSblZvKBJiKN9
qgbm8Niwt1datjhHiAdXWbO9ldhQcaeq63aUEGfe93TTU2WDaYgS9XmjEM+x
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
KvHb38qjk5PM+de5eXpRaQX+DyHnT2M=
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   PlotRange->{{0, 10}, {-0.9999999574404889, 0.9999976139198089}},
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], 
     Scaled[0.02]}]}]], "Output",
 CellChangeTimes->{3.4734391879849167`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"PopupMenu", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "y", "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"x", "^", "n"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", 
            RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "\[Rule]", 
        RowBox[{"Sin", "[", 
         RowBox[{"x", "^", "n"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "5"}], "}"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "y", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   PopupMenuBox[Dynamic[$CellContext`y], {Graphics[{{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Line[CompressedData["
1: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
YuPAzg9yJTQDzbZ0My8/zcZaziVbtPkM5FQ0zejZLTb2vfwgeZ4ME2XYRZpI
vmVjxSQrp/HlTLRPOkQjbT0Hb/FvXD97FRO9OtUwM0Sfg0877BHfoMVEhkuD
a04bcHDpUqM497VMpNeXlCOzj4Ptc9bX9W1mojf12pweZw7OqlBc02zKRBrq
ybdUH3Gw8Z9GQYELE3UtMM0xEOfiyytCL2W7MpFRadTwS2kuzj1vPJHuxkSX
w9W7VszkYtXJUpE4TyZ63174YVSZi7mzUqX8/ZhoMkwnSFuTi6OMvRTNQpmo
YZX0f0ZWXPwrc4529zMmqk2UZ/95zMWKQ99y27OZaM1zw0DXdC7etSFcpzmH
iVIvfM0c/o+L895KbqgpYKKsP9E3Ogu4OOAnd0vuKyZawTCxcXxPPmXly039
aplIkFddKdfLxV5uJ07P4jDR/mR728zFNA404Z7aRDPR1urV0yKW0/jewoun
bAaZ6BRb7PU5TRoXfgs8mTrKRMH9RqcZ62k8vOk/h/WTTNTpPurcbUBjF/Fh
O0t5CoU4mlp32dH48o9Ldj5MCi0em5W/2YHGIQUSdgksChn+PTYz+BSNM0/N
su1WohDFy3k33YXGPR83HvVUpxDH5PDKxz40Ph519VCMNoUYciCpEUFjt7My
h0rWUqj3nqJKTxSN/Q0jDrato9CBiUsaqfdonMR/bLV4E4Ui877JScXTuM36
/YHCbRRaEOK4wTqNxpx1ew+0GFAo0X9fa8tTGo/PbLaYNKTQ5ksfnff+R2PV
8r79hiYUOvct4aB6Do0PLpq579t+Cmm6F6L9JTQ+PRljLjxAoeAQvkFQKY0v
Ns0zn3uQQsskz68pLKNxTJD23pPWFFrxPOjdSAWNGzkWZjwHCjnKhFRIfKSx
WeHDXbM8KbRJdfj2uWZyvWH7KUUvCm2Te7iX30Lj66uX5yv6UEhvtFXd+weN
izOK1RT9KORmmtFh307j+YlfB1gBFFqU4v77WxeN9X7EpbACiV7i9fx53TS2
UnE4zAqmkN22ceVjf4nekUNvqFAKvXxw0+1jL415t+TvMWMoxMIsf8SlMaPy
mwnzPtm/+UHTTprGK8QSRJixxI/aJ2tNBmhs57vSiZFAoScqeybXDdHY58Xw
XEYShTwM3Z3nDdM4mlfSKJ9M2GnpL5ERGn9w3akvn0qhBIeTTZmjNO56xhia
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
         "]]}}}, {
     AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
      PlotRange -> {{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02]}}]->"0", Graphics[{{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Line[CompressedData["
1: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
2BtJmRfNKUjCYEcf9SyBkfjApmILCtqy7Bjj7nUCj91S+7xkTUE+nSu+PXhM
4CSav4GeHQX1Be86vorkm3133peHHCH1i9icViog8CJz3jzfhcw3c/jsy0oC
Z8TpN/x1p6BObWXaq0YCO66ItNvqTUFvB8PGlEj+Ekv40R3oR0EaWrotsiME
/ixD+tdTFPTDyjPpOslz3o9tOJNnKejgYsC6AJJPZeUen9I8T0FebTrB1SQf
fk/qmfMLp6BQpz13khf/z+Mq4ZlXKIi79Hf8CMmXqik+gpyrFNSxUvHTczJu
XZN9Uz2agoZ+bIZGkjevpv1heN2mIJshu7CzJO9uXauX8CKOggQnxAdukHw5
9PLSqqEECop7tHqCThA4Xr3iuVIiBR3J699EIXnSKEN8ndszClq9Q9UmoIPA
Mxsss5+lUVCy70kJ01oCp757sK3nFQUtl+JXv1tGYM9/dqrNmRT0wu2Sinke
gTV2rZSpyqag01ZGXK9fkOuju0RKP1CQlCP145sHZD+ak+c/5lPQ4Jte94NR
JN8quLEzMQX9/EXd+Pg0yc/eyp2pX0i9HwyNrzuR8196hWO/U5Bte2yI1SYC
39/j+zaymjx/P3eba/5H9v+OxtPzdRR01syqKYeXwCNKuRePt1HQzfRxxTc/
OPit35mTR35TEDWjY8XqTA4O/LTN1aqXgmbvsZV3xnAwt3nhLv1RCrK4xUgJ
Mefgr/EXNm8hKEht6FjRfTUOvtFtoLxukoIWaW5WRwU5eMXpb0JS/yjI+XLX
9PQnNt7wqOb7GEUENdOTug7T2Xiq//bnAXER9E5QX3Gij4U/bbB6004XQZIJ
enf13rOw0ZeW6HJpERRTvSS8YMnCDiM9B5JURZDVPuO5HZdGsYJ2qkHcehFU
XL5s5pXpKB467651Q1MEVcv9/tlOH8WnaCzm2e0iaJnlSeatxyP4+tbppn0m
IkipvzPcP2UYf4wQdFw6LoJOJN4Q3hE8iENrKsynfURQrO8T1+ENg9hQ+gaM
+osgrHw+M6xvANe8oco3BYmg5+2T7NMmA3iwXqov46oIsrhpu+W3cD+WVFT3
dHwhgrYblCRcse3BMbevW794I4J2/d37M2+2G1N4Rg2m3okg4Dst3n+3G3N1
v5C59kkEZeQdPqj7owuznij/zP0ugpavSm/od+zEpdKKGmIcEfTpMf8ietCE
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

         "]]}}}, {
     AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
      PlotRange -> {{0, 2 Pi}, {-0.9999947785943248, 0.9999998722828333}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02]}}]->"0", Graphics[{{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Line[CompressedData["
1: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
mgm3J1/trUr5B6u3+Goen/8KqSI7bC5m/wOjkLA7om2FsOcm6nb/8Q/yfwjf
8KKXggz/vcrK0X+gomXXKN/5C3aYjkWayq3CqW5dn6TwNrjidbdlQmkVgrmu
vpceaof3KRyC7rAKYwVnk3/JdcI2lu2+H06vwsyprWq/srtBLM7UccJxFa7s
CsBSen2wgajReZSzCuSdViXulUPw5gW2GMWrcDDf2qPk+DBsVMxwO1OxCsN3
kk8eqGSu773OkGpdBcWh6mK9ghF4s9n/54veVdgr6Xm0ev8oiBS6jSyProKw
yoNX4nGjsIlkKVa3tAoSlsZlrO5jEB53VuUQaQ3ma/Rtr46MweZjR89+4F4D
vp/GtqdOjYPos93+d0XXoKzZWPMKUx9E7N0a17djDUYP8xncuEaHLQ38RSf3
rIFFtdj+xHw6iG1YmBNXX4PTupntPmYTEPV1lO+pzhqwx3W3syUy/c3FDtk5
vTXoOOC/054xATGrtTqXjNfAWb9nrECeAeLvvltUXlqDs8d317bbMSBG64ub
gvUasD3UmPyayIBtQ/GvI+3XYCVrkDjWxYD3vmEZnPfWgHffQeLeOqYelA34
6eCxBrVKvG/UVZn67efDkXa/NZDQPS/ud5WA7fYOJJ3gNQiYcdQ76UvAB4Gr
Ymnha3D+gP0D1wQCdmQZqWyKXQOHR9feUYuZ+8a6Z72S16BbJfEE4w8BkkuH
bzMy10Dj+3zq5lGmP4qQ8zfJXwP5isRYX6a+3gnb4opL12CAXJosy9Tn8b2C
Rbt/rsHNdVwLy0w9v9OLoz20eQ2sDSavTf1/f+fiHEvXGjQNhAaTFwiQqhzn
sx1aAzXV8Cq5cQISbbtkmxlr8NW2V9SGqbd38dbrwMIa7Bs2NEkvZe6nlVh8
XGPy4+vEx5JEwEtp00IuMguK/bgcY+hPQNP9pmp1CgtqlDm4L96KgPU1p1r/
42FBlK1OOX8PE3B2y4+hRD4WJLkEK8doBLyyQ7Od61kQ15pPZGgrA37jr6yC
IiyIkfuRvy+GAcL8CuuObWFB7UeuJe2+woDQTEmZDEkWdLJFbayiZQJ+k6MP
DkuzoPzHZqHbAiZA2GjjEVE5FmS4Kur85NAEvP5LveyjxIJuNaaWBPvSoUXX
61beIRakVNzsrLOLDhvf/rs/qc6CzGXE6NtLxuGN2uSrC0dZ0KUb/qOeY2PQ
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
zRtS8EOkaHvI4Vf4Hxs5ITA=
         "]]}}}, {
     AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
      PlotRange -> {{0, 2 Pi}, {-0.9999995908016838, 0.9999999868363847}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02]}}]->"0", Graphics[{{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Line[CompressedData["
1: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
5H3Hsi4s2VNfKEGTkOIkU3aTdwRda08/pLSUhB+oeWNvxRBqbHzccFyaBI8h
6YHzqAcr194wd1lBQh7/eI2eJRs/LjcdfLaSBGd9S3nqfA36+VntMpYlQScq
ZefKLi4yxjI/e1aT8DTqs2feuhSUncV7W2AdCd9dbf+kKnOxdFrf/HXrSYie
qA0PcmnGbknFwTobSTB3NZ++wMw/nW9jl11UIIHNI3ZmWrwfQfT91wGKJJi8
FmzmJA7gyOe2CilbSfDhuZNeen0U8z05/LF+OwnP/bz/zX1vR1bBimhaiYT8
3DKhGHcO+uy/uJTeRcL2AYW/d6WL8RrvCd09u0molKKW2P3hYq/bja3mqiTs
Dq3Sil2ei4duZpz22EtCUMrO5W5/OUjb8elYFJCQuXeVVPiGFhR/5ea1YnUS
FiUYXnTHY3ihrfmfIQ1Gj8Cg0z5OffjiWeS1QIupr/bRyePRg6jaYpWYgg4J
M0E1QgLGI0jRhP/J0UMkdNfe/9e3uhsHHRtY6XCYBL4fIzcSrrDx+JEvcSFH
SWCNxt3peFSH9HXitmXokbB5UUKj/nMuStvvl9NqQIL7dtMuixuRmNh7SWPO
kASt6w36NMMrx11Hq1acIGHk9iq9jm9luGXbVqN9JiTE3PslFmXJ8FRBssvK
jATxTELkyngbCl83dc7rJAn2VkkWgvpj+Peq5u9vLUk4KVeQ8vlJHzaTzrpR
cZoEX5aQkca/QZRHRvBxzpAQED3PujF8GMksdvMTP0fC4paD6guze7DHQosl
2y+QsCSfCvlpzMK9gvueG9qSYPSoqtAqoRnt55Fb63yJhMDzkuIbv3DQ618C
78MvM/61SX+p/7AEC04N7sy1J0FzVPXY/UEutuaW5nddJaGh/gz/nE4wLh2J
1+FzZF5/s7KpqoKL1vf7f13tTIKhtr0Ja3c58u20M9VyIcE1i1/CM4yDWS26
/RdcGb0armu82tOCD9dvu+TvztRrn7OTmh0LJVUtmU7yIGFhQP7b73QPEiud
dq+7w/ijJjxF+tYIvlLYIjx5lwTup5hfOWcHcN2n7CDSmwTObI4mnh5A2zKe
SancJ6Hlqpuy/NQwepTiHmXqR8L5jbM/8nmZfvKd5Ub3BySsq9WPWV84ho1i
1NNeBTL+HN4y/eRRO8p4tVqt6CEJv0M/JFK1bLT6n8bNgkckXB9a7pDnXIaD
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
d6GltR79HywLONk=
         "]]}}}, {
     AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
      PlotRange -> {{0, 2 Pi}, {-0.9999999022006923, 0.9999999993056546}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02]}}]->"0", Graphics[{{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Line[CompressedData["
1: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
         "]]}}}, {
     AspectRatio -> GoldenRatio^(-1), Axes -> True, AxesOrigin -> {0, 0}, 
      PlotRange -> {{0, 2 Pi}, {-0.9999975121947631, 0.9999994480120119}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02]}}]->"0"}], ",", 
   DynamicBox[ToBoxes[$CellContext`y, StandardForm],
    ImageSizeCache->{79., {3., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439188156517*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["Setter",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Setter"], "[", 
   RowBox[{
    StyleBox["x", "TI"], ",", 
    StyleBox["val", "TI"]}], "]"}]], "InlineFormula"],
 "represents a setter button whose setting ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " is set to ",
 Cell[BoxData[
  StyleBox["val", "TI"]], "InlineFormula"],
 " when the button is clicked. The button is labeled with ",
 Cell[BoxData[
  StyleBox["val", "TI"]], "InlineFormula"],
 ", and appears pressed if the value of ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 " is ",
 Cell[BoxData[
  StyleBox["val", "TI"]], "InlineFormula"],
 ", and unpressed otherwise. ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Setter",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Setter"], "[", 
   RowBox[{
    StyleBox["x", "TI"], ",", 
    StyleBox["val", "TI"], ",", 
    StyleBox["label", "TI"]}], "]"}]], "InlineFormula"],
 "labels the setter button with ",
 Cell[BoxData[
  StyleBox["label", "TI"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.4734220542434464`*^9, 3.4734220748978825`*^9}}],

Cell["\<\
Dynamically set the value to 1 or 2 by clicking the respective button:\
\>", "Text",
 CellChangeTimes->{3.4734220945383167`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Setter", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", "1"}], "]"}], ",", 
   RowBox[{"Setter", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", "2"}], "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SetterBox[Dynamic[$CellContext`x], {1}, "1"], ",", 
   SetterBox[Dynamic[$CellContext`x], {2}, "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.473439188172117*^9}]
}, Open  ]],

Cell["Example:", "Text",
 CellChangeTimes->{{3.4734221067375383`*^9, 3.4734221098887434`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Setter", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", "\"\<Small\>\""}], "]"}], ",", 
   RowBox[{"Setter", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "x", "]"}], ",", "\"\<Medium\>\""}], "]"}]}], 
  "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SetterBox[Dynamic[$CellContext`x], {"Small"}, "\<\"Small\"\>"], ",", 
   SetterBox[Dynamic[$CellContext`x], {"Medium"}, "\<\"Medium\"\>"]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.473439188203317*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", 
    RowBox[{"Dynamic", "[", "x", "]"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
TkMNo/+2q3G4xOTDxY/mN9HQvJA3bSZMEu/uFVmyR2lo8MH/nuoGkkg0rFjs
M0Hp0xVcq7iFJCLFq6s5UzTcrvMtYA5J4lbg350fBegowu3Q9DQiCaPwSU0z
STrqVd7Nc7EiCTDn78ll0PGFbPDwh/MksVZR5IWqLB3/GgZe6rQjCdnn0rKD
SnTcYOwOM/+RRGvC6jn/FdT++I2f5fxIovbCpuwhTTpeXhbelvCAJMpW6F0+
tpaOwlLFm1iPSCI1fW+XmjYdH/W/PFn+hCTcsqy/5++ko+ym1UfEUkjC1t3e
V8OQjsoSrKet6SRhucVl28N9dJQMqx6PfUsS2wjPLIvDdFxf/Lm7OYckFpU+
jR4/TceEu99stpWRBL/vi2OW56jnNT9UOFNBEiOGyYxiGzqePrS+yraSJBoq
s3yCHemoUmevu7mGJL4GftbnOdMxIKyKM1VHEp9NiqdO/kdHoX+ZEYkNJBFX
V+246jodo+7sb8htJomw8IZlIbfo+F/O0QtL/pGEn3lL2+Qd6r6b/Ppd2kjC
sZlzpMyPjjcWFBT/6CIJq+cjNK0HdHQNjlnc1EMSh62mKkKD6PiyxPzojz6S
0OkUwTPhdFwtUxR+mSSJVYkSk+VP6CjdVP1YZZAk2BdlMldH03FjvJtHzhBJ
0FcqOYTF0tHc68HuLSMkIcRV1ZiNp+MinOXFjZLERPry1rNJdLQ+VPBwfIwk
ei+teVqRQsdcbofIugmS+LNus9naDDqem/A6e4RHEj9G9SQj3tLxwMKvMWcn
SaIwa8eXufd0fO45QZhPkcR7dyMv6xw66p8++ll7mvLXlkN63z7R8biT4VP+
GZJ4MnNsYl0+HatX6B17Q/ED4tSbyCI6JpW/Hdk7S/nN87wdfxkdLbV1HSop
vrzNQc2mgo5bl7gXa8+RhLWQa0tlJR3jOIqTARTLs8p/TVXR8XcTvi+luHKz
0neNWjrmeSzdxaH4tsmlEtN6Otaz3qbMUrzRrvjT7UY6Sn1v7pyiuPeu3Lv0
Zjo27Ukebac4Kto+pekfHUWFlzRkU2ySnf9CtIOOHVrng65SLPxT+snGbspf
yU+Y6hTn9F8IPtNHR8eFY7cIql4H4c++gVw6CiZlfdhGsQqb7vlpkI5lnpol
b6n71mlbu/WO0NHD5F2SBMV+h3IcZSfo6OD/9swRSi89+0Xnt09ReTF5NuJH
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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  ImageSize->Dynamic[$CellContext`x],
  PlotRange->{{0, 10}, {-0.9999993680039507, 0.9999995755730018}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.4734391882657175`*^9}]
}, Open  ]],

Cell[TextData[{
 "A very fancy object is ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["LocatorPane",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/LocatorPane"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["x", "TI"], ",", 
      StyleBox["y", "TI"]}], "}"}], ",", 
    StyleBox["back", "TI"]}], "]"}]], "InlineFormula"],
 " which ",
 "represents a pane with a locator at position ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["x", "TI"], ",", 
    StyleBox["y", "TI"]}], "}"}]], "InlineFormula"],
 " and background ",
 Cell[BoxData[
  StyleBox["back", "TI"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.473422417349684*^9, 3.4734224342289133`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LocatorPane", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "/", "2"}], ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{"Gray", ",", 
      RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{3.473422532306286*^9}],

Cell[BoxData[
 LocatorPaneBox[{
   Rational[1, 2], 
   Rational[1, 2]}, 
  GraphicsBox[
   {GrayLevel[0.5], DiskBox[{0, 0}]}]]], "Output",
 CellChangeTimes->{3.473439188296918*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"pt", "=", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "/", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"LocatorPane", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "pt", "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{"Gray", ",", 
          RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}]}], "]"}], ",", 
     RowBox[{"Dynamic", "[", "pt", "]"}]}], "}"}]}], "]"}]], "Input",
 CellID->1410452276],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`pt$$ = {
   Rational[1, 2], 
   Rational[1, 2]}}, 
  RowBox[{"{", 
   RowBox[{
    LocatorPaneBox[Dynamic[$CellContext`pt$$], 
     GraphicsBox[
      {GrayLevel[0.5], DiskBox[{0, 0}]}]], ",", 
    DynamicBox[ToBoxes[$CellContext`pt$$, StandardForm],
     ImageSizeCache->{60.8, {11.1, 20.009999999999998`}}]}], "}"}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391883125176`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   ButtonBox["LocatorPane",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/LocatorPane"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["pt", "TI"], 
       StyleBox["1", "TR"]], ",", 
      SubscriptBox[
       StyleBox["pt", "TI"], 
       StyleBox["2", "TR"]], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
    StyleBox["back", "TI"]}], "]"}]], "InlineFormula"],
 "sets up multiple locators at positions ",
 Cell[BoxData[
  RowBox[{
   SubscriptBox[
    StyleBox["pt", "TI"], 
    StyleBox["1", "TR"]], ",", 
   SubscriptBox[
    StyleBox["pt", "TI"], 
    StyleBox["2", "TR"]], ",", 
   StyleBox["\[Ellipsis]", "TR"]}]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.4734224452269325`*^9, 3.473422450031741*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LocatorPane", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "/", "2"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], "/", "2"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"-", "1"}]}], "}"}], "/", "2"}]}], "}"}], ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{"Gray", ",", 
      RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 LocatorPaneBox[{{
    Rational[1, 2], 
    Rational[1, 2]}, {
    Rational[-1, 2], 
    Rational[1, 2]}, {
    Rational[1, 2], 
    Rational[-1, 2]}}, 
  GraphicsBox[
   {GrayLevel[0.5], DiskBox[{0, 0}]}]]], "Output",
 CellChangeTimes->{3.4734391883437176`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"pt", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "/", "2"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}], "/", "2"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}]}], "}"}], "/", "2"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"LocatorPane", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "pt", "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{"Gray", ",", 
          RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}]}], "]"}], ",", 
     RowBox[{"Dynamic", "[", "pt", "]"}]}], "}"}]}], "]"}]], "Input",
 CellID->155186329],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`pt$$ = {{
    Rational[1, 2], 
    Rational[1, 2]}, {
    Rational[-1, 2], 
    Rational[1, 2]}, {
    Rational[1, 2], 
    Rational[-1, 2]}}}, 
  RowBox[{"{", 
   RowBox[{
    LocatorPaneBox[Dynamic[$CellContext`pt$$], 
     GraphicsBox[
      {GrayLevel[0.5], DiskBox[{0, 0}]},
      ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"]]], ",", 
    DynamicBox[ToBoxes[$CellContext`pt$$, StandardForm],
     ImageSizeCache->{248.39999999999998`, {11.1, 20.009999999999998`}}]}], 
   "}"}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.473439188359318*^9}]
}, Open  ]],

Cell["\<\
Remember that the Dynamic constructs are actually part of the front end, not \
of the kernel. This is also reflected in the possibility to give any kind of \
background expression:\
\>", "Text",
 CellChangeTimes->{{3.47342259199199*^9, 3.473422629416456*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LocatorPane", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{".2", ",", ".6"}], "}"}], ",", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"HilbertMatrix", "[", "3", "]"}], "]"}]}], "]"}]], "Input",
 CellID->43144859],

Cell[BoxData[
 LocatorPaneBox[{0.2, 0.6}, 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"1", 
       FractionBox["1", "2"], 
       FractionBox["1", "3"]},
      {
       FractionBox["1", "2"], 
       FractionBox["1", "3"], 
       FractionBox["1", "4"]},
      {
       FractionBox["1", "3"], 
       FractionBox["1", "4"], 
       FractionBox["1", "5"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]]], "Output",
 CellChangeTimes->{3.4734391883749175`*^9}]
}, Open  ]],

Cell["\<\
LocatorPane is very powerful. Regard the following example: Set up an array \
of movable random points:\
\>", "Text",
 CellChangeTimes->{{3.4734226550473013`*^9, 3.4734226705693283`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"pt", "=", 
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"100", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"LocatorPane", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "pt", "]"}], ",", 
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", "1"}]}], "]"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<\[SmallCircle]\>\""}]}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`pt$$ = CompressedData["
1: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
NC7ShpDxW3H+Ls0sdOr5aeMVWvwf0XpYuw==
  "]}, 
  LocatorPaneBox[Dynamic[$CellContext`pt$$], 
   GraphicsBox[{},
    PlotRange->1],
   Appearance->"\"\[SmallCircle]\""],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391883905177`*^9}]
}, Open  ]],

Cell[TextData[{
 "You can also use it to specify conditions to differential equations: ",
 "Visualize solutions to a linear system of differential equations ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "\[Prime]",
     MultilineFunction->None], "\[LongEqual]", 
    RowBox[{"A", ".", "x"}]}], TraditionalForm]], "InlineMath"],
 ":"
}], "Text",
 CellChangeTimes->{{3.473422702627385*^9, 3.473422731456235*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pt", "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}]}], ",", 
     RowBox[{"A", "=", 
      RowBox[{"(", GridBox[{
         {
          RowBox[{"-", "1.1"}], "0.9"},
         {
          RowBox[{"-", "1.4"}], "0.3"}
        }], ")"}]}]}], "}"}], ",", 
   RowBox[{"LocatorPane", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "pt", "]"}], ",", 
     RowBox[{"Dynamic", "@", 
      RowBox[{"ParametricPlot", "[", 
       RowBox[{
        RowBox[{"MatrixExp", "[", 
         RowBox[{
          RowBox[{"A", " ", "t"}], ",", "pt"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "0", ",", "10"}], "}"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", "5"}]}], "]"}]}]}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`pt$$ = {1, 0}, $CellContext`A$$ = {{-1.1, 
  0.9}, {-1.4, 0.3}}}, 
  LocatorPaneBox[Dynamic[$CellContext`pt$$], 
   DynamicBox[ToBoxes[
     ParametricPlot[
      MatrixExp[$CellContext`A$$ $CellContext`t, $CellContext`pt$$], \
{$CellContext`t, 0, 10}, PlotRange -> 5], StandardForm],
    ImageSizeCache->{450., {221., 229.}}]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.4734391884217176`*^9}]
}, Open  ]],

Cell["Or do an interactve curve fit:", "Text",
 CellChangeTimes->{{3.4734227458238606`*^9, 3.473422754544276*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"pts", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"LocatorPane", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "pts", "]"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"InterpolatingPolynomial", "[", 
         RowBox[{"pts", ",", "x"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", "3"}]}], "]"}], "]"}]}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`pts$$ = {{0, 0}, {1, 1}, {2, 0}, {3, 2}}}, 
  LocatorPaneBox[Dynamic[$CellContext`pts$$], 
   DynamicBox[ToBoxes[
     Plot[
      InterpolatingPolynomial[$CellContext`pts$$, $CellContext`x], \
{$CellContext`x, 0, 3}, PlotRange -> 3], StandardForm],
    ImageSizeCache->{450., {140., 147.}}]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.473439188530918*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["InputFields", "Subsubsection",
 CellChangeTimes->{{3.473422907923745*^9, 3.473422909748948*^9}}],

Cell[TextData[{
 "Of course you can also directly insert something by keyborad using ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["InputField",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/InputField"], "[", "]"}]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["InputField",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/InputField"], "[", 
   StyleBox["x", "TI"], "]"}]], "InlineFormula"],
 "represents an editable input field that currently contains the expression ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.473422920793768*^9, 3.4734229517442226`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"InputField", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InputFieldBox[Dynamic[$CellContext`x]], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439188608918*^9}]
}, Open  ]],

Cell["Restrict the input to a specific type:", "Text",
 CellChangeTimes->{3.4734229665798483`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputField", "[", 
  RowBox[{"1", ",", "Number"}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  DynamicModuleBox[{Typeset`i$$ = 1}, 
   InputFieldBox[Dynamic[Typeset`i$$], Number],
   DynamicModuleValues:>{}],
  InputField[
   Setting[#], Number]& ]], "Output",
 CellChangeTimes->{3.473439188624518*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputField", "[", 
  RowBox[{"\"\<a\>\"", ",", "String"}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  DynamicModuleBox[{Typeset`i$$ = "a"}, 
   InputFieldBox[Dynamic[Typeset`i$$], String],
   DynamicModuleValues:>{}],
  InputField[
   Setting[#], String]& ]], "Output",
 CellChangeTimes->{3.4734391886401176`*^9}]
}, Open  ]],

Cell[TextData[{
 "That makes it easy to creaty a simple ",
 ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"],
 " front end:"
}], "Text",
 CellChangeTimes->{{3.473422986485483*^9, 3.4734230042539144`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Panel", "[", 
  RowBox[{"DynamicModule", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"f", "=", 
      RowBox[{"Sin", "[", "x", "]"}]}], "}"}], ",", 
    RowBox[{"Column", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"InputField", "[", 
        RowBox[{"Dynamic", "[", "f", "]"}], "]"}], ",", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"Plot", "[", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}], "]"}]}], "}"}], 
     "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 PanelBox[
  DynamicModuleBox[{$CellContext`f$$ = 0}, 
   TagBox[GridBox[{
      {
       InputFieldBox[Dynamic[$CellContext`f$$]]},
      {
       DynamicBox[ToBoxes[
         Plot[$CellContext`f$$, {$CellContext`x, -5, 5}], StandardForm],
        ImageSizeCache->{225., {71., 78.}}]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"],
   DynamicModuleValues:>{}]]], "Output",
 CellChangeTimes->{3.473439188655718*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Misc objects", "Subsubsection",
 CellChangeTimes->{{3.4734367977851024`*^9, 3.4734368104367247`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " also offers very powerful control objects for special purposes."
}], "Text",
 CellChangeTimes->{{3.4734368165051355`*^9, 3.4734368679072256`*^9}}],

Cell[TextData[{
 "Choosing colors can be done using ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ColorSetter",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ColorSetter"], "[", 
   StyleBox["color", "TI"], "]"}]], "InlineFormula"],
 "or ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ColorSlider",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ColorSlider"], "[", 
   StyleBox["color", "TI"], "]"}]], "InlineFormula"],
 " "
}], "Text",
 CellChangeTimes->{{3.47343687614404*^9, 3.4734369019308853`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ColorSlider", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   ColorSetterBox[Dynamic[$CellContext`x], "SwatchSpectrum"], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391887025185`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ColorSetter", "[", 
    RowBox[{"Dynamic", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "x", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   ColorSetterBox[Dynamic[$CellContext`x], "Swatch"], ",", 
   DynamicBox[ToBoxes[$CellContext`x, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439188718118*^9}]
}, Open  ]],

Cell[TextData[{
 "To specify a file name or a directory, etc. you can use the command ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["FileNameSetter",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/FileNameSetter"], "[", 
   StyleBox["name", "TI"], "]"}]], "InlineFormula"],
 " which ",
 "represents a file name setter which displays as a ",
 StyleBox["Browse", "MenuName"],
 " button and when clicked brings up a system file opening dialog, starting \
from the location corresponding to ",
 Cell[BoxData[
  StyleBox["name", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellChangeTimes->{{3.473436963332593*^9, 3.473436987559436*^9}}],

Cell["Assign the full path of a file to a variable:", "Text",
 CellChangeTimes->{3.4734370072310705`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"FileNameSetter", "[", 
    RowBox[{"Dynamic", "[", "f", "]"}], "]"}], ",", 
   RowBox[{"Dynamic", "[", "f", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    ButtonBox["\<\"Browse\[Ellipsis]\"\>",
     Appearance->"DialogBox",
     ButtonFunction:>DynamicDump`fnsButtonFunction[
       Dynamic[$CellContext`f], "Open", Automatic, Automatic],
     Enabled->Automatic,
     Evaluator->Automatic,
     ImageMargins->0,
     ImageSize->Automatic,
     Method->"Queued"],
    FileNameSetter[
     Dynamic[$CellContext`f], "Open", Automatic]], ",", 
   DynamicBox[ToBoxes[$CellContext`f, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391887337184`*^9}]
}, Open  ]],

Cell["Assign the full path of a directory to a variable:", "Text",
 CellChangeTimes->{3.473437011723878*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"FileNameSetter", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "f", "]"}], ",", "\"\<Directory\>\""}], "]"}], 
   ",", 
   RowBox[{"Dynamic", "[", "f", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    ButtonBox["\<\"Browse\[Ellipsis]\"\>",
     Appearance->"DialogBox",
     ButtonFunction:>DynamicDump`fnsButtonFunction[
       Dynamic[$CellContext`f], "Directory", Automatic, Automatic],
     Enabled->Automatic,
     Evaluator->Automatic,
     ImageMargins->0,
     ImageSize->Automatic,
     Method->"Queued"],
    FileNameSetter[
     Dynamic[$CellContext`f], "Directory", Automatic]], ",", 
   DynamicBox[ToBoxes[$CellContext`f, StandardForm],
    ImageSizeCache->{9., {0., 9.}}]}], "}"}]], "Output",
 CellChangeTimes->{3.473439188749318*^9}]
}, Open  ]],

Cell[TextData[{
 "A more general command to bring up a system dialog is ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["SystemDialogInput",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/SystemDialogInput"], "[", "\"\<\!\(\*
StyleBox[\"type\", \"TI\"]\)\>\"", "]"}]], "InlineFormula"],
 " which brings up an interactive system dialog and returns the value chosen \
in the dialog. ",
 "Possible types include: \"Color\", \"Directory\", and others."
}], "Text",
 CellChangeTimes->{{3.4734370711755824`*^9, 3.473437117960065*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SystemDialogInput", "[", "\"\<Color\>\"", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"RGBColor", "[", 
  RowBox[{"0", ",", "0", ",", "0.627451`"}], "]"}]], "Output",
 CellChangeTimes->{3.4734391927273254`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generalized Input", "Subsection",
 CellChangeTimes->{3.473423077603244*^9}],

Cell[TextData[{
 "Required Reading:\n\n",
 ButtonBox["Generalized Input",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/GeneralizedInput"]
}], "Text",
 CellChangeTimes->{{3.4734232099126763`*^9, 3.473423223827901*^9}}],

Cell["\<\
Starting with Version 6, a wide range of nontextual objects can be used as \
input just as easily as strings or numbers, and can be mixed with text or \
typeset notations.  Compare\
\>", "Text",
 CellChangeTimes->{{3.47342309796128*^9, 3.4734231159481115`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"n", "+", "3"}], 
    RowBox[{"n", "!"}]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", 
   FractionBox["5", "2"], ",", "1", ",", 
   FractionBox["7", "24"], ",", 
   FractionBox["1", "15"], ",", 
   FractionBox["1", "80"], ",", 
   FractionBox["1", "504"], ",", 
   FractionBox["11", "40320"], ",", 
   FractionBox["1", "30240"], ",", 
   FractionBox["13", "3628800"]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391927897253`*^9}]
}, Open  ]],

Cell["with", "Text",
 CellChangeTimes->{{3.4734231185065155`*^9, 3.4734231188653164`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"n", "+", 
     TagBox[
      SliderBox[9, {1, 10, 1}],
      Setting]}], 
    RowBox[{"n", "!"}]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", 
   FractionBox["11", "2"], ",", "2", ",", 
   FractionBox["13", "24"], ",", 
   FractionBox["7", "60"], ",", 
   FractionBox["1", "48"], ",", 
   FractionBox["1", "315"], ",", 
   FractionBox["17", "40320"], ",", 
   FractionBox["1", "20160"], ",", 
   FractionBox["19", "3628800"]}], "}"}]], "Output",
 CellChangeTimes->{3.4734391928053255`*^9}]
}, Open  ]],

Cell[TextData[{
 "For example, you might want to set up a color palette using ",
 Cell[BoxData[
  ButtonBox["ColorSetter",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ColorSetter"]], "InlineFormula"],
 " to initialize named colors that will be used in subsequent code."
}], "Text",
 CellChangeTimes->{3.473423141298156*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"edgeColor", "=", 
   TagBox[
    ColorSetterBox[RGBColor[0.165468833447776, 1., 0.14567788204776075`], 
     "Swatch"],
    Setting]}], ";"}]], "Input",
 CellID->295672832],

Cell[BoxData[
 RowBox[{
  RowBox[{"fillColor", "=", 
   TagBox[
    ColorSetterBox[RGBColor[
     0.8687724116884108, 0.5116044861524376, 0.31874570840009153`], "Swatch"],
    Setting]}], ";"}]], "Input",
 CellID->1549036865],

Cell[BoxData[
 RowBox[{
  RowBox[{"backgroundColor", "=", 
   RowBox[{"Blend", "[", 
    RowBox[{"{", 
     RowBox[{
      TagBox[
       ColorSetterBox[RGBColor[1., 0.34134431982909896`, 0.], "Swatch"],
       Setting], ",", 
      TagBox[
       ColorSetterBox[RGBColor[0.2814373998626688, 0., 0.8914015411612116], 
        "Swatch"],
       Setting]}], "}"}], "]"}]}], ";"}]], "Input",
 CellID->718337474],

Cell["\<\
Click any color swatch to get a dialog allowing you to interactively choose a \
new color. These values can then be used in subsequent programming just as if \
they had been initialized with more traditional textually specified values.\
\>", "Text",
 CellID->118970329],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"fillColor", ",", 
     RowBox[{"EdgeForm", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", "edgeColor"}], 
       "}"}], "]"}], ",", 
     RowBox[{"Polygon", "[", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "3", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
   ",", 
   RowBox[{"Background", "\[Rule]", "backgroundColor"}]}], "]"}]], "Input",
 CellID->24858775],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[0.8687724116884108, 0.5116044861524376, 0.31874570840009153`], 
   EdgeForm[{RGBColor[0.165468833447776, 1., 0.14567788204776075`], 
   AbsoluteThickness[2]}], 
   PolygonBox[{{{0.9910509170659973, 0.9389932461949779}, {0.3602875692138545,
     0.5333721232975002}, {0.0678250723638747, 0.6776123102193496}}, {{
    0.4574881408932969, 0.80368756200594}, {0.15887419809827308`, 
    0.9396648973959933}, {0.9912646480938416, 0.5904512770883901}}, {{
    0.9997944001673535, 0.9574306118163736}, {0.9606635083033952, 
    0.644674477078411}, {0.07771314973705934, 0.8378361229579778}}, {{
    0.17377816151415137`, 0.882722167702858}, {0.812622475016709, 
    0.30351327621622115`}, {0.8717079969493804, 0.5549128451860033}}, {{
    0.23771312401811207`, 0.17191652304334992`}, {0.15984075365292316`, 
    0.8213411307285317}, {0.265945012373646, 0.9933939152687399}}}]},
  Background->RGBColor[
   0.6407186999313343, 0.17067215991454948`, 0.4457007705806058]]], "Output",
 CellChangeTimes->{3.473439192836526*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulate", "Subsection",
 CellChangeTimes->{{3.473074443775434*^9, 3.4730744451014366`*^9}}],

Cell[TextData[{
 "Required Reading\n\n",
 ButtonBox["Introduction to Manipulate",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/IntroductionToManipulate"],
 "\n",
 ButtonBox["Advanced Manipulate Functionality",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/AdvancedManipulateFunctionality"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.473427029665347*^9, 3.4734270449065733`*^9}, {
  3.473429090709767*^9, 3.473429102175787*^9}}],

Cell[TextData[{
 "The general control object is ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Control",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Control"], "[", 
   RowBox[{"{", 
    RowBox[{
     StyleBox["u", "TI"], ",", 
     StyleBox["dom", "TI"]}], "}"}], "]"}]], "InlineFormula"],
 " which represents an interactive control for the variable ",
 Cell[BoxData[
  StyleBox["u", "TI"]], "InlineFormula"],
 " in the domain ",
 Cell[BoxData[
  StyleBox["dom", "TI"]], "InlineFormula"],
 ", with the type of control chosen to be appropriate for the domain \
specified."
}], "Text",
 CellChangeTimes->{{3.473426894442707*^9, 3.473426900199117*^9}}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Control",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Control"]]],
 " generate an automatically chosen control for an iterator: "
}], "Text",
 CellChangeTimes->{{3.473426914831943*^9, 3.47342693018237*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Control", "[", 
  RowBox[{"{", 
   RowBox[{"x", ",", "0", ",", "1"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  DynamicBox[ToBoxes[
    Manipulate`Control[{$CellContext`x, 0, 1}, Automatic], StandardForm],
   ImageSizeCache->{271., {11., 18.}}],
  "Control"]], "Output",
 CellChangeTimes->{3.4734391928521256`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Control", "[", 
  RowBox[{"{", 
   RowBox[{"x", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  DynamicBox[ToBoxes[
    Manipulate`Control[{$CellContext`x, {0, 0}, {1, 1}}, Automatic], 
    StandardForm],
   ImageSizeCache->{100., {46.5, 53.5}}],
  "Control"]], "Output",
 CellChangeTimes->{3.4734391928833256`*^9}]
}, Open  ]],

Cell[TextData[{
 "Usually, when you wish to create an interactive application you will use \
the command  ",
 ButtonBox["Manipulate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Manipulate"],
 Cell[BoxData[
  FormBox[".", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 ". ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " is designed to be used by anyone who is comfortable using basic commands \
such as ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  ButtonBox["Plot",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Plot"]], "InlineFormula"],
 ": it does not require learning any complicated new concepts, nor any \
understanding of user interface programming ideas."
}], "Text",
 CellChangeTimes->{{3.4734270689774156`*^9, 3.4734270953102617`*^9}, {
  3.47342718524442*^9, 3.47342718546282*^9}, {3.473427313008644*^9, 
  3.4734273877171755`*^9}}],

Cell[TextData[{
 "The output you get from evaluating a ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " command is an interactive object containing one or more controls (sliders, \
etc.) that you can use to vary the value of one or more parameters. The \
output is very much like a small applet or widget: it is not just a static \
result, it is a running program you can interact with."
}], "Text",
 CellChangeTimes->{3.473427406437208*^9}],

Cell[TextData[{
 "At its most basic, the syntax of ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " is identical to that of the humble function ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 ". Consider this ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 " command, which produces a list of numbers from one to twenty."
}], "Text",
 CellChangeTimes->{3.4734274165616264`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"n", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "10", ",", "100.10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4734274335344563`*^9, 3.4734274369352617`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",",
    "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", 
   ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", 
   "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", 
   ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", 
   "43", ",", "44", ",", "45", ",", "46", ",", "47", ",", "48", ",", "49", 
   ",", "50", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", 
   "56", ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", ",", "62", 
   ",", "63", ",", "64", ",", "65", ",", "66", ",", "67", ",", "68", ",", 
   "69", ",", "70", ",", "71", ",", "72", ",", "73", ",", "74", ",", "75", 
   ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", 
   "82", ",", "83", ",", "84", ",", "85", ",", "86", ",", "87", ",", "88", 
   ",", "89", ",", "90", ",", "91", ",", "92", ",", "93", ",", "94", ",", 
   "95", ",", "96", ",", "97", ",", "98", ",", "99", ",", "100"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.473439192898926*^9}]
}, Open  ]],

Cell[TextData[{
 "Simply replace the word ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 " with the word ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 ", and you get an interactive application that lets you explore values of ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 " with a slider."
}], "Text",
 CellChangeTimes->{3.4734274292444487`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{"n", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "10", ",", "100.10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4734274335344563`*^9, 3.473427444485675*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 10, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 10, 100.1}}, Typeset`size$$ = {18., {0., 9.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$1036$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 10}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1036$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`n$$, 
      "Specifications" :> {{$CellContext`n$$, 10, 100.1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{322., {61., 68.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391929301257`*^9}]
}, Open  ]],

Cell[TextData[{
 "You can put any expression or combination of expressions inside ",
 ButtonBox["Manipulate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Manipulate"],
 "."
}], "Text",
 CellChangeTimes->{{3.4734274709433217`*^9, 3.473427529490225*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"4", " ", "Pi"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "20", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.473427532142229*^9, 3.473427567055091*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 1, 20, 1}}, Typeset`size$$ = {
    450., {132., 139.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$1064$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1064$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Cos[$CellContext`n$$ $CellContext`x], {$CellContext`x, 0, 4 Pi}], 
      "Specifications" :> {{$CellContext`n$$, 1, 20, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{508., {188., 195.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391929925256`*^9}]
}, Open  ]],

Cell[TextData[{
 "Next to the slider you find an extra icon that when clicked opens a small \
panel with additional controls. If you want to ",
 "ee the value of the variable without having to open the subpanel, you can \
add the option ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Appearance",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Appearance"], "->", "\"\<Labeled\>\""}]], 
  "InlineFormula"],
 " to the variable specification. (Note the number displayed to the right of \
the plus sign, which is updated in real time as the slider is moved.)"
}], "Text",
 CellChangeTimes->{{3.4734275992379475`*^9, 3.4734276408276205`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"4", " ", "Pi"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "20", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.473427532142229*^9, 3.473427567055091*^9}, {
  3.4734276432456245`*^9, 3.4734276568800488`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 1, 20, 1}}, Typeset`size$$ = {
    450., {132., 139.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$1091$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1091$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Cos[$CellContext`n$$ $CellContext`x], {$CellContext`x, 0, 4 Pi}], 
      "Specifications" :> {{$CellContext`n$$, 1, 20, 1, Appearance -> 
         "Labeled"}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{508., {188., 195.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439193117326*^9}]
}, Open  ]],

Cell[TextData[{
 "Just like ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " allows you to give more than one variable range specification."
}], "Text",
 CellChangeTimes->{3.47342769767412*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"n1", " ", "x"}], "]"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"n2", " ", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "Pi"}]}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n1", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n2", ",", "1", ",", "20"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n1$$ = 1, $CellContext`n2$$ = 1, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n1$$], 1, 20}, {
      Hold[$CellContext`n2$$], 1, 20}}, Typeset`size$$ = {450., {140., 147.}},
     Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n1$1118$$ = 0, $CellContext`n2$1119$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n1$$ = 1, $CellContext`n2$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n1$$, $CellContext`n1$1118$$, 0], 
        Hold[$CellContext`n2$$, $CellContext`n2$1119$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[Sin[$CellContext`n1$$ $CellContext`x] + 
        Sin[$CellContext`n2$$ $CellContext`x], {$CellContext`x, 0, 2 Pi}, 
        PlotRange -> 2], 
      "Specifications" :> {{$CellContext`n1$$, 1, 20}, {$CellContext`n2$$, 1, 
         20}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{508., {214., 221.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391932265263`*^9}]
}, Open  ]],

Cell["\<\
Manipulate can take any expression as input not only graphical output:\
\>", "Text",
 CellChangeTimes->{{3.473427778731862*^9, 3.4734278128335223`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Expand", "[", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}], "n"], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "20", ",", "1"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 1, 20, 1}}, Typeset`size$$ = {35., {2., 9.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$1152$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1152$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Expand[($CellContext`\[Alpha] + $CellContext`\[Beta])^$CellContext`n$$],
       "Specifications" :> {{$CellContext`n$$, 1, 20, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{322., {61., 68.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439193366926*^9}]
}, Open  ]],

Cell["\<\
Note, that we have to ensure that the power is an integer number:\
\>", "Text",
 CellChangeTimes->{{3.4734278172639303`*^9, 3.4734278351883616`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Expand", "[", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", "\[Beta]"}], ")"}], "n"], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "20"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 1, 20}}, Typeset`size$$ = {35., {2., 9.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$1174$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1174$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Expand[($CellContext`\[Alpha] + $CellContext`\[Beta])^$CellContext`n$$],
       "Specifications" :> {{$CellContext`n$$, 1, 20}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{322., {61., 68.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391934449263`*^9}]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " supports a wide range of alternate ways of specifying variables, which \
generate different kinds of controls for those variables. This includes \
checkboxes, popup menus, and others in addition to sliders. "
}], "Text",
 CellChangeTimes->{3.4734278946088657`*^9}],

Cell[TextData[{
 "The principle is that for each variable, you ask for a particular set of \
possible values, and ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " automatically chooses an appropriate type of control to make those values \
conveniently available. For a typical numerical ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 "-like iterator, a slider is the most convenient interface."
}], "Text",
 CellChangeTimes->{3.473427911846896*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"n1", " ", "x"}], "]"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"n2", " ", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "Pi"}]}], "}"}], ",", 
     RowBox[{"Filling", "\[Rule]", "filling"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n1", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n2", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"filling", ",", 
     RowBox[{"{", 
      RowBox[{"None", ",", "Axis", ",", "Top", ",", "Bottom"}], "}"}]}], 
    "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`filling$$ = None, $CellContext`n1$$ = 
    1, $CellContext`n2$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n1$$], 1, 20}, {
      Hold[$CellContext`n2$$], 1, 20}, {
      Hold[$CellContext`filling$$], {None, Axis, Top, Bottom}}}, 
    Typeset`size$$ = {450., {140., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n1$1196$$ = 0, $CellContext`n2$1197$$ = 
    0, $CellContext`filling$1198$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`filling$$ = None, $CellContext`n1$$ = 
        1, $CellContext`n2$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`n1$$, $CellContext`n1$1196$$, 0], 
        Hold[$CellContext`n2$$, $CellContext`n2$1197$$, 0], 
        Hold[$CellContext`filling$$, $CellContext`filling$1198$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[Sin[$CellContext`n1$$ $CellContext`x] + 
        Sin[$CellContext`n2$$ $CellContext`x], {$CellContext`x, 0, 2 Pi}, 
        Filling -> $CellContext`filling$$, PlotRange -> 2], 
      "Specifications" :> {{$CellContext`n1$$, 1, 20}, {$CellContext`n2$$, 1, 
         20}, {$CellContext`filling$$, {None, Axis, Top, Bottom}}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{508., {230., 237.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439193507327*^9}]
}, Open  ]],

Cell["\<\
n1 and n2 are given as a range, hence the slider control, filling is given a \
list of possible values hence the row of buttons\
\>", "Text",
 CellChangeTimes->{{3.473427929958528*^9, 3.4734279586469784`*^9}}],

Cell[TextData[{
 "If you ask for a larger number of discrete values, ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " will switch to using a popup menu."
}], "Text",
 CellChangeTimes->{3.4734279780066123`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"n1", " ", "x"}], "]"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"n2", " ", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "Pi"}]}], "}"}], ",", 
     RowBox[{"Filling", "\[Rule]", "filling"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n1", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n2", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"filling", ",", 
     RowBox[{"{", 
      RowBox[{
      "None", ",", "Axis", ",", "Top", ",", "Bottom", ",", "Automatic", ",", 
       "1", ",", " ", "0.5", ",", " ", "0", ",", " ", 
       RowBox[{"-", "0.5"}], ",", " ", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`filling$$ = None, $CellContext`n1$$ = 
    1, $CellContext`n2$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n1$$], 1, 20}, {
      Hold[$CellContext`n2$$], 1, 20}, {
      Hold[$CellContext`filling$$], {
      None, Axis, Top, Bottom, Automatic, 1, 0.5, 0, -0.5, -1}}}, 
    Typeset`size$$ = {450., {140., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n1$1233$$ = 0, $CellContext`n2$1234$$ = 
    0, $CellContext`filling$1235$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`filling$$ = None, $CellContext`n1$$ = 
        1, $CellContext`n2$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`n1$$, $CellContext`n1$1233$$, 0], 
        Hold[$CellContext`n2$$, $CellContext`n2$1234$$, 0], 
        Hold[$CellContext`filling$$, $CellContext`filling$1235$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[Sin[$CellContext`n1$$ $CellContext`x] + 
        Sin[$CellContext`n2$$ $CellContext`x], {$CellContext`x, 0, 2 Pi}, 
        Filling -> $CellContext`filling$$, PlotRange -> 2], 
      "Specifications" :> {{$CellContext`n1$$, 1, 20}, {$CellContext`n2$$, 1, 
         20}, {$CellContext`filling$$, {
         None, Axis, Top, Bottom, Automatic, 1, 0.5, 0, -0.5, -1}}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{508., {233., 240.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391936633267`*^9}]
}, Open  ]],

Cell["\<\
At any time you can override the automatic choice of control objects: \
\>", "Text",
 CellChangeTimes->{{3.473427998598648*^9, 3.473428016928681*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"n1", " ", "x"}], "]"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"n2", " ", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "Pi"}]}], "}"}], ",", 
     RowBox[{"Filling", "\[Rule]", "filling"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n1", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n2", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"filling", ",", 
     RowBox[{"{", 
      RowBox[{
      "None", ",", "Axis", ",", "Top", ",", "Bottom", ",", "Automatic", ",", 
       "2", ",", " ", "1", ",", " ", "0", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`filling$$ = None, $CellContext`n1$$ = 
    1, $CellContext`n2$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n1$$], 1, 20}, {
      Hold[$CellContext`n2$$], 1, 20}, {
      Hold[$CellContext`filling$$], {
      None, Axis, Top, Bottom, Automatic, 2, 1, 0, -1, -2}}}, 
    Typeset`size$$ = {450., {140., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n1$1271$$ = 0, $CellContext`n2$1272$$ = 
    0, $CellContext`filling$1273$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`filling$$ = None, $CellContext`n1$$ = 
        1, $CellContext`n2$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`n1$$, $CellContext`n1$1271$$, 0], 
        Hold[$CellContext`n2$$, $CellContext`n2$1272$$, 0], 
        Hold[$CellContext`filling$$, $CellContext`filling$1273$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[Sin[$CellContext`n1$$ $CellContext`x] + 
        Sin[$CellContext`n2$$ $CellContext`x], {$CellContext`x, 0, 2 Pi}, 
        Filling -> $CellContext`filling$$, PlotRange -> 2], 
      "Specifications" :> {{$CellContext`n1$$, 1, 20}, {$CellContext`n2$$, 1, 
         20}, {$CellContext`filling$$, {
         None, Axis, Top, Bottom, Automatic, 2, 1, 0, -1, -2}, ControlType -> 
         SetterBar}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{508., {230., 237.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439193866127*^9}]
}, Open  ]],

Cell["\<\
If you provide a range of parameter values, Manipulate initially sets the \
values to the lower end of the range. \
\>", "Text",
 CellChangeTimes->{{3.473428133975686*^9, 3.4734281563149257`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4734281705577507`*^9, 3.4734281915085874`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 0, 5}}, Typeset`size$$ = {450., {137., 145.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$1308$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1308$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`n$$ $CellContext`x], {$CellContext`x, -Pi, Pi}], 
      "Specifications" :> {{$CellContext`n$$, 0, 5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{508., {193., 200.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439194006528*^9}]
}, Open  ]],

Cell[TextData[{
 "In our above example that means we don't see any output because n is set to \
0 initially. We can ask Manipulate to assume a particular initial value. ",
 " This is done by using a variable specification of the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["var", "TI"], ",", 
      StyleBox["init", "TI"]}], "}"}], ",", 
    StyleBox["min", "TI"], ",", 
    StyleBox["max", "TI"]}], "}"}]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.473428197686198*^9, 3.4734282388702707`*^9}, {
  3.4734282714119277`*^9, 3.473428272160729*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1"}], "}"}], ",", "0", ",", "5"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4734281705577507`*^9, 3.4734281915085874`*^9}, {
  3.4734282406018734`*^9, 3.4734282474190855`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1}, 0, 5}}, Typeset`size$$ = {
    450., {137., 145.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$1335$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1335$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`n$$ $CellContext`x], {$CellContext`x, -Pi, Pi}], 
      "Specifications" :> {{{$CellContext`n$$, 1}, 0, 5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{508., {193., 200.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391941313276`*^9}]
}, Open  ]],

Cell[TextData[{
 "By default ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " uses the names of the variables to label each control. But you may want to \
provide longer, more descriptive labels, which can be done by using variable \
specifications of the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["var", "TI"], ",", 
      StyleBox["init", "TI"], ",", 
      StyleBox["label", "TI"]}], "}"}], ",", 
    StyleBox["min", "TI"], ",", 
    StyleBox["max", "TI"]}], "}"}]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{3.473428361642486*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<Phase\>\""}], "}"}], ",", "0", ",", 
     "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4734281705577507`*^9, 3.4734281915085874`*^9}, {
  3.4734282406018734`*^9, 3.4734282474190855`*^9}, {3.473428363155689*^9, 
  3.473428368927699*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1, "Phase"}, 0, 5}}, Typeset`size$$ = {
    450., {137., 145.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$1362$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1362$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`n$$ $CellContext`x], {$CellContext`x, -Pi, Pi}], 
      "Specifications" :> {{{$CellContext`n$$, 1, "Phase"}, 0, 5}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{508., {193., 200.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391942561283`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Beautifying the Control Area", "Subsubsection",
 CellChangeTimes->{3.4734284660378695`*^9}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " supports a number of features that allow you to rearrange, annotate, and \
generally pretty up the control area, to make it suit the needs of a \
particular example. (Advanced users should remember, however, that ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " is by no means the only way to create interactive interfaces in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", and if you cannot do what you want using ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 ", you can easily start using functions such as ",
 Cell[BoxData[
  ButtonBox["Dynamic",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Dynamic"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  ButtonBox["DynamicModule",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/DynamicModule"]], "InlineFormula"],
 " directly to create free-form, open-ended user interfaces not tied to the \
particular conventions of ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 ". These features are explained in detail in ",
 ButtonBox["\"Introduction to Dynamic\"",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/IntroductionToDynamic"],
 " and ",
 ButtonBox["\"Advanced Dynamic Functionality\"",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/AdvancedDynamicFunctionality"],
 ".)"
}], "Text",
 CellChangeTimes->{3.4734284841963015`*^9}],

Cell[TextData[{
 "You can change the placement of the controls by using the ",
 Cell[BoxData[
  ButtonBox["ControlPlacement",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ControlPlacement"]], "InlineFormula"],
 " option."
}], "Text",
 CellChangeTimes->{{3.473428546393611*^9, 3.4734285607144356`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<Phase\>\""}], "}"}], ",", "0", ",", 
     "5"}], "}"}], ",", " ", 
   RowBox[{"ControlPlacement", "\[Rule]", "Bottom"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4734281705577507`*^9, 3.4734281915085874`*^9}, {
  3.4734282406018734`*^9, 3.4734282474190855`*^9}, {3.473428363155689*^9, 
  3.473428368927699*^9}, {3.4734285054435387`*^9, 3.473428526253975*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1, "Phase"}, 0, 5}}, Typeset`size$$ = {
    449., {137., 145.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$1389$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1389$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`n$$ $CellContext`x], {$CellContext`x, -Pi, Pi}], 
      "Specifications" :> {{{$CellContext`n$$, 1, "Phase"}, 0, 5}}, 
      "Options" :> {ControlPlacement -> Bottom}, "DefaultOptions" :> {}],
     ImageSizeCache->{507., {193., 200.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439194380928*^9}]
}, Open  ]],

Cell[TextData[{
 " You can use the keyword ",
 Cell[BoxData[
  ButtonBox["Delimiter",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Delimiter"]], "InlineFormula"],
 " inserted in the sequence of variable specifications to indicate where you \
would like dividing lines put."
}], "Text",
 CellChangeTimes->{3.4734285915244904`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{"-", "m"}], " ", "Pi"}], ",", 
       RowBox[{"m", " ", "Pi"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "\"\<Range\>\""}], "}"}], ",", "0.1", ",", 
     "10"}], "}"}], ",", "Delimiter", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<Phase\>\""}], "}"}], ",", "0", ",", 
     "5"}], "}"}], ",", " ", 
   RowBox[{"ControlPlacement", "\[Rule]", "Bottom"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4734281705577507`*^9, 3.4734281915085874`*^9}, {
  3.4734282406018734`*^9, 3.4734282474190855`*^9}, {3.473428363155689*^9, 
  3.473428368927699*^9}, {3.4734285054435387`*^9, 3.473428526253975*^9}, {
  3.4734285950344963`*^9, 3.4734286526609974`*^9}, {3.473428685592655*^9, 
  3.473428696356674*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`m$$ = 1, $CellContext`n$$ = 1, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 1, "Range"}, 0.1, 10}, {{
       Hold[$CellContext`n$$], 1, "Phase"}, 0, 5}}, Typeset`size$$ = {
    449., {137., 145.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`m$1416$$ = 
    0, $CellContext`n$1417$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`m$$ = 1, $CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$1416$$, 0], 
        Hold[$CellContext`n$$, $CellContext`n$1417$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`n$$ $CellContext`x], {$CellContext`x, \
(-$CellContext`m$$) Pi, $CellContext`m$$ Pi}], 
      "Specifications" :> {{{$CellContext`m$$, 1, "Range"}, 0.1, 10}, 
        Delimiter, {{$CellContext`n$$, 1, "Phase"}, 0, 5}}, 
      "Options" :> {ControlPlacement -> Bottom}, "DefaultOptions" :> {}],
     ImageSizeCache->{507., {222., 229.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391945057287`*^9}]
}, Open  ]],

Cell["\<\
You can also insert Strings and other objects to delimit control objects\
\>", "Text",
 CellChangeTimes->{{3.473428724327523*^9, 3.4734287408947525`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{"-", "m"}], " ", "Pi"}], ",", 
       RowBox[{"m", " ", "Pi"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Label 1\>\"", ",", "12", ",", "Bold"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "1", ",", "\"\<Range\>\""}], "}"}], ",", "0.1", ",", 
     "10"}], "}"}], ",", "Delimiter", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<Phase\>\""}], "}"}], ",", "0", ",", 
     "5"}], "}"}], ",", " ", 
   RowBox[{"ControlPlacement", "\[Rule]", "Bottom"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4734281705577507`*^9, 3.4734281915085874`*^9}, {
  3.4734282406018734`*^9, 3.4734282474190855`*^9}, {3.473428363155689*^9, 
  3.473428368927699*^9}, {3.4734285054435387`*^9, 3.473428526253975*^9}, {
  3.4734285950344963`*^9, 3.4734286526609974`*^9}, {3.473428685592655*^9, 
  3.473428696356674*^9}, {3.4734287447167587`*^9, 3.473428769318002*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`m$$ = 1, $CellContext`n$$ = 1, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Style["Label 1", 12, Bold]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`m$$], 1, "Range"}, 0.1, 10}, {{
       Hold[$CellContext`n$$], 1, "Phase"}, 0, 5}}, Typeset`size$$ = {
    449., {137., 145.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`m$1448$$ = 
    0, $CellContext`n$1449$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`m$$ = 1, $CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$1448$$, 0], 
        Hold[$CellContext`n$$, $CellContext`n$1449$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`n$$ $CellContext`x], {$CellContext`x, \
(-$CellContext`m$$) Pi, $CellContext`m$$ Pi}], "Specifications" :> {
        Style["Label 1", 12, Bold], {{$CellContext`m$$, 1, "Range"}, 0.1, 10},
         Delimiter, {{$CellContext`n$$, 1, "Phase"}, 0, 5}}, 
      "Options" :> {ControlPlacement -> Bottom}, "DefaultOptions" :> {}],
     ImageSizeCache->{507., {231., 238.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439194661729*^9}]
}, Open  ]],

Cell[TextData[{
 "For creating interactive graphics examples, one of the most important \
features of ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " is the ability to place a control point, called a ",
 Cell[BoxData[
  ButtonBox["Locator",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Locator"]], "InlineFormula"],
 ", inside graphics that appear in the output area. "
}], "Text",
 CellChangeTimes->{3.473428845336936*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Line", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cos", "[", "t", "]"}], ",", 
             RowBox[{"Sin", "[", "t", "]"}]}], "}"}], ",", "pt"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", 
           RowBox[{"2.", 
            RowBox[{"Pi", "/", "n"}]}], ",", 
           RowBox[{"2.", "Pi"}], ",", 
           RowBox[{"2.", 
            RowBox[{"Pi", "/", "n"}]}]}], "}"}]}], "]"}], "]"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "1"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "30"}], "}"}], ",", "1", ",", "200", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pt", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", "Locator"}], "}"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 30, $CellContext`pt$$ = {0, 0}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 30}, 1, 200, 1}, {{
       Hold[$CellContext`pt$$], {0, 0}}, Automatic}}, Typeset`size$$ = {
    442., {217., 225.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$1481$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 30, $CellContext`pt$$ = {0, 0}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1481$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Graphics[{
         Line[
          Table[{{
             Cos[$CellContext`t], 
             Sin[$CellContext`t]}, $CellContext`pt$$}, {$CellContext`t, 
            2. (Pi/$CellContext`n$$), 2. Pi, 2. (Pi/$CellContext`n$$)}]]}, 
        PlotRange -> 1], 
      "Specifications" :> {{{$CellContext`n$$, 30}, 1, 200, 
         1}, {{$CellContext`pt$$, {0, 0}}, Automatic, ControlType -> 
         Locator}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{508., {278., 285.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391948645287`*^9}]
}, Open  ]],

Cell["And, of course you can also insert 3 dimensional graphics:", "Text",
 CellChangeTimes->{{3.4734289243822746`*^9, 3.473428935551894*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"SphericalPlot3D", "[", " ", 
     RowBox[{
      RowBox[{"\[Theta]", "+", " ", "\[Phi]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", 
        RowBox[{"a", " ", "\[Pi]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Phi]", ",", "0", ",", 
        RowBox[{"b", " ", "\[Pi]"}]}], "}"}], ",", 
      RowBox[{"SphericalRegion", "\[Rule]", "True"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", "10"}], ",", 
      RowBox[{"Ticks", "\[Rule]", "None"}], ",", 
      RowBox[{"BaseStyle", "\[Rule]", 
       RowBox[{"Opacity", "[", "opacity", "]"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "0.1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0.1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"opacity", ",", "1", ",", "0"}], "}"}]}], "]"}], "\n"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 0.1, $CellContext`b$$ = 
    0.1, $CellContext`opacity$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`a$$], 0.1, 2}, {
      Hold[$CellContext`b$$], 0.1, 2}, {
      Hold[$CellContext`opacity$$], 1, 0}}, Typeset`size$$ = {
    449., {221., 228.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`a$1504$$ = 
    0, $CellContext`b$1505$$ = 0, $CellContext`opacity$1506$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`a$$ = 0.1, $CellContext`b$$ = 
        0.1, $CellContext`opacity$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$1504$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$1505$$, 0], 
        Hold[$CellContext`opacity$$, $CellContext`opacity$1506$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      SphericalPlot3D[$CellContext`\[Theta] + $CellContext`\[Phi], \
{$CellContext`\[Theta], 0, $CellContext`a$$ Pi}, {$CellContext`\[Phi], 
         0, $CellContext`b$$ Pi}, SphericalRegion -> True, PlotRange -> 10, 
        Ticks -> None, BaseStyle -> Opacity[$CellContext`opacity$$]], 
      "Specifications" :> {{$CellContext`a$$, 0.1, 2}, {$CellContext`b$$, 0.1,
          2}, {$CellContext`opacity$$, 1, 0}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{507., {312., 319.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439194942529*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dealing with Slow Evaluations", "Subsubsection",
 CellChangeTimes->{3.4734291322214394`*^9}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " does not precompute all the possible output values you could reach by \
moving its sliders: that would be completely impractical for all but the most \
trivial cases. That means it has to calculate, format, and display the \
current value in real time as each slider is being dragged. Obviously no \
matter how fast your computer, there is a limit to how much computation can \
be done in a finite amount of time, and if the expression you use in the \
first argument to ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 " takes more than about a second to evaluate, you will not have a very \
satisfactory experience using the ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{3.4734291522362747`*^9}],

Cell[TextData[{
 "To get a feel for the problem, try dragging the following slider. While \
this example is not unacceptable, it is on the borderline of something not \
worth playing with. If the delay is increased to several seconds, it becomes \
quite pointless. (And beyond 5 seconds you will start seeing ",
 Cell[BoxData[
  ButtonBox["$Aborted",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/$Aborted"]], "InlineFormula"],
 " instead of the number, because the system is protecting itself from \
unreasonably long evaluations, which block other activity in the front end in \
this situation.)"
}], "Text",
 CellChangeTimes->{3.47342918354553*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Pause", "[", "1", "]"}], ";", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x$$], 0, 10}}, Typeset`size$$ = {9., {0., 9.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`x$1552$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`x$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$1552$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> (Pause[1]; $CellContext`x$$), 
      "Specifications" :> {{$CellContext`x$$, 0, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{320., {61., 68.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391950673294`*^9}]
}, Open  ]],

Cell[TextData[{
 "You see that while you drag the slider, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " already starts to update the calculation, which in this example case means \
it starts a pause which slows down the front end response considerably."
}], "Text",
 CellChangeTimes->{{3.4734292506724477`*^9, 3.4734292903745174`*^9}}],

Cell[TextData[{
 "The simplest improvement is to add the option ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ContinuousAction",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ContinuousAction"], "->", 
   ButtonBox["False",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/False"]}]], "InlineFormula"],
 " to the ",
 Cell[BoxData[
  ButtonBox["Manipulate",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Manipulate"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{3.473429197991155*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Pause", "[", "1", "]"}], ";", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x$$], 0, 10}}, Typeset`size$$ = {9., {0., 9.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`x$1575$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`x$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$1575$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> (Pause[1]; $CellContext`x$$), 
      "Specifications" :> {{$CellContext`x$$, 0, 10}}, 
      "Options" :> {ContinuousAction -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{320., {61., 68.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391962061315`*^9}]
}, Open  ]],

Cell["\<\
In this example the slider moves smoothly and instantaneously as it is \
dragged, but the value in the output area does not attempt to track in real \
time. Instead it updates only when the slider is released.\
\>", "Text",
 CellChangeTimes->{3.473429310857353*^9}],

Cell[TextData[{
 "A more subtle difference is that when the value updates in this example, it \
does so without blocking other activity in the front end. You can see this by \
the fact that the cell bracket becomes outlined for a second each time the \
slider is released, and you can continue typing or doing other work in the \
front end during that second. There is no 5-second limit to such nonblocking \
evaluations, so by using the ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["ContinuousAction",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ContinuousAction"], "->", 
   ButtonBox["False",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/False"]}]], "InlineFormula"],
 " option, arbitrarily long evaluations can be used."
}], "Text",
 CellChangeTimes->{3.473429347829418*^9}],

Cell[TextData[{
 "A more sophisticated alternative is to use the ",
 Cell[BoxData[
  ButtonBox["ControlActive",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ControlActive"]], "InlineFormula"],
 " function to present an alternative, simpler and faster display while the \
slider is being dragged, and do the long computation only when it is \
released. "
}], "Text",
 CellChangeTimes->{3.4734293610270414`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ControlActive", "[", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"Pause", "[", "1", "]"}], ";", 
      RowBox[{"Framed", "[", "x", "]"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x$$], 0, 10}}, Typeset`size$$ = {21., {11., 18.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`x$1598$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`x$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$1598$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ControlActive[$CellContext`x$$, Pause[1]; Framed[$CellContext`x$$]], 
      "Specifications" :> {{$CellContext`x$$, 0, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{320., {67., 74.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439198187335*^9}]
}, Open  ]],

Cell[TextData[{
 "This is a slightly more reasonable example. ",
 " This example shows how the default behavior of ",
 Cell[BoxData[
  ButtonBox["DensityPlot",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/DensityPlot"]], "InlineFormula"],
 " is to use fewer sample points while the slider is being dragged."
}], "Text",
 CellChangeTimes->{{3.473429401119112*^9, 3.4734294136615343`*^9}, {
  3.473429457528811*^9, 3.4734294579656115`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DensityPlot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", 
       RowBox[{"x", "/", "y"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"PlotPoints", "\[Rule]", "150"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.4734294901952686`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 1, 10}}, Typeset`size$$ = {449., {221., 228.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$1621$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1621$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> DensityPlot[
        Sin[$CellContext`n$$ ($CellContext`x/$CellContext`y)], \
{$CellContext`x, -2, 2}, {$CellContext`y, -2, 2}, PlotPoints -> 150], 
      "Specifications" :> {{$CellContext`n$$, 1, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{507., {277., 284.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439198374535*^9}]
}, Open  ]],

Cell[TextData[{
 "But still there is a slight delay in response when you drag the slider. \
Using ",
 ButtonBox["ControlActive",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ControlActive"],
 " with explicit settings improves the performance considerably. "
}], "Text",
 CellChangeTimes->{{3.473429516075714*^9, 3.473429533204544*^9}, {
  3.473436429792856*^9, 3.4734364626341133`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DensityPlot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"n", " ", 
       RowBox[{"x", "/", "y"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"PlotPoints", "\[Rule]", 
      RowBox[{"ControlActive", "[", 
       RowBox[{"30", ",", "150"}], "]"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], 1, 10}}, Typeset`size$$ = {449., {221., 228.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$1665$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1665$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> DensityPlot[
        Sin[$CellContext`n$$ ($CellContext`x/$CellContext`y)], \
{$CellContext`x, -2, 2}, {$CellContext`y, -2, 2}, PlotPoints -> 
        ControlActive[30, 150]], 
      "Specifications" :> {{$CellContext`n$$, 1, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{507., {277., 284.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391990609365`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsection",
 CellChangeTimes->{{3.473428490841913*^9, 3.473428491996315*^9}}],

Cell[TextData[{
 "Using ",
 ButtonBox["Manipulate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Manipulate"],
 ", we can create an dynamic front-end to a code we developed earlier:"
}], "Text",
 CellChangeTimes->{{3.467977844392621*^9, 3.467977868900264*^9}, {
  3.473437911676263*^9, 3.4734379176354733`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "c", ",", "mirror", ",", "ini", ",", "reflP", ",", "normV", ",", 
       "normals", ",", "normalsV", ",", "inV", ",", "out", ",", "outVecs"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mirror", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Spherical\>\"", ",", "\"\<Eliptical\>\"", ",", 
         "\"\<Parabolic\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.1", ",", 
          SqrtBox[
           RowBox[{"a", "-", "b"}]], ",", "a"}], "}"}], "[", 
        RowBox[{"[", "m", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ini", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "1", ",", 
                RowBox[{"1", "/", "a"}]}], "}"}], "[", 
              RowBox[{"[", "m", "]"}], "]"}], ",", "s"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"Re", "@", 
                  SqrtBox[
                   RowBox[{
                    SuperscriptBox["a", "2"], "-", 
                    SuperscriptBox["s", "2"]}]]}]}], ",", 
                RowBox[{"-", 
                 RowBox[{"Re", "@", 
                  FractionBox[
                   SqrtBox[
                    RowBox[{"1", "-", 
                    FractionBox[
                    SuperscriptBox["s", "2"], "b"]}]], 
                   SqrtBox["a"]]}]}], ",", 
                FractionBox[
                 SuperscriptBox["s", "2"], 
                 RowBox[{"4", "a"}]]}], "}"}], "[", 
              RowBox[{"[", "m", "]"}], "]"}], ",", "s"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"s", ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{".96", " ", "a"}], ",", 
              RowBox[{"0.96", " ", "a"}], " ", ",", 
              RowBox[{"1", "/", "a"}]}], "}"}], "[", 
            RowBox[{"[", "m", "]"}], "]"}], ",", 
           RowBox[{"-", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{".96", " ", "a"}], ",", 
               RowBox[{"0.96", " ", "a"}], " ", ",", 
               RowBox[{"1", "/", "a"}]}], "}"}], "[", 
             RowBox[{"[", "m", "]"}], "]"}]}], ",", 
           RowBox[{"-", "0.06"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reflP", "=", 
       RowBox[{"ini", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"normV", "=", 
       RowBox[{"{", 
        RowBox[{"reflP", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox[
             SqrtBox[
              RowBox[{"a", " ", "b"}]], "2"], 
            RowBox[{"{", 
             RowBox[{
              FractionBox[
               RowBox[{"2", " ", 
                RowBox[{"#", "[", 
                 RowBox[{"[", 
                  RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "a"], ",", 
              FractionBox[
               RowBox[{"2", 
                RowBox[{"#", "[", 
                 RowBox[{"[", 
                  RowBox[{"2", ",", "2"}], "]"}], "]"}]}], "b"]}], "}"}]}], 
           "&"}], "/@", "ini"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", 
             FractionBox[
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"2", ",", "2"}], "]"}], "]"}], 
              RowBox[{"2", "c"}]]}], "}"}], "&"}], "/@", "ini"}]}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"normals", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"reflP", ",", 
          RowBox[{"(", 
           RowBox[{"reflP", "-", 
            RowBox[{"normV", "[", 
             RowBox[{"[", "m", "]"}], "]"}]}], ")"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"normalsV", "=", 
       RowBox[{
        RowBox[{"normals", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], "-", 
        RowBox[{"normals", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"inV", "=", 
       RowBox[{
        RowBox[{"ini", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], "-", 
        RowBox[{"ini", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"out", "=", 
       RowBox[{"inV", "-", 
        RowBox[{"2", 
         FractionBox[
          RowBox[{" ", 
           RowBox[{"MapThread", "[", 
            RowBox[{"Dot", ",", 
             RowBox[{"{", 
              RowBox[{"inV", ",", "normalsV"}], "}"}]}], "]"}]}], 
          RowBox[{" ", 
           RowBox[{"MapThread", "[", 
            RowBox[{"Dot", ",", 
             RowBox[{"{", 
              RowBox[{"normalsV", ",", "normalsV"}], "}"}]}], "]"}]}]], "*", 
         "normalsV"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"outVecs", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"reflP", ",", 
          RowBox[{"reflP", "+", 
           RowBox[{"out", "/", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"3", ",", "3", ",", ".75"}], "}"}], "[", 
             RowBox[{"[", "m", "]"}], "]"}]}]}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Line", "@", "reflP"}], ",", "Thin", ",", 
           RowBox[{"GrayLevel", "[", "0.6", "]"}], ",", 
           RowBox[{"Line", "/@", "normals"}], ",", "Blue", ",", 
           RowBox[{"Line", "@", "outVecs"}], ",", 
           RowBox[{"Line", "@", "ini"}], ",", 
           RowBox[{"{", 
            RowBox[{"Black", ",", 
             RowBox[{"Disk", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", "0.03"}], "]"}], ",", 
             "Red", ",", 
             RowBox[{"Disk", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"c", ",", "0"}], "}"}], ",", "0.02"}], "]"}], ",", 
             RowBox[{"Disk", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "c"}], ",", "0"}], "}"}], ",", "0.02"}], 
              "]"}]}], "}"}], ",", "Black", ",", 
           RowBox[{"Thickness", "[", "0.005", "]"}], ",", 
           RowBox[{"Line", "@", "reflP"}]}], "}"}], "]"}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", 
              RowBox[{"-", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"1", "/", "a"}], ",", 
              RowBox[{
               RowBox[{"-", "1"}], "/", "a"}]}], "}"}]}], "}"}], "[", 
          RowBox[{"[", "m", "]"}], "]"}]}]}], "]"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "\"\<Sperical\>\""}], ",", 
       RowBox[{"2", "\[Rule]", "\"\<Elliptical\>\""}], ",", 
       RowBox[{"3", "\[Rule]", "\"\<Parabolic\>\""}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "1"}], "}"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", "0.6"}], "}"}], ",", "0", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4677224001599965`*^9, 3.467722435244458*^9}, {
   3.467724254118922*^9, 3.467724323133444*^9}, {3.467724370354727*^9, 
   3.4677244438152556`*^9}, {3.4677244852333283`*^9, 
   3.4677245218933926`*^9}, {3.4679752673088865`*^9, 3.467975321612582*^9}, {
   3.4679753581790466`*^9, 3.467975499624495*^9}, {3.467975554832992*^9, 
   3.4679756417875447`*^9}, 3.467977841023015*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 1, $CellContext`b$$ = 
    0.6, $CellContext`m$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 1}, {
      1 -> "Sperical", 2 -> "Elliptical", 3 -> "Parabolic"}}, {{
       Hold[$CellContext`a$$], 1}, 0, 1}, {{
       Hold[$CellContext`b$$], 0.6}, 0, 1}}, Typeset`size$$ = {
    450., {212., 220.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`m$1709$$ = 
    False, $CellContext`a$1710$$ = 0, $CellContext`b$1711$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`a$$ = 1, $CellContext`b$$ = 
        0.6, $CellContext`m$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$1709$$, False], 
        Hold[$CellContext`a$$, $CellContext`a$1710$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$1711$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`c$, $CellContext`mirror$, $CellContext`ini$, \
$CellContext`reflP$, $CellContext`normV$, $CellContext`normals$, \
$CellContext`normalsV$, $CellContext`inV$, $CellContext`out$, \
$CellContext`outVecs$}, $CellContext`mirror$ = {
          "Spherical", "Eliptical", "Parabolic"}; $CellContext`c$ = 
         Part[{0.1, ($CellContext`a$$ - $CellContext`b$$)^
            Rational[
             1, 2], $CellContext`a$$}, $CellContext`m$$]; $CellContext`ini$ = 
         Table[{{
             
             Part[{1, 1, 
               1/$CellContext`a$$}, $CellContext`m$$], $CellContext`s}, {
             
             Part[{-Re[($CellContext`a$$^2 - $CellContext`s^2)^
                 Rational[1, 2]], -
               Re[(1 - $CellContext`s^2/$CellContext`b$$)^
                  Rational[1, 2]/$CellContext`a$$^
                 Rational[1, 2]], $CellContext`s^2/(
               4 $CellContext`a$$)}, $CellContext`m$$], $CellContext`s}}, \
{$CellContext`s, 
            
            Part[{0.96 $CellContext`a$$, 0.96 $CellContext`a$$, 
              1/$CellContext`a$$}, $CellContext`m$$], -
            Part[{0.96 $CellContext`a$$, 0.96 $CellContext`a$$, 
               1/$CellContext`a$$}, $CellContext`m$$], -0.06}]; \
$CellContext`reflP$ = 
         Part[$CellContext`ini$, All, 
           2]; $CellContext`normV$ = {$CellContext`reflP$, 
           
           Map[(($CellContext`a$$ $CellContext`b$$)^Rational[1, 2]/2) {
             2 Part[#, 2, 1]/$CellContext`a$$, 2 
              Part[#, 2, 2]/$CellContext`b$$}& , $CellContext`ini$], 
           
           Map[{-1, Part[#, 2, 2]/(
             2 $CellContext`c$)}& , $CellContext`ini$]}; \
$CellContext`normals$ = 
         Transpose[{$CellContext`reflP$, $CellContext`reflP$ - 
            Part[$CellContext`normV$, $CellContext`m$$]}]; \
$CellContext`normalsV$ = 
         Part[$CellContext`normals$, All, 2] - 
          Part[$CellContext`normals$, All, 1]; $CellContext`inV$ = 
         Part[$CellContext`ini$, All, 2] - 
          Part[$CellContext`ini$, All, 
           1]; $CellContext`out$ = $CellContext`inV$ - 
          2 (MapThread[Dot, {$CellContext`inV$, $CellContext`normalsV$}]/
           MapThread[
           Dot, {$CellContext`normalsV$, $CellContext`normalsV$}]) \
$CellContext`normalsV$; $CellContext`outVecs$ = 
         Transpose[{$CellContext`reflP$, $CellContext`reflP$ + \
$CellContext`out$/Part[{3, 3, 0.75}, $CellContext`m$$]}]; Show[
          Graphics[{
            Line[$CellContext`reflP$], Thin, 
            GrayLevel[0.6], 
            Map[Line, $CellContext`normals$], Blue, 
            Line[$CellContext`outVecs$], 
            Line[$CellContext`ini$], {Black, 
             Disk[{0, 0}, 0.03], Red, 
             Disk[{$CellContext`c$, 0}, 0.02], 
             Disk[{-$CellContext`c$, 0}, 0.02]}, Black, 
            Thickness[0.005], 
            Line[$CellContext`reflP$]}], Frame -> True, PlotRange -> 
          Part[{{-1, 1}, {1, -1}, {
             1/$CellContext`a$$, (-1)/$CellContext`a$$}}, $CellContext`m$$]]],
       "Specifications" :> {{{$CellContext`m$$, 1}, {
         1 -> "Sperical", 2 -> "Elliptical", 3 -> 
          "Parabolic"}}, {{$CellContext`a$$, 1}, 0, 
         1}, {{$CellContext`b$$, 0.6}, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{508., {302., 309.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439199279337*^9}]
}, Open  ]],

Cell[TextData[{
 "Here are some further examples from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Demonstrations page:"
}], "Text",
 CellChangeTimes->{{3.4734379236726837`*^9, 3.473437949100729*^9}, {
  3.473438392987154*^9, 3.473438399367565*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Motion of the Moon: Eclipses by ",
 " ",
 ButtonBox["Marvin De Jong",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Marvin+De+Jong"]\
, None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Marvin+De+Jong"]
}], "Subsubsection",
 CellChangeTimes->{{3.473438412830389*^9, 3.473438421426004*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Graphics3D", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"GrayLevel", "[", "1", "]"}], ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<To Sun\>\"", ",", 
              RowBox[{"FontFamily", "\[Rule]", "\"\<Arial\>\""}], ",", 
              RowBox[{"FontSize", "\[Rule]", "11"}], ",", 
              RowBox[{"Hue", "[", 
               RowBox[{"0.2", ",", "0.5", ",", "1"}], "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"8.5", ",", 
              RowBox[{"-", "0.7"}], ",", "0"}], "}"}]}], "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"i", ",", "White", ",", 
                RowBox[{"FontFamily", "\[Rule]", "\"\<Arial\>\""}], ",", 
                RowBox[{"FontSize", "\[Rule]", "11"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"7", " ", 
                 RowBox[{"Cos", "[", 
                  FractionBox[
                   RowBox[{"2", " ", "\[Pi]", " ", "i"}], "30"], "]"}], " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"6", " ", "\[Degree]", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "i"}], "30"], "+", 
                    "node"}], "]"}]}], "]"}]}], ",", 
                RowBox[{"7", " ", 
                 RowBox[{"Sin", "[", 
                  FractionBox[
                   RowBox[{"2", " ", "\[Pi]", " ", "i"}], "30"], "]"}], " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"6", " ", "\[Degree]", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "i"}], "30"], "+", 
                    "node"}], "]"}]}], "]"}]}], ",", 
                RowBox[{"7", " ", 
                 RowBox[{"Sin", "[", 
                  RowBox[{"6", " ", "\[Degree]", " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "i"}], "30"], "+", 
                    "node"}], "]"}]}], "]"}]}]}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "30", ",", "1"}], "}"}]}], "]"}], 
          ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{
             "\"\<Shadow\>\"", ",", "\"\<Label\>\"", ",", "11", ",", 
              "White"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "3"}], ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{
             "\"\<Moon's Orbit\>\"", ",", "\"\<Label\>\"", ",", "11", ",", 
              "Red"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "2"}], ",", 
              RowBox[{"-", "8"}], ",", "1"}], "}"}]}], "]"}], ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Earth\>\"", ",", "\"\<Label\>\"", ",", "11"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"Green", ",", 
            RowBox[{"Sphere", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "1"}], "]"}]}], 
           "}"}], ",", 
          RowBox[{"Sphere", "[", 
           RowBox[{
            RowBox[{"6", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Cos", "[", "theta", "]"}], " ", 
                RowBox[{"Cos", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"6", " ", "\[Degree]"}], ")"}], " ", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"Sin", "[", "theta", "]"}], " ", 
                RowBox[{"Cos", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"6", " ", "\[Degree]"}], ")"}], " ", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}], ",", 
               RowBox[{"Sin", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"6", " ", "\[Degree]"}], ")"}], " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}], "}"}]}], 
            ",", "0.4"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"GrayLevel", "[", "0", "]"}], ",", 
            RowBox[{"Cone", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.3"}], ",", "0", ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "11"}], ",", "0", ",", "0"}], "}"}]}], "}"}], 
              ",", "1"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"Black", ",", 
            RowBox[{"Cone", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"6", " ", 
                   RowBox[{"Cos", "[", "theta", "]"}], " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"6", " ", "\[Degree]", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}], ",", 
                  RowBox[{"6", " ", 
                   RowBox[{"Sin", "[", "theta", "]"}], " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"6", " ", "\[Degree]", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}], ",", 
                  RowBox[{"6", " ", 
                   RowBox[{"Sin", "[", 
                    RowBox[{"6", " ", "\[Degree]", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}]}], "}"}],
                 ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"6", " ", 
                    RowBox[{"Cos", "[", "theta", "]"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"6", " ", "\[Degree]", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}], "-", 
                   "7"}], ",", 
                  RowBox[{"6", " ", 
                   RowBox[{"Sin", "[", "theta", "]"}], " ", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"6", " ", "\[Degree]", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}], ",", 
                  RowBox[{"6", " ", 
                   RowBox[{"Sin", "[", 
                    RowBox[{"6", " ", "\[Degree]", " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"theta", "+", "node"}], "]"}]}], "]"}]}]}], 
                 "}"}]}], "}"}], ",", "0.4"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Hue", "[", 
             RowBox[{"0.2", ",", "0.5", ",", "1"}], "]"}], ",", 
            RowBox[{"Arrowheads", "\[Rule]", "Small"}], ",", 
            RowBox[{"Arrow", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"2", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"8", ",", "0", ",", "0"}], "}"}]}], "}"}], "]"}]}], 
           "}"}]}], "}"}], ",", 
        RowBox[{"BoxRatios", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"Boxed", "\[Rule]", "True"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "6.5"}], ",", "6.5"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"550", ",", "400"}], "}"}]}], ",", 
        RowBox[{"Axes", "\[Rule]", "False"}], ",", 
        RowBox[{"Lighting", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"\"\<Point\>\"", ",", 
            RowBox[{"Hue", "[", 
             RowBox[{"0.2", ",", "0.5", ",", "1"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"28", ",", "0", ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
       "]"}], "}"}], ",", 
     RowBox[{"ParametricPlot3D", "[", 
      RowBox[{
       RowBox[{"6", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Cos", "[", "x", "]"}], " ", 
           RowBox[{"Cos", "[", 
            RowBox[{"5", " ", "\[Degree]", " ", 
             RowBox[{"Cos", "[", 
              RowBox[{"x", "+", "node"}], "]"}]}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"Sin", "[", "x", "]"}], " ", 
           RowBox[{"Cos", "[", 
            RowBox[{"5", " ", "\[Degree]", " ", 
             RowBox[{"Cos", "[", 
              RowBox[{"x", "+", "node"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"5", " ", "\[Degree]", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"x", "+", "node"}], "]"}]}], "]"}]}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", 
         RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Red", ",", "Dashed", ",", 
          RowBox[{"AbsoluteThickness", "[", "1", "]"}]}], "}"}]}], ",", 
       RowBox[{"PlotPoints", "\[Rule]", "100"}], ",", 
       RowBox[{"BoxRatios", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "6.5"}], ",", "6.5"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", 
      RowBox[{"GrayLevel", "[", "0.2", "]"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theta", ",", "0", ",", "\"\<time\>\""}], "}"}], ",", "0", ",", 
     RowBox[{"360", " ", "Degree"}], ",", 
     RowBox[{"1", "Degree"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"node", ",", 
       RowBox[{"90", " ", "Degree"}], ",", "\"\<tilt\>\""}], "}"}], ",", 
     RowBox[{"90", "Degree"}], ",", 
     RowBox[{"180", "Degree"}], ",", 
     RowBox[{"1", "Degree"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{"theta", ",", "node"}], "}"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`node$$ = 90 Degree, $CellContext`theta$$ = 
    0, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`theta$$], 0, "time"}, 0, 360 Degree, Degree}, {{
       Hold[$CellContext`node$$], 90 Degree, "tilt"}, 90 Degree, 180 Degree, 
      Degree}}, Typeset`size$$ = {688., {246., 254.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`theta$1746$$ = 0, $CellContext`node$1747$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`node$$ = 90 Degree, $CellContext`theta$$ = 
        0}, "ControllerVariables" :> {
        Hold[$CellContext`theta$$, $CellContext`theta$1746$$, 0], 
        Hold[$CellContext`node$$, $CellContext`node$1747$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Show[{
         Graphics3D[{
           GrayLevel[1], 
           Text[
            Style["To Sun", FontFamily -> "Arial", FontSize -> 11, 
             Hue[0.2, 0.5, 1]], {8.5, -0.7, 0}], 
           Table[
            Text[
             
             Style[$CellContext`i, White, FontFamily -> "Arial", FontSize -> 
              11], {7 Cos[2 Pi $CellContext`i/30] 
              Cos[6 Degree Cos[2 Pi $CellContext`i/30 + $CellContext`node$$]],
               7 Sin[2 Pi $CellContext`i/30] 
              Cos[6 Degree Cos[2 Pi $CellContext`i/30 + $CellContext`node$$]],
               7 Sin[6 Degree 
                Cos[2 Pi $CellContext`i/
                   30 + $CellContext`node$$]]}], {$CellContext`i, 1, 30, 1}], 
           Text[
            Style["Shadow", "Label", 11, White], {-3, 0, 0}], 
           Text[
            Style["Moon's Orbit", "Label", 11, Red], {-2, -8, 1}], 
           Text[
            Style["Earth", "Label", 11], {0, 0, 0}], {Green, 
            Sphere[{0, 0, 0}, 1]}, 
           Sphere[
           6 {Cos[$CellContext`theta$$] 
              Cos[(6 Degree) Cos[$CellContext`theta$$ + $CellContext`node$$]],
               Sin[$CellContext`theta$$] 
              Cos[(6 Degree) Cos[$CellContext`theta$$ + $CellContext`node$$]], 
              
              Sin[(6 Degree) 
               Cos[$CellContext`theta$$ + $CellContext`node$$]]}, 0.4], {
            GrayLevel[0], 
            Cone[{{-0.3, 0, 0}, {-11, 0, 0}}, 1]}, {Black, 
            
            Cone[{{6 Cos[$CellContext`theta$$] 
               Cos[6 Degree Cos[$CellContext`theta$$ + $CellContext`node$$]], 
               6 Sin[$CellContext`theta$$] 
               Cos[6 Degree Cos[$CellContext`theta$$ + $CellContext`node$$]], 
               6 Sin[6 Degree 
                 Cos[$CellContext`theta$$ + $CellContext`node$$]]}, {
              6 Cos[$CellContext`theta$$] 
                Cos[6 Degree Cos[$CellContext`theta$$ + $CellContext`node$$]] - 
               7, 6 Sin[$CellContext`theta$$] 
               Cos[6 Degree Cos[$CellContext`theta$$ + $CellContext`node$$]], 
               6 Sin[6 Degree 
                 Cos[$CellContext`theta$$ + $CellContext`node$$]]}}, 0.4]}, {
            Hue[0.2, 0.5, 1], Arrowheads -> Small, 
            Arrow[{{2, 0, 0}, {8, 0, 0}}]}}, BoxRatios -> Automatic, Boxed -> 
          True, PlotRange -> {{-8, 8}, {-6.5, 6.5}, {-3, 3}}, 
          ImageSize -> {550, 400}, Axes -> False, Lighting -> {{"Point", 
             Hue[0.2, 0.5, 1], {28, 0, 0}}}]}, 
        ParametricPlot3D[
        6 {Cos[$CellContext`x] 
           Cos[5 Degree Cos[$CellContext`x + $CellContext`node$$]], 
           Sin[$CellContext`x] 
           Cos[5 Degree Cos[$CellContext`x + $CellContext`node$$]], 
           Sin[
           5 Degree 
            Cos[$CellContext`x + $CellContext`node$$]]}, {$CellContext`x, 0, 
          2 Pi}, PlotStyle -> {Red, Dashed, 
           AbsoluteThickness[1]}, PlotPoints -> 100, BoxRatios -> Automatic, 
         Boxed -> False, PlotRange -> {{-8, 8}, {-6.5, 6.5}, {-3, 3}}, Axes -> 
         False], Background -> GrayLevel[0.2]], 
      "Specifications" :> {{{$CellContext`theta$$, 0, "time"}, 0, 360 Degree, 
         Degree, Appearance -> 
         "Labeled"}, {{$CellContext`node$$, 90 Degree, "tilt"}, 90 Degree, 
         180 Degree, Degree, Appearance -> "Labeled"}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`theta$$, $CellContext`node$$}}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{746., {320., 327.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734391997005377`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Thermal Energy by ",
 " ",
 ButtonBox["Enrique Zeleny",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Enrique+Zeleny"]\
, None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Enrique+Zeleny"]
}], "Subsubsection",
 CellChangeTimes->{{3.473438494837763*^9, 3.4734385251642165`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ArrowHead", "[", 
   RowBox[{"pt1_", ",", "pt2_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "a", ",", "b", ",", "c", ",", "aa", ",", "bb", ",", "cc", ",", "nrm1", 
      ",", "nrm2", ",", "ttt", ",", "circ", ",", "pts", ",", "arrowpolys", 
      ",", "hdcolor", ",", "hdsz", ",", "hdrad"}], "}"}], ",", 
    RowBox[{
     RowBox[{"hdcolor", "=", "Orange"}], ";", 
     RowBox[{"hdsz", "=", ".35"}], ";", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"aa", ",", "bb", ",", "cc"}], "}"}], "=", 
      RowBox[{"pt2", "-", "pt1"}]}], ";", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"aa", "\[Equal]", "0"}], "&&", 
        RowBox[{"bb", "\[Equal]", "0"}]}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}]}]}], ",", 
       RowBox[{
        RowBox[{"aa", "\[Equal]", "0"}], "&&", 
        RowBox[{"cc", "\[Equal]", "0"}]}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}]}], ",", 
       RowBox[{
        RowBox[{"bb", "\[Equal]", "0"}], "&&", 
        RowBox[{"cc", "\[Equal]", "0"}]}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}]}]}], ",", 
       RowBox[{"aa", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"nrm1", "\[Cross]", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "bb", ",", "cc"}], "}"}], 
           RowBox[{"Norm", "[", 
            RowBox[{"{", 
             RowBox[{"bb", ",", "cc"}], "}"}], "]"}]]}]}]}], ",", 
       RowBox[{"bb", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"nrm1", "\[Cross]", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"aa", ",", "0", ",", "cc"}], "}"}], 
           RowBox[{"Norm", "[", 
            RowBox[{"{", 
             RowBox[{"aa", ",", "cc"}], "}"}], "]"}]]}]}]}], ",", 
       RowBox[{"cc", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"nrm1", "\[Cross]", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"aa", ",", "bb", ",", "0"}], "}"}], 
           RowBox[{"Norm", "[", 
            RowBox[{"{", 
             RowBox[{"aa", ",", "bb"}], "}"}], "]"}]]}]}]}], ",", "True", ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"bb", "+", "cc"}], ")"}], " ", 
              RowBox[{"Abs", "[", "aa", "]"}]}], 
             RowBox[{"aa", " ", 
              SqrtBox[
               RowBox[{
                RowBox[{"2", " ", 
                 SuperscriptBox["aa", "2"]}], "+", 
                SuperscriptBox[
                 RowBox[{"(", 
                  RowBox[{"bb", "+", "cc"}], ")"}], "2"]}]]}]]}], ",", 
           FractionBox[
            RowBox[{"Abs", "[", "aa", "]"}], 
            SqrtBox[
             RowBox[{
              RowBox[{"2", " ", 
               SuperscriptBox["aa", "2"]}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"bb", "+", "cc"}], ")"}], "2"]}]]], ",", 
           FractionBox[
            RowBox[{"Abs", "[", "aa", "]"}], 
            SqrtBox[
             RowBox[{
              RowBox[{"2", " ", 
               SuperscriptBox["aa", "2"]}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"bb", "+", "cc"}], ")"}], "2"]}]]]}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"bb", "-", "cc"}], ")"}], " ", 
              RowBox[{"Abs", "[", "aa", "]"}]}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"\[Sqrt]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"2", " ", 
                 SuperscriptBox["aa", "4"]}], "+", 
                RowBox[{
                 SuperscriptBox[
                  RowBox[{"(", 
                   RowBox[{"bb", "+", "cc"}], ")"}], "2"], " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["bb", "2"], "+", 
                   SuperscriptBox["cc", "2"]}], ")"}]}], "+", 
                RowBox[{
                 SuperscriptBox["aa", "2"], " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"3", " ", 
                    SuperscriptBox["bb", "2"]}], "+", 
                   RowBox[{"2", " ", "bb", " ", "cc"}], "+", 
                   RowBox[{"3", " ", 
                    SuperscriptBox["cc", "2"]}]}], ")"}]}]}], ")"}]}], 
             ")"}]}], ",", 
           RowBox[{"-", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["aa", "2"], "+", 
                 RowBox[{"cc", " ", 
                  RowBox[{"(", 
                   RowBox[{"bb", "+", "cc"}], ")"}]}]}], ")"}], " ", 
               RowBox[{"Abs", "[", "aa", "]"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"aa", " ", 
               RowBox[{"\[Sqrt]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", " ", 
                   SuperscriptBox["aa", "4"]}], "+", 
                  RowBox[{
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"bb", "+", "cc"}], ")"}], "2"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["bb", "2"], "+", 
                    SuperscriptBox["cc", "2"]}], ")"}]}], "+", 
                  RowBox[{
                   SuperscriptBox["aa", "2"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"3", " ", 
                    SuperscriptBox["bb", "2"]}], "+", 
                    RowBox[{"2", " ", "bb", " ", "cc"}], "+", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["cc", "2"]}]}], ")"}]}]}], ")"}]}]}], 
              ")"}]}]}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["aa", "2"], "+", 
                RowBox[{"bb", " ", 
                 RowBox[{"(", 
                  RowBox[{"bb", "+", "cc"}], ")"}]}]}], ")"}], " ", 
              RowBox[{"Abs", "[", "aa", "]"}]}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"aa", " ", 
              RowBox[{"\[Sqrt]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", " ", 
                  SuperscriptBox["aa", "4"]}], "+", 
                 RowBox[{
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"bb", "+", "cc"}], ")"}], "2"], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox["bb", "2"], "+", 
                    SuperscriptBox["cc", "2"]}], ")"}]}], "+", 
                 RowBox[{
                  SuperscriptBox["aa", "2"], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"3", " ", 
                    SuperscriptBox["bb", "2"]}], "+", 
                    RowBox[{"2", " ", "bb", " ", "cc"}], "+", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["cc", "2"]}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], "}"}]}]}]}], "]"}], ";", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"aa", "\[Equal]", "0"}], "&&", 
        RowBox[{"bb", "\[Equal]", "0"}]}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}]}]}], ",", 
       RowBox[{
        RowBox[{"aa", "\[Equal]", "0"}], "&&", 
        RowBox[{"cc", "\[Equal]", "0"}]}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}]}], ",", 
       RowBox[{
        RowBox[{"bb", "\[Equal]", "0"}], "&&", 
        RowBox[{"cc", "\[Equal]", "0"}]}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}]}]}], ",", 
       RowBox[{"aa", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"nrm1", "\[Cross]", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"0", ",", "bb", ",", "cc"}], "}"}], 
           RowBox[{"Norm", "[", 
            RowBox[{"{", 
             RowBox[{"bb", ",", "cc"}], "}"}], "]"}]]}]}]}], ",", 
       RowBox[{"bb", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"nrm1", "\[Cross]", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"aa", ",", "0", ",", "cc"}], "}"}], 
           RowBox[{"Norm", "[", 
            RowBox[{"{", 
             RowBox[{"aa", ",", "cc"}], "}"}], "]"}]]}]}]}], ",", 
       RowBox[{"cc", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"nrm1", "\[Cross]", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"aa", ",", "bb", ",", "0"}], "}"}], 
           RowBox[{"Norm", "[", 
            RowBox[{"{", 
             RowBox[{"aa", ",", "bb"}], "}"}], "]"}]]}]}]}], ",", "True", ",", 
       RowBox[{
        RowBox[{"nrm1", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"bb", "+", "cc"}], ")"}], " ", 
              RowBox[{"Abs", "[", "aa", "]"}]}], 
             RowBox[{"aa", " ", 
              SqrtBox[
               RowBox[{
                RowBox[{"2", " ", 
                 SuperscriptBox["aa", "2"]}], "+", 
                SuperscriptBox[
                 RowBox[{"(", 
                  RowBox[{"bb", "+", "cc"}], ")"}], "2"]}]]}]]}], ",", 
           FractionBox[
            RowBox[{"Abs", "[", "aa", "]"}], 
            SqrtBox[
             RowBox[{
              RowBox[{"2", " ", 
               SuperscriptBox["aa", "2"]}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"bb", "+", "cc"}], ")"}], "2"]}]]], ",", 
           FractionBox[
            RowBox[{"Abs", "[", "aa", "]"}], 
            SqrtBox[
             RowBox[{
              RowBox[{"2", " ", 
               SuperscriptBox["aa", "2"]}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"bb", "+", "cc"}], ")"}], "2"]}]]]}], "}"}]}], ";", 
        RowBox[{"nrm2", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"bb", "-", "cc"}], ")"}], " ", 
              RowBox[{"Abs", "[", "aa", "]"}]}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"\[Sqrt]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"2", " ", 
                 SuperscriptBox["aa", "4"]}], "+", 
                RowBox[{
                 SuperscriptBox[
                  RowBox[{"(", 
                   RowBox[{"bb", "+", "cc"}], ")"}], "2"], " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["bb", "2"], "+", 
                   SuperscriptBox["cc", "2"]}], ")"}]}], "+", 
                RowBox[{
                 SuperscriptBox["aa", "2"], " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"3", " ", 
                    SuperscriptBox["bb", "2"]}], "+", 
                   RowBox[{"2", " ", "bb", " ", "cc"}], "+", 
                   RowBox[{"3", " ", 
                    SuperscriptBox["cc", "2"]}]}], ")"}]}]}], ")"}]}], 
             ")"}]}], ",", 
           RowBox[{"-", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["aa", "2"], "+", 
                 RowBox[{"cc", " ", 
                  RowBox[{"(", 
                   RowBox[{"bb", "+", "cc"}], ")"}]}]}], ")"}], " ", 
               RowBox[{"Abs", "[", "aa", "]"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"aa", " ", 
               RowBox[{"\[Sqrt]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", " ", 
                   SuperscriptBox["aa", "4"]}], "+", 
                  RowBox[{
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"bb", "+", "cc"}], ")"}], "2"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["bb", "2"], "+", 
                    SuperscriptBox["cc", "2"]}], ")"}]}], "+", 
                  RowBox[{
                   SuperscriptBox["aa", "2"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"3", " ", 
                    SuperscriptBox["bb", "2"]}], "+", 
                    RowBox[{"2", " ", "bb", " ", "cc"}], "+", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["cc", "2"]}]}], ")"}]}]}], ")"}]}]}], 
              ")"}]}]}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["aa", "2"], "+", 
                RowBox[{"bb", " ", 
                 RowBox[{"(", 
                  RowBox[{"bb", "+", "cc"}], ")"}]}]}], ")"}], " ", 
              RowBox[{"Abs", "[", "aa", "]"}]}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"aa", " ", 
              RowBox[{"\[Sqrt]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", " ", 
                  SuperscriptBox["aa", "4"]}], "+", 
                 RowBox[{
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"bb", "+", "cc"}], ")"}], "2"], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox["bb", "2"], "+", 
                    SuperscriptBox["cc", "2"]}], ")"}]}], "+", 
                 RowBox[{
                  SuperscriptBox["aa", "2"], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"3", " ", 
                    SuperscriptBox["bb", "2"]}], "+", 
                    RowBox[{"2", " ", "bb", " ", "cc"}], "+", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["cc", "2"]}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], "}"}]}]}]}], "]"}], ";", 
     RowBox[{"hdrad", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "hdsz", "]"}], "===", "UniformSize"}], ",", 
        FractionBox[
         RowBox[{
         "hdsz", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "5"],
         ",", 
        RowBox[{
         FractionBox["1", "5"], " ", 
         RowBox[{"\[Sqrt]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"pt2", "-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"hdsz", " ", "pt1"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "-", "hdsz"}], ")"}], " ", "pt2"}]}], ")"}]}], 
             ")"}], ".", 
            RowBox[{"(", 
             RowBox[{"pt2", "-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"hdsz", " ", "pt1"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "-", "hdsz"}], ")"}], " ", "pt2"}]}], ")"}]}], 
             ")"}]}], ")"}]}]}]}], "]"}]}], ";", 
     RowBox[{
      RowBox[{"circ1", "[", "ttt_", "]"}], ":=", 
      RowBox[{
       RowBox[{"hdrad", " ", "nrm1", " ", 
        RowBox[{"Cos", "[", "ttt", "]"}]}], "+", 
       RowBox[{"hdrad", " ", "nrm2", " ", 
        RowBox[{"Sin", "[", "ttt", "]"}]}], "+", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"hdsz", " ", "pt1"}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", "hdsz"}], ")"}], " ", "pt2"}]}], ")"}]}]}], ";", 
     RowBox[{
      RowBox[{"circ2", "[", "ttt_", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"hdvec", "=", 
         RowBox[{"pt2", "+", 
          FractionBox[
           RowBox[{
            RowBox[{
            "hdsz", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            " ", 
            RowBox[{"(", 
             RowBox[{"pt1", "-", "pt2"}], ")"}]}], 
           RowBox[{"Norm", "[", 
            RowBox[{"pt1", "-", "pt2"}], "]"}]]}]}], ";", 
        RowBox[{
         RowBox[{"hdrad", " ", "nrm1", " ", 
          RowBox[{"Cos", "[", "ttt", "]"}]}], "+", 
         RowBox[{"hdrad", " ", "nrm2", " ", 
          RowBox[{"Sin", "[", "ttt", "]"}]}], "+", "hdvec"}]}], ")"}]}], ";", 
     RowBox[{"pts", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "hdsz", "]"}], "===", "UniformSize"}], ",", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"circ2", "[", "t", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "0", ",", 
               RowBox[{"2", " ", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}], 
           "]"}], ",", "2", ",", "1"}], "]"}], ",", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"circ1", "[", "t", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "0", ",", 
               RowBox[{"2", " ", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}], 
           "]"}], ",", "2", ",", "1"}], "]"}]}], "]"}]}], ";", 
     RowBox[{"arrowpolys", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"EdgeForm", "[", "]"}], ",", 
           RowBox[{"SurfaceColor", "[", "hdcolor", "]"}], ",", 
           RowBox[{"Line", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Rest", "@", "#1"}], ",", 
                RowBox[{"{", "pt2", "}"}]}], "}"}], ",", "1"}], "]"}], 
            "]"}]}], "}"}], "&"}], ")"}], "/@", "pts"}]}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"Arrow3D", "[", 
   RowBox[{"pt1_", ",", "pt2_", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Chop", "[", 
      RowBox[{"pt2", "-", "pt1"}], "]"}], "\[Equal]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ",", 
    RowBox[{"Point", "[", "pt1", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{"pt1", ",", "pt2"}], "}"}], "]"}], ",", 
      RowBox[{"ArrowHead", "[", 
       RowBox[{"pt1", ",", "pt2", ",", "opts"}], "]"}]}], "}"}]}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.432826265759576*^9, 3.432826272596896*^9}, 
   3.432826418035779*^9, 3.43282648956938*^9, {3.432826554389298*^9, 
   3.432826554860876*^9}, {3.432826661907155*^9, 3.432826662299217*^9}, {
   3.432826704601486*^9, 3.432826751469883*^9}, 3.432826787186364*^9, {
   3.432826896773444*^9, 3.4328269199940653`*^9}, {3.432830394771428*^9, 
   3.43283039539532*^9}, {3.432830521975737*^9, 3.4328305740941772`*^9}, 
   3.432830636837673*^9, 3.4328307155549707`*^9, {3.4328307633037567`*^9, 
   3.43283076379887*^9}, {3.4328310406034737`*^9, 3.43283104642714*^9}, 
   3.432831076683638*^9, 3.432844492615883*^9, {3.4328446036814957`*^9, 
   3.432844616587982*^9}, {3.432844947317424*^9, 3.432844972182609*^9}, {
   3.432845020979307*^9, 3.4328450292506227`*^9}, {3.433767618361726*^9, 
   3.433767635176675*^9}, {3.433767779450214*^9, 3.43376777990285*^9}},
 CellID->436151219],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"SeedRandom", "[", "seed", "]"}], ";", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"arrows", "=", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"particles", ",", "3"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"dirs", "=", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"particles", ",", "2"}], "}"}]}], "]"}]}]}], "}"}], ",", 
      RowBox[{"Graphics3D", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Orange", ",", 
          RowBox[{"Thickness", "[", ".0025", "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Arrow3D", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", 
               RowBox[{"energy", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Sin", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], 
                   RowBox[{"Cos", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Sin", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], 
                   RowBox[{"Sin", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}], "]"}]}], ",", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}]}]}],
               ",", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", 
               RowBox[{"energy", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Sin", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], 
                   RowBox[{"Cos", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Sin", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], 
                   RowBox[{"Sin", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}], "]"}]}], ",", 
                  RowBox[{"Cos", "[", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}]}], 
                 "}"}]}]}]}], "]"}], "&"}], "/@", 
           RowBox[{"Transpose", "@", 
            RowBox[{"{", 
             RowBox[{"arrows", ",", "dirs"}], "}"}]}]}], ",", "Red", ",", 
          RowBox[{"Point", "/@", "arrows"}], ",", 
          RowBox[{
           RowBox[{"ColorData", "[", "\"\<TemperatureMap\>\"", "]"}], "[", 
           RowBox[{"10", "energy"}], "]"}], ",", 
          RowBox[{"Opacity", "[", "op", "]"}], ",", 
          RowBox[{"EdgeForm", "[", "]"}], ",", 
          RowBox[{"Cuboid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"400", ",", "400"}], "}"}]}]}], "]"}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"energy", ",", ".05"}], "}"}], ",", ".01", ",", ".1", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"particles", ",", "100"}], "}"}], ",", "10", ",", "250", ",", 
     "1", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"seed", ",", 
     SuperscriptBox["10", "5"], ",", 
     SuperscriptBox["10", "6"], ",", "1", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"op", ",", ".5", ",", "\"\<opacity\>\""}], "}"}], ",", "0.15", 
     ",", ".5", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.35696210375764*^9, {3.430611330905938*^9, 3.430611337016102*^9}, {
   3.430611469615614*^9, 3.430611503097599*^9}, {3.430611551684723*^9, 
   3.430611715184547*^9}, {3.430611775401332*^9, 3.430611838761129*^9}, {
   3.430611874680682*^9, 3.430611893978063*^9}, {3.430611960665052*^9, 
   3.430611992965972*^9}, {3.430612053258915*^9, 3.43061206135492*^9}, {
   3.430612106746193*^9, 3.430612121761883*^9}, {3.430612316614575*^9, 
   3.43061235599618*^9}, {3.430612405839959*^9, 3.4306124466147327`*^9}, {
   3.43061260539743*^9, 3.430612624867989*^9}, {3.4306135316185303`*^9, 
   3.430613582854815*^9}, {3.4306137717511578`*^9, 3.430613791421404*^9}, {
   3.43061383939881*^9, 3.430613853815012*^9}, {3.430613932881322*^9, 
   3.43061399360114*^9}, 3.430614037900519*^9, 3.430614483846695*^9, {
   3.430680280299295*^9, 3.4306802821049137`*^9}, {3.430680329455241*^9, 
   3.430680332275992*^9}, {3.430680373408346*^9, 3.4306804048332644`*^9}, {
   3.430681537414345*^9, 3.43068158092378*^9}, {3.430681674681933*^9, 
   3.430681675484428*^9}, {3.430682338923112*^9, 3.4306823562123833`*^9}, {
   3.430682418750822*^9, 3.4306824494407053`*^9}, {3.4306825361342487`*^9, 
   3.4306826011312323`*^9}, {3.430683336900999*^9, 3.430683345522093*^9}, {
   3.432579318032097*^9, 3.432579360605245*^9}, {3.432580133236186*^9, 
   3.432580162453014*^9}, {3.432580373530643*^9, 3.432580388697446*^9}, {
   3.432580697948224*^9, 3.432580700858357*^9}, {3.432580771695649*^9, 
   3.432580787904258*^9}, {3.432586382471599*^9, 3.4325863847881107`*^9}, {
   3.432826105334461*^9, 3.432826125420826*^9}, {3.43282619537532*^9, 
   3.432826204796871*^9}, {3.432826606602309*^9, 3.432826626268255*^9}, {
   3.432826779266685*^9, 3.432826806825968*^9}, {3.432845129106118*^9, 
   3.4328451319092617`*^9}, {3.4334474442128687`*^9, 3.433447449914015*^9}, {
   3.4337663114698277`*^9, 3.4337663131303577`*^9}, {3.433766452222702*^9, 
   3.433766453368546*^9}, {3.433767881431341*^9, 3.4337678851881533`*^9}, {
   3.433811714671875*^9, 3.4338117956875*^9}},
 CellID->1381273729],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`energy$$ = 0.05, $CellContext`op$$ = 
    0.5, $CellContext`particles$$ = 100, $CellContext`seed$$ = 100000, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`energy$$], 0.05}, 0.01, 0.1}, {{
       Hold[$CellContext`particles$$], 100}, 10, 250, 1}, {
      Hold[$CellContext`seed$$], 100000, 1000000, 1}, {{
       Hold[$CellContext`op$$], 0.5, "opacity"}, 0.15, 0.5}}, 
    Typeset`size$$ = {500., {246., 254.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`energy$1845$$ = 0, $CellContext`particles$1846$$ = 
    0, $CellContext`seed$1847$$ = 0, $CellContext`op$1848$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`energy$$ = 0.05, $CellContext`op$$ = 
        0.5, $CellContext`particles$$ = 100, $CellContext`seed$$ = 100000}, 
      "ControllerVariables" :> {
        Hold[$CellContext`energy$$, $CellContext`energy$1845$$, 0], 
        Hold[$CellContext`particles$$, $CellContext`particles$1846$$, 0], 
        Hold[$CellContext`seed$$, $CellContext`seed$1847$$, 0], 
        Hold[$CellContext`op$$, $CellContext`op$1848$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> (SeedRandom[$CellContext`seed$$]; 
       With[{$CellContext`arrows$ = 
          RandomReal[{0, 
            1}, {$CellContext`particles$$, 3}], $CellContext`dirs$ = 
          RandomReal[{0, 2 Pi}, {$CellContext`particles$$, 2}]}, 
         Graphics3D[{Orange, 
           Thickness[0.0025], 
           Map[$CellContext`Arrow3D[Part[#, 1] - $CellContext`energy$$ {Sin[
                 Part[#, 2, 1]] Cos[
                 Part[#, 2, 2]], Sin[
                 Part[#, 2, 1]] Sin[
                 Part[#, 2, 2]], 
               Cos[
                Part[#, 2, 1]]}, Part[#, 1] + $CellContext`energy$$ {Sin[
                  Part[#, 2, 1]] Cos[
                  Part[#, 2, 2]], Sin[
                  Part[#, 2, 1]] Sin[
                  Part[#, 2, 2]], 
                Cos[
                 Part[#, 2, 1]]}]& , 
            Transpose[{$CellContext`arrows$, $CellContext`dirs$}]], Red, 
           Map[Point, $CellContext`arrows$], 
           ColorData["TemperatureMap"][10 $CellContext`energy$$], 
           Opacity[$CellContext`op$$], 
           EdgeForm[], 
           Cuboid[{0, 0, 0}, {1, 1, 1}]}, Boxed -> False, 
          PlotRange -> {{0, 1}, {0, 1}, {0, 1}}, ImageSize -> {400, 400}]]), 
      "Specifications" :> {{{$CellContext`energy$$, 0.05}, 0.01, 0.1, 
         ImageSize -> Tiny}, {{$CellContext`particles$$, 100}, 10, 250, 1, 
         ImageSize -> Tiny}, {$CellContext`seed$$, 100000, 1000000, 1, 
         ImageSize -> Tiny}, {{$CellContext`op$$, 0.5, "opacity"}, 0.15, 0.5, 
         ImageSize -> Tiny}}, "Options" :> {ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{730., {283., 290.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`Arrow3D[
         Pattern[$CellContext`pt1, 
          Blank[]], 
         Pattern[$CellContext`pt2, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       If[Chop[$CellContext`pt2 - $CellContext`pt1] == {0, 0, 0}, 
         Point[$CellContext`pt1], {
          Line[{$CellContext`pt1, $CellContext`pt2}], 
          $CellContext`ArrowHead[$CellContext`pt1, $CellContext`pt2, \
$CellContext`opts]}], $CellContext`ArrowHead[
         Pattern[$CellContext`pt1, 
          Blank[]], 
         Pattern[$CellContext`pt2, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`opts, 
           BlankNullSequence[]], OptionQ]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`c, \
$CellContext`aa, $CellContext`bb, $CellContext`cc, $CellContext`nrm1, \
$CellContext`nrm2, $CellContext`ttt, $CellContext`circ, $CellContext`pts, \
$CellContext`arrowpolys, $CellContext`hdcolor, $CellContext`hdsz, \
$CellContext`hdrad}, $CellContext`hdcolor = Orange; $CellContext`hdsz = 
          0.35; {$CellContext`aa, $CellContext`bb, $CellContext`cc} = \
$CellContext`pt2 - $CellContext`pt1; Which[
           
           And[$CellContext`aa == 0, $CellContext`bb == 
            0], $CellContext`nrm1 = {0, 1, 0}; $CellContext`nrm2 = {1, 0, 0}, 
           
           And[$CellContext`aa == 0, $CellContext`cc == 
            0], $CellContext`nrm1 = {1, 0, 0}; $CellContext`nrm2 = {0, 0, 1}, 
           
           And[$CellContext`bb == 0, $CellContext`cc == 
            0], $CellContext`nrm1 = {0, 0, 1}; $CellContext`nrm2 = {0, 1, 
             0}, $CellContext`aa == 
           0, $CellContext`nrm1 = {1, 0, 0}; $CellContext`nrm2 = 
            Cross[$CellContext`nrm1, {0, $CellContext`bb, $CellContext`cc}/
              Norm[{$CellContext`bb, $CellContext`cc}]], $CellContext`bb == 
           0, $CellContext`nrm1 = {0, 1, 0}; $CellContext`nrm2 = 
            Cross[$CellContext`nrm1, {$CellContext`aa, 0, $CellContext`cc}/
              Norm[{$CellContext`aa, $CellContext`cc}]], $CellContext`cc == 
           0, $CellContext`nrm1 = {0, 0, 1}; $CellContext`nrm2 = 
            Cross[$CellContext`nrm1, {$CellContext`aa, $CellContext`bb, 0}/
              Norm[{$CellContext`aa, $CellContext`bb}]], 
           True, $CellContext`nrm1 = {-((($CellContext`bb + $CellContext`cc) 
                Abs[$CellContext`aa])/($CellContext`aa 
               Sqrt[2 $CellContext`aa^2 + ($CellContext`bb + \
$CellContext`cc)^2])), Abs[$CellContext`aa]/Sqrt[
              2 $CellContext`aa^2 + ($CellContext`bb + $CellContext`cc)^2], 
              Abs[$CellContext`aa]/Sqrt[
              2 $CellContext`aa^2 + ($CellContext`bb + $CellContext`cc)^2]}; \
$CellContext`nrm2 = {(($CellContext`bb - $CellContext`cc) 
               Abs[$CellContext`aa])/Sqrt[
              2 $CellContext`aa^4 + ($CellContext`bb + $CellContext`cc)^2 \
($CellContext`bb^2 + $CellContext`cc^2) + $CellContext`aa^2 (
                 3 $CellContext`bb^2 + 2 $CellContext`bb $CellContext`cc + 
                 3 $CellContext`cc^2)], -((($CellContext`aa^2 + \
$CellContext`cc ($CellContext`bb + $CellContext`cc)) 
                Abs[$CellContext`aa])/($CellContext`aa 
               Sqrt[2 $CellContext`aa^4 + ($CellContext`bb + \
$CellContext`cc)^2 ($CellContext`bb^2 + $CellContext`cc^2) + \
$CellContext`aa^2 (3 $CellContext`bb^2 + 2 $CellContext`bb $CellContext`cc + 
                   3 $CellContext`cc^2)])), (($CellContext`aa^2 + \
$CellContext`bb ($CellContext`bb + $CellContext`cc)) 
               Abs[$CellContext`aa])/($CellContext`aa 
              Sqrt[2 $CellContext`aa^4 + ($CellContext`bb + \
$CellContext`cc)^2 ($CellContext`bb^2 + $CellContext`cc^2) + \
$CellContext`aa^2 (3 $CellContext`bb^2 + 2 $CellContext`bb $CellContext`cc + 
                  3 $CellContext`cc^2)])}]; Which[
           
           And[$CellContext`aa == 0, $CellContext`bb == 
            0], $CellContext`nrm1 = {0, 1, 0}; $CellContext`nrm2 = {1, 0, 0}, 
           
           And[$CellContext`aa == 0, $CellContext`cc == 
            0], $CellContext`nrm1 = {1, 0, 0}; $CellContext`nrm2 = {0, 0, 1}, 
           
           And[$CellContext`bb == 0, $CellContext`cc == 
            0], $CellContext`nrm1 = {0, 0, 1}; $CellContext`nrm2 = {0, 1, 
             0}, $CellContext`aa == 
           0, $CellContext`nrm1 = {1, 0, 0}; $CellContext`nrm2 = 
            Cross[$CellContext`nrm1, {0, $CellContext`bb, $CellContext`cc}/
              Norm[{$CellContext`bb, $CellContext`cc}]], $CellContext`bb == 
           0, $CellContext`nrm1 = {0, 1, 0}; $CellContext`nrm2 = 
            Cross[$CellContext`nrm1, {$CellContext`aa, 0, $CellContext`cc}/
              Norm[{$CellContext`aa, $CellContext`cc}]], $CellContext`cc == 
           0, $CellContext`nrm1 = {0, 0, 1}; $CellContext`nrm2 = 
            Cross[$CellContext`nrm1, {$CellContext`aa, $CellContext`bb, 0}/
              Norm[{$CellContext`aa, $CellContext`bb}]], 
           True, $CellContext`nrm1 = {-((($CellContext`bb + $CellContext`cc) 
                Abs[$CellContext`aa])/($CellContext`aa 
               Sqrt[2 $CellContext`aa^2 + ($CellContext`bb + \
$CellContext`cc)^2])), Abs[$CellContext`aa]/Sqrt[
              2 $CellContext`aa^2 + ($CellContext`bb + $CellContext`cc)^2], 
              Abs[$CellContext`aa]/Sqrt[
              2 $CellContext`aa^2 + ($CellContext`bb + $CellContext`cc)^2]}; \
$CellContext`nrm2 = {(($CellContext`bb - $CellContext`cc) 
               Abs[$CellContext`aa])/Sqrt[
              2 $CellContext`aa^4 + ($CellContext`bb + $CellContext`cc)^2 \
($CellContext`bb^2 + $CellContext`cc^2) + $CellContext`aa^2 (
                 3 $CellContext`bb^2 + 2 $CellContext`bb $CellContext`cc + 
                 3 $CellContext`cc^2)], -((($CellContext`aa^2 + \
$CellContext`cc ($CellContext`bb + $CellContext`cc)) 
                Abs[$CellContext`aa])/($CellContext`aa 
               Sqrt[2 $CellContext`aa^4 + ($CellContext`bb + \
$CellContext`cc)^2 ($CellContext`bb^2 + $CellContext`cc^2) + \
$CellContext`aa^2 (3 $CellContext`bb^2 + 2 $CellContext`bb $CellContext`cc + 
                   3 $CellContext`cc^2)])), (($CellContext`aa^2 + \
$CellContext`bb ($CellContext`bb + $CellContext`cc)) 
               Abs[$CellContext`aa])/($CellContext`aa 
              Sqrt[2 $CellContext`aa^4 + ($CellContext`bb + \
$CellContext`cc)^2 ($CellContext`bb^2 + $CellContext`cc^2) + \
$CellContext`aa^2 (3 $CellContext`bb^2 + 2 $CellContext`bb $CellContext`cc + 
                  3 $CellContext`cc^2)])}]; $CellContext`hdrad = 
          If[Head[$CellContext`hdsz] === $CellContext`UniformSize, 
            Part[$CellContext`hdsz, 1]/5, (1/5) Sqrt[
              
              Dot[$CellContext`pt2 - ($CellContext`hdsz $CellContext`pt1 + (
                 1 - $CellContext`hdsz) $CellContext`pt2), $CellContext`pt2 - \
($CellContext`hdsz $CellContext`pt1 + (
                 1 - $CellContext`hdsz) $CellContext`pt2)]]]; \
$CellContext`circ1[
            Pattern[$CellContext`ttt, 
             Blank[]]] := $CellContext`hdrad $CellContext`nrm1 
            Cos[$CellContext`ttt] + $CellContext`hdrad $CellContext`nrm2 
            Sin[$CellContext`ttt] + ($CellContext`hdsz $CellContext`pt1 + (
              1 - $CellContext`hdsz) $CellContext`pt2); $CellContext`circ2[
            Pattern[$CellContext`ttt, 
             
             Blank[]]] := ($CellContext`hdvec = $CellContext`pt2 + (
               Part[$CellContext`hdsz, 
                 1] ($CellContext`pt1 - $CellContext`pt2))/
              Norm[$CellContext`pt1 - $CellContext`pt2]; $CellContext`hdrad \
$CellContext`nrm1 
             Cos[$CellContext`ttt] + $CellContext`hdrad $CellContext`nrm2 
             Sin[$CellContext`ttt] + $CellContext`hdvec); $CellContext`pts = 
          If[Head[$CellContext`hdsz] === $CellContext`UniformSize, 
            Partition[
             N[
              Table[
               $CellContext`circ2[$CellContext`t], {$CellContext`t, 0, 2 Pi, 
                Pi}]], 2, 1], 
            Partition[
             N[
              Table[
               $CellContext`circ1[$CellContext`t], {$CellContext`t, 0, 2 Pi, 
                Pi}]], 2, 1]]; $CellContext`arrowpolys = Map[{
             EdgeForm[], 
             SurfaceColor[$CellContext`hdcolor], 
             Line[
              Flatten[{
                Rest[#], {$CellContext`pt2}}, 
               1]]}& , $CellContext`pts]], $CellContext`c = 1}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.4734392011669397`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Exploring the Mercedes-Benz Logo by ",
 " ",
 ButtonBox["Christopher Carlson",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Christopher+\
Carlson"], None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Christopher+Carlson"]
}], "Subsubsection",
 CellChangeTimes->{{3.4734389072468243`*^9, 3.4734389219108496`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"or", ">", 
       RowBox[{"360", "/", "n"}]}], ",", 
      RowBox[{"or", "=", 
       RowBox[{"360", "/", "n"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Graphics", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Disk", "[", "]"}], ",", "White", ",", 
          RowBox[{"Disk", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", "ir"}], "]"}]}], "}"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{"Polygon", "[", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"a", "=", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"or", "+", "90", " ", "+", " ", 
                  RowBox[{"i", " ", 
                   RowBox[{"180", "/", "n"}]}], " ", "+", " ", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"OddQ", "[", "i", "]"}], ",", "tw", ",", "0"}], 
                   "]"}]}], ")"}], "\[Degree]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"EvenQ", "[", "i", "]"}], ",", "1", ",", "sh"}], 
               "]"}], "ir", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Cos", "[", "a", "]"}], ",", 
                RowBox[{"Sin", "[", "a", "]"}]}], "}"}]}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "0", ",", 
             RowBox[{
              RowBox[{"2", "n"}], "-", "1"}]}], "}"}]}], "]"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], ",", 
      RowBox[{"ImageSize", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"400", ",", "400"}], "}"}]}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "3", ",", "\"\<points\>\""}], "}"}], ",", "3", ",", 
     "24", ",", "1", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sh", ",", ".14", ",", "\"\<sharpness\>\""}], "}"}], ",", "0", 
     ",", "1", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tw", ",", "0", ",", "\"\<twist\>\""}], "}"}], ",", "0", ",", 
     "360", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ir", ",", ".94", ",", "\"\<thickness\>\""}], "}"}], ",", "0", 
     ",", "1", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"or", ",", "0", ",", "\"\<orientation\>\""}], "}"}], ",", "0", 
     ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"360", "/", "n"}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.4421742810347652`*^9, 3.442174465567968*^9}, {
   3.442174519236792*^9, 3.442174721348527*^9}, {3.442174754233468*^9, 
   3.4421747817766447`*^9}, {3.443021988272399*^9, 3.4430220565181723`*^9}, {
   3.443022098552308*^9, 3.4430221189545927`*^9}, {3.443022165667165*^9, 
   3.4430222216197147`*^9}, {3.443022256089849*^9, 3.443022293902128*^9}, 
   3.443022342321772*^9, {3.443022393362776*^9, 3.4430224328773746`*^9}, {
   3.443022472986794*^9, 3.443022473341054*^9}, {3.4430225329252777`*^9, 
   3.443022619168076*^9}, {3.4430226511005907`*^9, 3.443022674707069*^9}, {
   3.4430227423821583`*^9, 3.443022760703376*^9}, {3.443022989169219*^9, 
   3.443023051836239*^9}, {3.4430231246755733`*^9, 3.443023127666294*^9}, {
   3.4430232123640633`*^9, 3.443023261581349*^9}, {3.443023423264864*^9, 
   3.443023542481494*^9}, {3.4430236182445*^9, 3.443023672687289*^9}, {
   3.443023731062277*^9, 3.44302375951999*^9}, 3.443024092997943*^9, {
   3.443024182473237*^9, 3.443024183944508*^9}, {3.4430246219166393`*^9, 
   3.443024622548263*^9}, {3.443026832149733*^9, 3.4430268391544333`*^9}, {
   3.443181057632081*^9, 3.4431810681042547`*^9}, {3.4431816964106903`*^9, 
   3.443181699623719*^9}, {3.44318174935065*^9, 3.4431817965188637`*^9}, {
   3.4431818657450857`*^9, 3.44318196155301*^9}, {3.443181993226995*^9, 
   3.44318208118386*^9}, {3.4431824807387667`*^9, 3.443182499980294*^9}, {
   3.44318253576329*^9, 3.443182592666667*^9}, {3.443182810498143*^9, 
   3.4431828367989197`*^9}, 3.443294922473542*^9, 3.4433747230227423`*^9, {
   3.443384045140312*^9, 3.443384123488146*^9}},
 CellID->1824684510],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`ir$$ = 0.94, $CellContext`n$$ = 
    3, $CellContext`or$$ = 0, $CellContext`sh$$ = 0.14, $CellContext`tw$$ = 0,
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 3, "points"}, 3, 24, 1}, {{
       Hold[$CellContext`sh$$], 0.14, "sharpness"}, 0, 1}, {{
       Hold[$CellContext`tw$$], 0, "twist"}, 0, 360}, {{
       Hold[$CellContext`ir$$], 0.94, "thickness"}, 0, 1}, {{
       Hold[$CellContext`or$$], 0, "orientation"}, 0, 
      Dynamic[360/$CellContext`n$$]}}, Typeset`size$$ = {500., {246., 254.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$1985$$ = 0, $CellContext`sh$1986$$ = 
    0, $CellContext`tw$1987$$ = 0, $CellContext`ir$1988$$ = 
    0, $CellContext`or$1989$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`ir$$ = 0.94, $CellContext`n$$ = 
        3, $CellContext`or$$ = 0, $CellContext`sh$$ = 0.14, $CellContext`tw$$ = 
        0}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1985$$, 0], 
        Hold[$CellContext`sh$$, $CellContext`sh$1986$$, 0], 
        Hold[$CellContext`tw$$, $CellContext`tw$1987$$, 0], 
        Hold[$CellContext`ir$$, $CellContext`ir$1988$$, 0], 
        Hold[$CellContext`or$$, $CellContext`or$1989$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> (
       If[$CellContext`or$$ > 360/$CellContext`n$$, $CellContext`or$$ = 
         360/$CellContext`n$$]; Graphics[{{
           Disk[], White, 
           Disk[{0, 0}, $CellContext`ir$$]}, 
          Polygon[
           Table[
            
            With[{$CellContext`a$ = ($CellContext`or$$ + 
                90 + $CellContext`i (180/$CellContext`n$$) + If[
                  OddQ[$CellContext`i], $CellContext`tw$$, 0]) Degree}, If[
               EvenQ[$CellContext`i], 1, $CellContext`sh$$] $CellContext`ir$$ {
               Cos[$CellContext`a$], 
               Sin[$CellContext`a$]}], {$CellContext`i, 0, 2 $CellContext`n$$ - 
             1}]]}, ImageSize -> {400, 400}]), 
      "Specifications" :> {{{$CellContext`n$$, 3, "points"}, 3, 24, 1, 
         ImageSize -> Tiny}, {{$CellContext`sh$$, 0.14, "sharpness"}, 0, 1, 
         ImageSize -> Tiny}, {{$CellContext`tw$$, 0, "twist"}, 0, 360, 
         ImageSize -> Tiny}, {{$CellContext`ir$$, 0.94, "thickness"}, 0, 1, 
         ImageSize -> Tiny}, {{$CellContext`or$$, 0, "orientation"}, 0, 
         Dynamic[360/$CellContext`n$$], ImageSize -> Tiny}}, 
      "Options" :> {
       ControlPlacement -> Left, AutorunSequencing -> {1, 2, 3, 4}}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{747., {283., 290.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.473439202570943*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Excercises", "Subsection",
 CellChangeTimes->{{3.4734373937765536`*^9, 3.4734373953153563`*^9}}],

Cell[TextData[{
 "Using ",
 ButtonBox["Manipulate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Manipulate"],
 ", create an interactive plot of the three trigonometric functions sin, cos, \
tan. The user should be able to switch between the three functions."
}], "Text",
 CellChangeTimes->{{3.4734374170929947`*^9, 3.4734374773247004`*^9}, {
  3.4734375357624025`*^9, 3.4734375357624025`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Use ",
 ButtonBox["Manipulate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Manipulate"],
 " and  ",
 ButtonBox["Locator",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Locator"],
 ", to draw a Line with a fixed end point and a user-settable end-point."
}], "Text",
 CellChangeTimes->{{3.4734374983379374`*^9, 3.4734375318935957`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["Draw a polygone with 3 user-settable edges. ", "Text",
 CellChangeTimes->{{3.473437564060852*^9, 3.4734375877260942`*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Read the Help pages on the Locator option LocatorAutoCreate \[Rule] True to \
repeat the excercise from above but allow for adding additional polygon edges \
by the user.\
\>", "Text",
 CellChangeTimes->{{3.4734376453837953`*^9, 3.473437679953456*^9}},
 FontWeight->"Bold",
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{970, 731},
WindowMargins->{{-6, Automatic}, {Automatic, -3}},
ShowSelection->True,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.25, 1.25 Inherited],
FrontEndVersion->"7.0 for Microsoft Windows (64-bit) (February 18, 2009)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "NaturalColor.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Index[06, {identities, for matrices}]"->{
  Cell[100811, 3414, 781, 23, 36, "Text",
   CellTags->{
    "T[D[Matrix Identities]]", "Index[06, {identities, for matrices}]"}]},
 "T[D[Matrix Identities]]"->{
  Cell[100811, 3414, 781, 23, 36, "Text",
   CellTags->{
    "T[D[Matrix Identities]]", "Index[06, {identities, for matrices}]"}]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Index[06, {identities, for matrices}]", 1114312, 23526},
 {"T[D[Matrix Identities]]", 1114474, 23530}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 187, 5, 157, "Title"],
Cell[757, 29, 706, 14, 152, "Subtitle"],
Cell[CellGroupData[{
Cell[1488, 47, 90, 1, 94, "Section"],
Cell[1581, 50, 881, 22, 159, "Text"],
Cell[CellGroupData[{
Cell[2487, 76, 109, 1, 46, "Subsection"],
Cell[2599, 79, 749, 22, 97, "Text"],
Cell[3351, 103, 458, 15, 56, "Text"],
Cell[CellGroupData[{
Cell[3834, 122, 303, 9, 48, "Input"],
Cell[4140, 133, 72, 1, 48, "Output"]
}, Open  ]],
Cell[4227, 137, 1032, 37, 76, "Text"],
Cell[5262, 176, 869, 31, 59, "Text"],
Cell[CellGroupData[{
Cell[6156, 211, 1461, 45, 137, "Input"],
Cell[7620, 258, 659, 19, 82, "Output"],
Cell[8282, 279, 127, 3, 48, "Output"],
Cell[8412, 284, 117, 3, 48, "Output"],
Cell[8532, 289, 117, 3, 48, "Output"]
}, Open  ]],
Cell[8664, 295, 354, 13, 35, "Text"],
Cell[CellGroupData[{
Cell[9043, 312, 161, 6, 81, "Input"],
Cell[9207, 320, 592, 21, 66, "Output"]
}, Open  ]],
Cell[9814, 344, 747, 25, 58, "Text"],
Cell[CellGroupData[{
Cell[10586, 373, 360, 13, 81, "Input"],
Cell[10949, 388, 302, 9, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11288, 402, 160, 3, 48, "Input"],
Cell[11451, 407, 73, 1, 48, "Output"]
}, Open  ]],
Cell[11539, 411, 332, 10, 56, "Text"],
Cell[CellGroupData[{
Cell[11896, 425, 852, 26, 67, "Input"],
Cell[12751, 453, 351, 13, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13139, 471, 1165, 37, 87, "Input"],
Cell[14307, 510, 1217, 45, 73, "Output"]
}, Open  ]],
Cell[15539, 558, 440, 9, 76, "Text"],
Cell[15982, 569, 580, 20, 34, "Text"],
Cell[CellGroupData[{
Cell[16587, 593, 479, 14, 48, "Input"],
Cell[17069, 609, 882, 28, 97, "Output"]
}, Open  ]],
Cell[17966, 640, 727, 25, 57, "Text"],
Cell[CellGroupData[{
Cell[18718, 669, 295, 9, 48, "Input"],
Cell[19016, 680, 73, 1, 48, "Output"]
}, Open  ]],
Cell[19104, 684, 864, 30, 78, "Text"],
Cell[CellGroupData[{
Cell[19993, 718, 329, 9, 48, "Input"],
Cell[20325, 729, 277, 9, 48, "Output"]
}, Open  ]],
Cell[20617, 741, 1086, 38, 83, "Text"],
Cell[CellGroupData[{
Cell[21728, 783, 441, 13, 71, "Input"],
Cell[22172, 798, 807, 24, 84, "Output"]
}, Open  ]],
Cell[22994, 825, 430, 15, 57, "Text"],
Cell[23427, 842, 1154, 39, 101, "Text"],
Cell[24584, 883, 378, 8, 55, "Text"],
Cell[24965, 893, 865, 29, 93, "Input"],
Cell[25833, 924, 120, 1, 34, "Text"],
Cell[25956, 927, 119, 1, 35, "Item"],
Cell[CellGroupData[{
Cell[26100, 932, 287, 8, 48, "Input"],
Cell[26390, 942, 1898, 54, 63, "Output"]
}, Open  ]],
Cell[28303, 999, 117, 1, 35, "Item"],
Cell[CellGroupData[{
Cell[28445, 1004, 216, 6, 48, "Input"],
Cell[28664, 1012, 337, 12, 48, "Output"]
}, Open  ]],
Cell[29016, 1027, 456, 18, 37, "Item"],
Cell[CellGroupData[{
Cell[29497, 1049, 689, 20, 71, "Input"],
Cell[30189, 1071, 134, 3, 48, "Output"]
}, Open  ]],
Cell[30338, 1077, 382, 14, 37, "Item"],
Cell[CellGroupData[{
Cell[30745, 1095, 872, 26, 71, "Input"],
Cell[31620, 1123, 136, 3, 48, "Output"]
}, Open  ]],
Cell[31771, 1129, 559, 19, 60, "Text"],
Cell[CellGroupData[{
Cell[32355, 1152, 648, 19, 71, "Input"],
Cell[33006, 1173, 955, 31, 70, "Output"]
}, Open  ]],
Cell[33976, 1207, 1404, 34, 232, "Text"],
Cell[35383, 1243, 487, 18, 60, "Text"],
Cell[CellGroupData[{
Cell[35895, 1265, 593, 22, 40, "Item"],
Cell[36491, 1289, 640, 25, 39, "Item"],
Cell[37134, 1316, 695, 27, 46, "Item"],
Cell[37832, 1345, 884, 36, 47, "Item"]
}, Open  ]],
Cell[38731, 1384, 725, 19, 76, "Text"],
Cell[39459, 1405, 293, 7, 57, "Text"],
Cell[CellGroupData[{
Cell[39777, 1416, 506, 15, 71, "Input"],
Cell[40286, 1433, 265, 9, 48, "Output"]
}, Open  ]],
Cell[40566, 1445, 117, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[40708, 1450, 358, 11, 71, "Input"],
Cell[41069, 1463, 237, 7, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41343, 1475, 127, 2, 48, "Input"],
Cell[41473, 1479, 233, 7, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41743, 1491, 122, 2, 48, "Input"],
Cell[41868, 1495, 263, 9, 48, "Output"]
}, Open  ]],
Cell[42146, 1507, 284, 5, 55, "Text"],
Cell[CellGroupData[{
Cell[42455, 1516, 814, 25, 71, "Input"],
Cell[43272, 1543, 3231, 92, 291, "Output"]
}, Open  ]],
Cell[46518, 1638, 108, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[46651, 1643, 1661, 43, 225, "Input"],
Cell[48315, 1688, 1400, 29, 481, "Output"]
}, Open  ]],
Cell[49730, 1720, 130, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[49885, 1725, 1162, 34, 115, "Input"],
Cell[51050, 1761, 4524, 141, 291, "Output"]
}, Open  ]],
Cell[55589, 1905, 166, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[55780, 1912, 202, 5, 48, "Input"],
Cell[55985, 1919, 87, 2, 48, "Output"]
}, Open  ]],
Cell[56087, 1924, 115, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[56227, 1929, 432, 9, 48, "Input"],
Cell[56662, 1940, 2154, 56, 225, "Output"]
}, Open  ]],
Cell[58831, 1999, 205, 5, 76, "Text"],
Cell[CellGroupData[{
Cell[59061, 2008, 519, 11, 48, "Input"],
Cell[59583, 2021, 471, 9, 29, "Message"],
Cell[60057, 2032, 2167, 56, 225, "Output"]
}, Open  ]],
Cell[62239, 2091, 183, 4, 34, "Text"],
Cell[CellGroupData[{
Cell[62447, 2099, 354, 9, 48, "Input"],
Cell[62804, 2110, 191, 5, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63032, 2120, 2120, 58, 247, "Input"],
Cell[65155, 2180, 2193, 43, 472, "Output"]
}, Open  ]],
Cell[67363, 2226, 581, 21, 37, "Text"],
Cell[CellGroupData[{
Cell[67969, 2251, 243, 8, 48, "Input"],
Cell[68215, 2261, 226, 7, 48, "Output"]
}, Open  ]],
Cell[68456, 2271, 110, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[68591, 2276, 270, 8, 50, "Input"],
Cell[68864, 2286, 216, 7, 48, "Output"]
}, Open  ]],
Cell[69095, 2296, 87, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[69207, 2301, 1687, 62, 115, "Input"],
Cell[70897, 2365, 228, 7, 48, "Output"]
}, Open  ]],
Cell[71140, 2375, 496, 17, 40, "Text"],
Cell[71639, 2394, 819, 25, 78, "Text"],
Cell[CellGroupData[{
Cell[72483, 2423, 230, 7, 48, "Input"],
Cell[72716, 2432, 288, 8, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73041, 2445, 361, 12, 48, "Input"],
Cell[73405, 2459, 395, 12, 48, "Output"]
}, Open  ]],
Cell[73815, 2474, 1114, 37, 100, "Text"],
Cell[CellGroupData[{
Cell[74954, 2515, 255, 8, 48, "Input"],
Cell[75212, 2525, 257, 8, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[75518, 2539, 101, 1, 35, "Subsection"],
Cell[75622, 2542, 835, 23, 119, "Text"],
Cell[76460, 2567, 987, 36, 57, "Text"],
Cell[CellGroupData[{
Cell[77472, 2607, 508, 17, 48, "Input"],
Cell[77983, 2626, 392, 13, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78412, 2644, 71, 1, 48, "Input"],
Cell[78486, 2647, 390, 13, 48, "Output"]
}, Open  ]],
Cell[78891, 2663, 78, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[78994, 2668, 63, 1, 48, "Input"],
Cell[79060, 2671, 754, 22, 81, "Output"]
}, Open  ]],
Cell[79829, 2696, 56, 0, 34, "Text"],
Cell[CellGroupData[{
Cell[79910, 2700, 59, 1, 48, "Input"],
Cell[79972, 2703, 304, 9, 48, "Output"]
}, Open  ]],
Cell[80291, 2715, 146, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[80462, 2722, 490, 16, 71, "Input"],
Cell[80955, 2740, 398, 13, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81390, 2758, 62, 1, 48, "Input"],
Cell[81455, 2761, 1748, 29, 480, "Output"]
}, Open  ]],
Cell[83218, 2793, 124, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[83367, 2798, 87, 2, 48, "Input"],
Cell[83457, 2802, 228, 5, 48, "Output"]
}, Open  ]],
Cell[83700, 2810, 142, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[83867, 2815, 119, 2, 48, "Input"],
Cell[83989, 2819, 397, 13, 48, "Output"]
}, Open  ]],
Cell[84401, 2835, 507, 14, 78, "Text"],
Cell[CellGroupData[{
Cell[84933, 2853, 169, 4, 48, "Input"],
Cell[85105, 2859, 72, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85214, 2865, 173, 4, 48, "Input"],
Cell[85390, 2871, 367, 12, 48, "Output"]
}, Open  ]],
Cell[85772, 2886, 131, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[85928, 2893, 115, 3, 48, "Input"],
Cell[86046, 2898, 297, 9, 48, "Output"]
}, Open  ]],
Cell[86358, 2910, 282, 7, 57, "Text"],
Cell[CellGroupData[{
Cell[86665, 2921, 988, 27, 159, "Input"],
Cell[87656, 2950, 176, 5, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87869, 2960, 1176, 30, 137, "Input"],
Cell[89048, 2992, 402, 13, 48, "Output"]
}, Open  ]],
Cell[89465, 3008, 106, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[89596, 3013, 105, 2, 48, "Input"],
Cell[89704, 3017, 75, 1, 48, "Output"]
}, Open  ]],
Cell[89794, 3021, 632, 20, 76, "Text"],
Cell[CellGroupData[{
Cell[90451, 3045, 106, 2, 48, "Input"],
Cell[90560, 3049, 74, 1, 48, "Output"]
}, Open  ]],
Cell[90649, 3053, 192, 6, 56, "Text"],
Cell[CellGroupData[{
Cell[90866, 3063, 166, 4, 71, "Input"],
Cell[91035, 3069, 126, 3, 48, "Output"]
}, Open  ]],
Cell[91176, 3075, 139, 1, 34, "Text"],
Cell[91318, 3078, 330, 9, 71, "Input"],
Cell[91651, 3089, 208, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[91884, 3097, 1097, 32, 159, "Input"],
Cell[92984, 3131, 508, 16, 71, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[93541, 3153, 92, 1, 35, "Subsection"],
Cell[93636, 3156, 243, 6, 76, "Text"],
Cell[93882, 3164, 718, 26, 78, "Text"],
Cell[94603, 3192, 578, 18, 57, "Text"],
Cell[CellGroupData[{
Cell[95206, 3214, 310, 9, 48, "Input"],
Cell[95519, 3225, 387, 15, 77, "Output"]
}, Open  ]],
Cell[95921, 3243, 183, 6, 48, "Input"],
Cell[CellGroupData[{
Cell[96129, 3253, 94, 2, 48, "Input"],
Cell[96226, 3257, 337, 7, 71, "Output"]
}, Open  ]],
Cell[96578, 3267, 128, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[96731, 3274, 80, 2, 48, "Input"],
Cell[96814, 3278, 87, 1, 48, "Output"]
}, Open  ]],
Cell[96916, 3282, 872, 28, 98, "Text"],
Cell[CellGroupData[{
Cell[97813, 3314, 115, 3, 48, "Input"],
Cell[97931, 3319, 86, 1, 48, "Output"]
}, Open  ]],
Cell[98032, 3323, 532, 11, 97, "Text"],
Cell[98567, 3336, 1144, 32, 120, "Text"],
Cell[CellGroupData[{
Cell[99736, 3372, 304, 10, 48, "Input"],
Cell[100043, 3384, 354, 12, 48, "Output"]
}, Open  ]],
Cell[100412, 3399, 260, 7, 34, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100709, 3411, 99, 1, 35, "Subsection"],
Cell[100811, 3414, 781, 23, 36, "Text",
 CellTags->{
  "T[D[Matrix Identities]]", "Index[06, {identities, for matrices}]"}],
Cell[101595, 3439, 868, 30, 51, "DisplayFormula"],
Cell[102466, 3471, 573, 17, 58, "Text"],
Cell[103042, 3490, 708, 22, 58, "Text"],
Cell[103753, 3514, 1617, 62, 28, "DisplayFormula"],
Cell[105373, 3578, 379, 11, 58, "Text"],
Cell[105755, 3591, 337, 7, 57, "Text"],
Cell[CellGroupData[{
Cell[106117, 3602, 636, 18, 71, "Input"],
Cell[106756, 3622, 139, 3, 48, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[106956, 3632, 93, 1, 56, "Section"],
Cell[107052, 3635, 251, 7, 97, "Text"],
Cell[CellGroupData[{
Cell[107328, 3646, 99, 1, 46, "Subsection"],
Cell[107430, 3649, 520, 14, 138, "Text"],
Cell[107953, 3665, 387, 9, 76, "Text"],
Cell[CellGroupData[{
Cell[108365, 3678, 117, 2, 48, "Input"],
Cell[108485, 3682, 70, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108592, 3688, 117, 2, 48, "Input"],
Cell[108712, 3692, 70, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108819, 3698, 115, 2, 48, "Input"],
Cell[108937, 3702, 70, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109044, 3708, 117, 2, 48, "Input"],
Cell[109164, 3712, 71, 1, 48, "Output"]
}, Open  ]],
Cell[109250, 3716, 256, 5, 55, "Text"],
Cell[109509, 3723, 411, 9, 76, "Text"],
Cell[109923, 3734, 107, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[110055, 3739, 153, 3, 48, "Input"],
Cell[110211, 3744, 172, 3, 48, "Output"]
}, Open  ]],
Cell[110398, 3750, 200, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[110623, 3758, 117, 2, 48, "Input"],
Cell[110743, 3762, 72, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110852, 3768, 119, 2, 48, "Input"],
Cell[110974, 3772, 74, 1, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111085, 3778, 138, 3, 66, "Input"],
Cell[111226, 3783, 90, 2, 66, "Output"]
}, Open  ]],
Cell[111331, 3788, 317, 8, 55, "Text"],
Cell[111651, 3798, 348, 8, 77, "Text"],
Cell[CellGroupData[{
Cell[112024, 3810, 173, 4, 48, "Input"],
Cell[112200, 3816, 85, 1, 48, "Output"]
}, Open  ]],
Cell[112300, 3820, 125, 2, 48, "Input"],
Cell[CellGroupData[{
Cell[112450, 3826, 497, 13, 48, "Input"],
Cell[112950, 3841, 536, 17, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113523, 3863, 470, 14, 66, "Input"],
Cell[113996, 3879, 233816, 3863, 481, "Output"]
}, Open  ]],
Cell[347827, 7745, 266, 5, 76, "Text"],
Cell[348096, 7752, 732, 21, 99, "Text"],
Cell[348831, 7775, 423, 10, 77, "Text"],
Cell[CellGroupData[{
Cell[349279, 7789, 128, 2, 48, "Input"],
Cell[349410, 7793, 84, 2, 62, "Output"]
}, Open  ]],
Cell[349509, 7798, 195, 4, 55, "Text"],
Cell[349707, 7804, 126, 2, 48, "Input"],
Cell[CellGroupData[{
Cell[349858, 7810, 128, 2, 48, "Input"],
Cell[349989, 7814, 154, 3, 48, "Output"]
}, Open  ]],
Cell[350158, 7820, 245, 7, 35, "Text"],
Cell[CellGroupData[{
Cell[350428, 7831, 93, 2, 48, "Input"],
Cell[350524, 7835, 103, 2, 62, "Output"]
}, Open  ]],
Cell[350642, 7840, 242, 4, 55, "Text"],
Cell[350887, 7846, 135, 3, 48, "Input"],
Cell[351025, 7851, 198, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[351248, 7859, 93, 2, 48, "Input"],
Cell[351344, 7863, 105, 2, 62, "Output"]
}, Open  ]],
Cell[351464, 7868, 424, 12, 56, "Text"],
Cell[CellGroupData[{
Cell[351913, 7884, 335, 9, 48, "Input"],
Cell[352251, 7895, 653, 18, 134, "Output"]
}, Open  ]],
Cell[352919, 7916, 346, 11, 56, "Text"],
Cell[CellGroupData[{
Cell[353290, 7931, 457, 14, 71, "Input",
 CellID->2116427372],
Cell[353750, 7947, 315, 9, 168, "Output"]
}, Open  ]],
Cell[354080, 7959, 405, 12, 55, "Text"],
Cell[CellGroupData[{
Cell[354510, 7975, 502, 15, 71, "Input",
 CellID->316307126],
Cell[355015, 7992, 1141, 26, 184, "Output"]
}, Open  ]],
Cell[356171, 8021, 1313, 41, 142, "Text"],
Cell[357487, 8064, 608, 15, 99, "Text"],
Cell[358098, 8081, 618, 23, 56, "Text"],
Cell[CellGroupData[{
Cell[358741, 8108, 663, 20, 93, "Input"],
Cell[359407, 8130, 823, 23, 230, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[360279, 8159, 101, 1, 46, "Subsection"],
Cell[360383, 8162, 320, 9, 56, "Text"],
Cell[CellGroupData[{
Cell[360728, 8175, 488, 14, 71, "Input"],
Cell[361219, 8191, 315, 9, 168, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[361571, 8205, 394, 12, 71, "Input"],
Cell[361968, 8219, 317, 9, 168, "Output"]
}, Open  ]],
Cell[362300, 8231, 519, 12, 98, "Text"],
Cell[362822, 8245, 1246, 42, 100, "Text"],
Cell[364071, 8289, 470, 13, 77, "Text"],
Cell[CellGroupData[{
Cell[364566, 8306, 533, 17, 93, "Input"],
Cell[365102, 8325, 400, 11, 168, "Output"]
}, Open  ]],
Cell[365517, 8339, 190, 4, 55, "Text"],
Cell[365710, 8345, 1129, 25, 202, "Text"],
Cell[366842, 8372, 171, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[367038, 8380, 648, 19, 115, "Input"],
Cell[367689, 8401, 530, 15, 97, "Output"]
}, Open  ]],
Cell[368234, 8419, 341, 6, 76, "Text"],
Cell[368578, 8427, 779, 21, 120, "Text"],
Cell[369360, 8450, 951, 26, 140, "Text"],
Cell[370314, 8478, 109, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[370448, 8485, 600, 18, 93, "Input"],
Cell[371051, 8505, 523, 14, 85, "Output"]
}, Open  ]],
Cell[371589, 8522, 189, 4, 55, "Text",
 CellID->671323377],
Cell[CellGroupData[{
Cell[371803, 8530, 1607, 44, 159, "Input",
 CellID->1118194978],
Cell[373413, 8576, 819, 23, 443, "Output"]
}, Open  ]],
Cell[374247, 8602, 573, 12, 118, "Text"],
Cell[374823, 8616, 262, 5, 76, "Text"],
Cell[CellGroupData[{
Cell[375110, 8625, 1024, 28, 137, "Input"],
Cell[376137, 8655, 699, 18, 246, "Output"]
}, Open  ]],
Cell[376851, 8676, 269, 9, 56, "Text",
 CellID->1235109669],
Cell[CellGroupData[{
Cell[377145, 8689, 846, 25, 115, "Input",
 CellID->1273405741],
Cell[377994, 8716, 630, 17, 246, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[378673, 8739, 105, 1, 46, "Subsection"],
Cell[378781, 8742, 332, 10, 117, "Text"],
Cell[379116, 8754, 233, 6, 55, "Text"],
Cell[CellGroupData[{
Cell[379374, 8764, 99, 1, 33, "Subsubsection"],
Cell[379476, 8767, 1050, 39, 57, "Text"],
Cell[380529, 8808, 304, 12, 34, "Text",
 CellID->258827707],
Cell[CellGroupData[{
Cell[380858, 8824, 61, 1, 48, "Input"],
Cell[380922, 8827, 85, 2, 62, "Output"]
}, Open  ]],
Cell[381022, 8832, 101, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[381148, 8837, 177, 5, 48, "Input"],
Cell[381328, 8844, 238, 6, 62, "Output"]
}, Open  ]],
Cell[381581, 8853, 262, 9, 34, "Text"],
Cell[CellGroupData[{
Cell[381868, 8866, 268, 8, 48, "Input"],
Cell[382139, 8876, 249, 6, 62, "Output"]
}, Open  ]],
Cell[382403, 8885, 280, 10, 37, "Text"],
Cell[CellGroupData[{
Cell[382708, 8899, 615, 18, 100, "Input"],
Cell[383326, 8919, 571, 15, 62, "Output"]
}, Open  ]],
Cell[383912, 8937, 112, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[384049, 8942, 2108, 56, 291, "Input"],
Cell[386160, 9000, 1318, 40, 387, "Output"]
}, Open  ]],
Cell[387493, 9043, 275, 7, 35, "Text"],
Cell[CellGroupData[{
Cell[387793, 9054, 1525, 43, 203, "Input"],
Cell[389321, 9099, 8200, 220, 284, "Output"]
}, Open  ]],
Cell[397536, 9322, 610, 19, 77, "Text"],
Cell[CellGroupData[{
Cell[398171, 9345, 110, 3, 48, "Input"],
Cell[398284, 9350, 92, 2, 133, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398413, 9357, 179, 5, 48, "Input"],
Cell[398595, 9364, 239, 6, 133, "Output"]
}, Open  ]],
Cell[398849, 9373, 73, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[398947, 9378, 422, 14, 48, "Input"],
Cell[399372, 9394, 260, 6, 133, "Output"]
}, Open  ]],
Cell[399647, 9403, 89, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[399761, 9408, 492, 16, 71, "Input"],
Cell[400256, 9426, 272, 6, 133, "Output"]
}, Open  ]],
Cell[400543, 9435, 123, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[400691, 9440, 2376, 68, 257, "Input"],
Cell[403070, 9510, 56093, 932, 258, "Output"]
}, Open  ]],
Cell[459178, 10445, 523, 17, 57, "Text"],
Cell[CellGroupData[{
Cell[459726, 10466, 147, 4, 48, "Input"],
Cell[459876, 10472, 1801, 45, 99, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[461714, 10522, 679, 22, 93, "Input"],
Cell[462396, 10546, 1206, 31, 232, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[463651, 10583, 113, 1, 33, "Subsubsection"],
Cell[463767, 10586, 1102, 42, 57, "Text"],
Cell[464872, 10630, 389, 13, 56, "Text"],
Cell[CellGroupData[{
Cell[465286, 10647, 179, 5, 48, "Input"],
Cell[465468, 10654, 240, 6, 51, "Output"]
}, Open  ]],
Cell[465723, 10663, 291, 10, 35, "Text"],
Cell[CellGroupData[{
Cell[466039, 10677, 278, 8, 48, "Input"],
Cell[466320, 10687, 254, 6, 51, "Output"]
}, Open  ]],
Cell[466589, 10696, 1109, 44, 63, "Text"],
Cell[CellGroupData[{
Cell[467723, 10744, 177, 5, 48, "Input"],
Cell[467903, 10751, 238, 6, 55, "Output"]
}, Open  ]],
Cell[468156, 10760, 378, 14, 35, "Text"],
Cell[CellGroupData[{
Cell[468559, 10778, 447, 12, 93, "Input"],
Cell[469009, 10792, 414, 10, 55, "Output"]
}, Open  ]],
Cell[469438, 10805, 826, 31, 35, "Text"],
Cell[CellGroupData[{
Cell[470289, 10840, 319, 9, 71, "Input"],
Cell[470611, 10851, 303, 7, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[470951, 10863, 274, 8, 48, "Input"],
Cell[471228, 10873, 2160, 56, 50, "Output"]
}, Open  ]],
Cell[473403, 10932, 814, 28, 57, "Text"],
Cell[CellGroupData[{
Cell[474242, 10964, 246, 7, 48, "Input"],
Cell[474491, 10973, 3388, 86, 50, "Output"]
}, Open  ]],
Cell[477894, 11062, 774, 28, 57, "Text"],
Cell[CellGroupData[{
Cell[478693, 11094, 279, 8, 48, "Input"],
Cell[478975, 11104, 319, 7, 65, "Output"]
}, Open  ]],
Cell[479309, 11114, 117, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[479451, 11119, 424, 13, 71, "Input"],
Cell[479878, 11134, 234805, 3893, 104, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[714720, 15032, 667, 20, 93, "Input"],
Cell[715390, 15054, 195318, 3217, 65, "Output"]
}, Open  ]],
Cell[910723, 18274, 1159, 39, 81, "Text"],
Cell[911885, 18315, 138, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[912048, 18322, 264, 8, 48, "Input"],
Cell[912315, 18332, 205, 5, 59, "Output"]
}, Open  ]],
Cell[912535, 18340, 94, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[912654, 18345, 292, 9, 71, "Input"],
Cell[912949, 18356, 246, 6, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[913232, 18367, 255, 7, 48, "Input"],
Cell[913490, 18376, 12158, 206, 58, "Output"]
}, Open  ]],
Cell[925663, 18585, 699, 25, 57, "Text"],
Cell[CellGroupData[{
Cell[926387, 18614, 324, 10, 48, "Input"],
Cell[926714, 18626, 180, 6, 490, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[926931, 18637, 572, 18, 93, "Input",
 CellID->1410452276],
Cell[927506, 18657, 447, 12, 266, "Output"]
}, Open  ]],
Cell[927968, 18672, 825, 29, 57, "Text"],
Cell[CellGroupData[{
Cell[928818, 18705, 557, 19, 71, "Input"],
Cell[929378, 18726, 276, 10, 490, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[929691, 18741, 866, 28, 93, "Input",
 CellID->155186329],
Cell[930560, 18771, 4033, 75, 266, "Output"]
}, Open  ]],
Cell[934608, 18849, 269, 5, 76, "Text"],
Cell[CellGroupData[{
Cell[934902, 18858, 237, 7, 48, "Input",
 CellID->43144859],
Cell[935142, 18867, 917, 28, 122, "Output"]
}, Open  ]],
Cell[936074, 18898, 197, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[936296, 18906, 654, 20, 93, "Input"],
Cell[936953, 18928, 2456, 44, 491, "Output"]
}, Open  ]],
Cell[939424, 18975, 429, 11, 55, "Text"],
Cell[CellGroupData[{
Cell[939878, 18990, 828, 27, 140, "Input"],
Cell[940709, 19019, 457, 10, 491, "Output"]
}, Open  ]],
Cell[941181, 19032, 114, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[941320, 19037, 857, 26, 115, "Input"],
Cell[942180, 19065, 420, 9, 328, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[942649, 19080, 102, 1, 33, "Subsubsection"],
Cell[942754, 19083, 639, 19, 79, "Text"],
Cell[CellGroupData[{
Cell[943418, 19106, 181, 5, 48, "Input"],
Cell[943602, 19113, 240, 6, 61, "Output"]
}, Open  ]],
Cell[943857, 19122, 98, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[943980, 19127, 91, 2, 48, "Input"],
Cell[944074, 19131, 232, 7, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[944343, 19143, 99, 2, 48, "Input"],
Cell[944445, 19147, 236, 7, 60, "Output"]
}, Open  ]],
Cell[944696, 19157, 227, 7, 34, "Text"],
Cell[CellGroupData[{
Cell[944948, 19168, 590, 18, 93, "Input"],
Cell[945541, 19188, 531, 15, 246, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[946121, 19209, 107, 1, 33, "Subsubsection"],
Cell[946231, 19212, 214, 5, 34, "Text"],
Cell[946448, 19219, 506, 17, 35, "Text"],
Cell[CellGroupData[{
Cell[946979, 19240, 182, 5, 48, "Input"],
Cell[947164, 19247, 261, 6, 77, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[947462, 19258, 182, 5, 48, "Input"],
Cell[947647, 19265, 251, 6, 59, "Output"]
}, Open  ]],
Cell[947913, 19274, 633, 17, 99, "Text"],
Cell[948549, 19293, 105, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[948679, 19298, 185, 5, 48, "Input"],
Cell[948867, 19305, 605, 17, 63, "Output"]
}, Open  ]],
Cell[949487, 19325, 108, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[949620, 19330, 231, 7, 48, "Input"],
Cell[949854, 19339, 613, 17, 63, "Output"]
}, Open  ]],
Cell[950482, 19359, 526, 12, 98, "Text"],
Cell[CellGroupData[{
Cell[951033, 19375, 82, 1, 48, "Input"],
Cell[951118, 19378, 147, 3, 48, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[951326, 19388, 81, 1, 46, "Subsection"],
Cell[951410, 19391, 224, 6, 76, "Text"],
Cell[951637, 19399, 271, 5, 76, "Text"],
Cell[CellGroupData[{
Cell[951933, 19408, 208, 7, 66, "Input"],
Cell[952144, 19417, 394, 11, 66, "Output"]
}, Open  ]],
Cell[952553, 19431, 90, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[952668, 19436, 265, 10, 80, "Input"],
Cell[952936, 19448, 397, 11, 66, "Output"]
}, Open  ]],
Cell[953348, 19462, 328, 8, 56, "Text"],
Cell[953679, 19472, 207, 7, 58, "Input",
 CellID->295672832],
Cell[953889, 19481, 225, 7, 58, "Input",
 CellID->1549036865],
Cell[954117, 19490, 408, 13, 58, "Input",
 CellID->718337474],
Cell[954528, 19505, 279, 5, 76, "Text",
 CellID->118970329],
Cell[CellGroupData[{
Cell[954832, 19514, 643, 19, 115, "Input",
 CellID->24858775],
Cell[955478, 19535, 1054, 17, 429, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[956581, 19558, 100, 1, 46, "Subsection"],
Cell[956684, 19561, 438, 12, 117, "Text"],
Cell[957125, 19575, 653, 20, 78, "Text"],
Cell[957781, 19597, 255, 7, 35, "Text"],
Cell[CellGroupData[{
Cell[958061, 19608, 117, 3, 48, "Input"],
Cell[958181, 19613, 227, 6, 62, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[958445, 19624, 219, 7, 48, "Input"],
Cell[958667, 19633, 244, 7, 133, "Output"]
}, Open  ]],
Cell[958926, 19643, 1041, 31, 119, "Text"],
Cell[959970, 19676, 521, 11, 98, "Text"],
Cell[960494, 19689, 595, 18, 78, "Text"],
Cell[CellGroupData[{
Cell[961114, 19711, 216, 5, 48, "Input"],
Cell[961333, 19718, 1155, 18, 159, "Output"]
}, Open  ]],
Cell[962503, 19739, 510, 16, 57, "Text"],
Cell[CellGroupData[{
Cell[963038, 19759, 219, 5, 48, "Input"],
Cell[963260, 19766, 1480, 31, 162, "Output"]
}, Open  ]],
Cell[964755, 19800, 255, 7, 34, "Text"],
Cell[CellGroupData[{
Cell[965035, 19811, 431, 12, 48, "Input"],
Cell[965469, 19825, 1545, 32, 416, "Output"]
}, Open  ]],
Cell[967029, 19860, 638, 14, 118, "Text"],
Cell[CellGroupData[{
Cell[967692, 19878, 552, 15, 71, "Input"],
Cell[968247, 19895, 1571, 32, 416, "Output"]
}, Open  ]],
Cell[969833, 19930, 393, 13, 56, "Text"],
Cell[CellGroupData[{
Cell[970251, 19947, 564, 17, 71, "Input"],
Cell[970818, 19966, 1833, 37, 468, "Output"]
}, Open  ]],
Cell[972666, 20006, 162, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[972853, 20013, 282, 8, 48, "Input"],
Cell[973138, 20023, 1536, 32, 162, "Output"]
}, Open  ]],
Cell[974689, 20058, 159, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[974873, 20065, 272, 8, 48, "Input"],
Cell[975148, 20075, 1532, 32, 162, "Output"]
}, Open  ]],
Cell[976695, 20110, 406, 9, 77, "Text"],
Cell[977104, 20121, 598, 15, 99, "Text"],
Cell[CellGroupData[{
Cell[977727, 20140, 774, 23, 93, "Input"],
Cell[978504, 20165, 2175, 43, 500, "Output"]
}, Open  ]],
Cell[980694, 20211, 219, 4, 55, "Text"],
Cell[980916, 20217, 289, 8, 56, "Text"],
Cell[CellGroupData[{
Cell[981230, 20229, 922, 26, 137, "Input"],
Cell[982155, 20257, 2258, 45, 506, "Output"]
}, Open  ]],
Cell[984428, 20305, 160, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[984613, 20312, 981, 28, 137, "Input"],
Cell[985597, 20342, 2277, 45, 500, "Output"]
}, Open  ]],
Cell[987889, 20390, 206, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[988120, 20398, 420, 12, 48, "Input"],
Cell[988543, 20412, 1535, 32, 426, "Output"]
}, Open  ]],
Cell[990093, 20447, 615, 16, 77, "Text"],
Cell[CellGroupData[{
Cell[990733, 20467, 529, 16, 48, "Input"],
Cell[991265, 20485, 1548, 32, 426, "Output"]
}, Open  ]],
Cell[992828, 20520, 682, 21, 78, "Text"],
Cell[CellGroupData[{
Cell[993535, 20545, 603, 17, 71, "Input"],
Cell[994141, 20564, 1566, 32, 426, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[995744, 20601, 97, 1, 33, "Subsubsection"],
Cell[995844, 20604, 1681, 46, 205, "Text"],
Cell[997528, 20652, 305, 8, 56, "Text"],
Cell[CellGroupData[{
Cell[997858, 20664, 716, 18, 71, "Input"],
Cell[998577, 20684, 1590, 32, 426, "Output"]
}, Open  ]],
Cell[1000182, 20719, 333, 9, 56, "Text"],
Cell[CellGroupData[{
Cell[1000540, 20732, 1046, 27, 93, "Input"],
Cell[1001589, 20761, 1892, 38, 484, "Output"]
}, Open  ]],
Cell[1003496, 20802, 164, 3, 34, "Text"],
Cell[CellGroupData[{
Cell[1003685, 20809, 1190, 29, 115, "Input"],
Cell[1004878, 20840, 2006, 40, 502, "Output"]
}, Open  ]],
Cell[1006899, 20883, 508, 14, 77, "Text"],
Cell[CellGroupData[{
Cell[1007432, 20901, 1066, 34, 137, "Input"],
Cell[1008501, 20937, 1934, 40, 596, "Output"]
}, Open  ]],
Cell[1010450, 20980, 142, 1, 34, "Text"],
Cell[CellGroupData[{
Cell[1010617, 20985, 914, 23, 137, "Input"],
Cell[1011534, 21010, 2221, 43, 664, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1013804, 21059, 98, 1, 33, "Subsubsection"],
Cell[1013905, 21062, 1033, 24, 183, "Text"],
Cell[1014941, 21088, 654, 13, 139, "Text"],
Cell[CellGroupData[{
Cell[1015620, 21105, 204, 6, 48, "Input"],
Cell[1015827, 21113, 1481, 31, 162, "Output"]
}, Open  ]],
Cell[1017323, 21147, 344, 7, 76, "Text"],
Cell[1017670, 21156, 501, 17, 57, "Text"],
Cell[CellGroupData[{
Cell[1018196, 21177, 263, 7, 71, "Input"],
Cell[1018462, 21186, 1506, 31, 162, "Output"]
}, Open  ]],
Cell[1019983, 21220, 275, 5, 76, "Text"],
Cell[1020261, 21227, 788, 17, 139, "Text"],
Cell[1021052, 21246, 413, 10, 77, "Text"],
Cell[CellGroupData[{
Cell[1021490, 21260, 311, 9, 71, "Input"],
Cell[1021804, 21271, 1528, 32, 174, "Output"]
}, Open  ]],
Cell[1023347, 21306, 442, 10, 77, "Text"],
Cell[CellGroupData[{
Cell[1023814, 21320, 577, 17, 71, "Input"],
Cell[1024394, 21339, 1605, 33, 594, "Output"]
}, Open  ]],
Cell[1026014, 21375, 388, 9, 55, "Text"],
Cell[CellGroupData[{
Cell[1026427, 21388, 606, 18, 93, "Input"],
Cell[1027036, 21408, 1635, 34, 594, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1028732, 21449, 96, 1, 46, "Subsection"],
Cell[1028831, 21452, 313, 8, 34, "Text"],
Cell[CellGroupData[{
Cell[1029169, 21464, 8740, 237, 888, "Input"],
Cell[1037912, 21703, 5108, 105, 644, "Output"]
}, Open  ]],
Cell[1043035, 21811, 259, 7, 34, "Text"],
Cell[CellGroupData[{
Cell[1043319, 21822, 394, 11, 33, "Subsubsection"],
Cell[CellGroupData[{
Cell[1043738, 21837, 11952, 294, 1126, "Input"],
Cell[1055693, 22133, 5147, 103, 680, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1060889, 22242, 382, 11, 33, "Subsubsection"],
Cell[1061274, 22255, 21774, 580, 1772, "Input",
 InitializationCell->True,
 CellID->436151219],
Cell[CellGroupData[{
Cell[1083073, 22839, 7775, 177, 408, "Input",
 CellID->1381273729],
Cell[1090851, 23018, 12206, 227, 606, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1103106, 23251, 417, 11, 33, "Subsubsection"],
Cell[CellGroupData[{
Cell[1103548, 23266, 5161, 121, 335, "Input",
 CellID->1824684510],
Cell[1108712, 23389, 3483, 67, 606, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1112256, 23463, 102, 1, 46, "Subsection"],
Cell[1112361, 23466, 448, 11, 57, "Text"],
Cell[1112812, 23479, 409, 13, 35, "Text"],
Cell[1113224, 23494, 180, 3, 35, "Text"],
Cell[1113407, 23499, 314, 7, 79, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
